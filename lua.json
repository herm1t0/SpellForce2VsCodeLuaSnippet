{
    "State": {
        "prefix": "SF2.State",
        "body": [
			"State",
            "{",
            "\tStateName = \"${1:stateName}\", -- The name of a State.",
            "\t${2:AddEventsHere}, -- None, one or more events.",
            "\tGotoState = \"${3:stateName}\", -- The name of a State. Optional",
            "}"
        ],
        "description": [
            "Creates a new State that “accepts” events.",
            "\nOne or more States form a State machine. A State is a container for events.",
            "Events that have a GotoState parameter allow the script to switch from one State to another.",
            "This makes it easy to influence the script flow and, of course, which events can be executed at what point in time.",
            "This is because only the conditions of the events that are currently active in the active State are checked.",
            "There is always only one active State in a State machine.",
            "At the beginning, this is the first State of a script.",
            "\nFor example, if you delay the transition from the first State to the next by inserting the appropriate conditions",
            "for the event with the corresponding GotoState, you can avoid errors because",
            "the character might execute something too early, and you also save performance because only",
            "the conditions for the State transition are checked, but not the conditions for events in other States."
        ]
    },
    "OnOneTimeEvent": {
        "prefix": "SF2.Event.OnOneTimeEvent",
        "body": [
			"OnOneTimeEvent",
            "{",
            "\tEventName = \"${1:eventName}\", -- The name of an Event (for debugging).",
            "\tConditions =",
            "\t{",
            "\t\t${2:AddConditionsHere} -- Conditions are specified here that must all be true at the same time.",
            "\t},",
            "\tActions =",
            "\t{",
            "\t\t${3:AddActionsHere} -- Here are the actions that need to be performed.",
            "\t},",
            "\tGotoState = \"${4:stateName}\", -- The name of a State. Optional",
            "}"
        ],
        "description": [
            "Event that is executed only once if the conditions are true.",
            "\nAn OnEvent that will definitely only be executed once.",
            "It is simply a wrapper from OnEvent that, in addition to the conditions,",
            "checks whether the EventFlag of this event is False.",
            "If the event is executed, the EventFlag is also set to True.",
            "As a result, the event cannot be executed a second time."
        ]
    },
    "AIAttackFrequencySet": {
        "prefix": "SF2.Action.AIAttackFrequencySet",
        "body": [
            "AIAttackFrequencySet",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name of an AI player.",
            "\tMinutes =  ${2:1}, -- Number of minutes.",
            "}"
        ],
        "description": [
            "Sets the attack frequency parameter for an AI player in minutes.",
            "\nConstruction AI: This value is approximate; AI attacks more often if the squad size is appropriate.",
            "Here, this value should be considered more as a weighting factor.",
            "Fast waves of attacks versus slow waves of attacks.",
            "\nMilitary AI: After this time has elapsed, the second wave of attack is launched,",
            "regardless of whether there are enough units."
        ] 
    },
    "AIConstructionOffensiveSet": {
        "prefix": "SF2.Action.AIConstructionOffensiveSet",
        "body": [
            "AIConstructionOffensiveSet",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name of an AI player.",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "UNTESTED",
            "Changes the parameter for the build behavior of an AI player.",
            "\nOnly relevant for Construction AI",
            "This parameter indicates which goal the AI considers more important: troops or base.",
            "\nPercentage = 100: The AI first builds military buildings and troops,",
            "then buildings for resource extraction and workers, and finally, possibly towers.",
            "\nPercentage = 0: The AI first tries to expand its base and protect it with towers.",
            "\nUnder no circumstances can it be completely ruled out that the AI will still build towers or regular buildings.",
            "This parameter is not yet fully implemented in the AI, i.e., it is not balanced."
        ]
    },   
    "OnEvent": {
        "prefix": "SF2.Event.OnEvent",
        "body": [
            "OnEvent",
            "{",
            "\tEventName = \"${1:eventName}\", -- The name of an Event (for debugging).",
            "\tConditions =",
            "\t{",
            "\t\t${2:AddConditionsHere} -- Conditions are specified here that must all be true at the same time.",
            "\t},",
            "\tActions =",
            "\t{",
            "\t\t${3:AddActionsHere} -- Here are the actions that need to be performed.",
            "\t},",
            "\tGotoState = \"${4:stateName}\" -- The name of a State. Optional",
            "}"
        ],
        "description": [
            "Event that is always executed when the conditions are true.",
            "\nOnEvent is, so to speak, the basis for all other events. It is always executed when the conditions are true.",
            "This means that you have to make sure that one of the actions prevents the event from being executed over and over again.",
            "The easiest way to achieve this is to query as a condition whether a certain flag is false and set it to true in the actions.",
            "However, this would then be an OnOneTimeEvent, and it is better to use this one instead.",
            "\nTheoretically, you can also have the OnEvent executed every step, but there is no case where this makes sense,",
            "except perhaps to emphasize the laziness of the script writer. ;)",
            "\nOn the contrary, an OnEvent that is executed every step causes problems because it burdens the game with unnecessary actions,",
            "the execution of which costs time. For example, a Goto that is executed every step",
            "will restart the pathing every step and also lead to jerky behavior of the character.",
            "\nIn most cases, an event should only be executed once, and then it is better to use OnOneTimeEvent.",
            "PS: OnEvent corresponds to a transition in the StateMachine."
        ]
    },
    "AIEnemyAdd": {
        "prefix": "SF2.Action.AIEnemyAdd",
        "body": [
            "AIEnemyAdd",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name of an AI player.",
            "\tTag = \"${2:scriptTag}\" -- A script tag.",
            "}"
        ],
        "description": [
            "UNTESTED",
            "Adds the script tag to the AI player's enemy list.",
            "\nYou can specify a target for the AI using SciptTag/Player(AI or Human) Name/Team Name.",
            "Depending on the type of target, the following happens:",
            "\n- Player/Team: The AI attempts to wipe out the opponent (not yet fully implemented).",
            "\n- Unit: The AI sends out waves of attacks. Once the troop has set off, it does not change its target.",
            "If it has reached its target and the unit is somewhere else, it tries to attack there.", 
            "New troops always take the current coordinates of the unit and do not change these coordinates along the way.",
            "\n- Building/object: The troop goes to the corresponding coordinates and attacks all enemies.",
            "\nATTENTION: Enemies must be set to Enemy in the TeamAggro table, otherwise Combat will not attack!",
            "Adding the tag does not make them hostile.",
            "\nIf the entity represents an object, the AI will send attack troops to the object, and they will remain there.",
            "This allows you to define “points of interest” for the AI using objects!"
        ]
    },
    "AIEnemyListClear": {
        "prefix": "SF2.Action.AIEnemyListClear",
        "body": [
            "AIEnemyListClear",
            "{",
            "\tPlayer = \"${1:playerName}\" -- The player name of an AI player.",
            "}"
        ],
        "description": [
            "UNTESTED",
            "Clears the enemy list of an AI player.",
            "\nThe enemy list created by script for the AI player is cleared."
        ]
    },
    "AIEnemyRemove": {
        "prefix": "SF2.Action.AIEnemyRemove",
        "body": [
            "AIEnemyRemove",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name of an AI player.",
            "\tTag = \"${2:scriptTag}\" -- A script tag.",
            "}"
        ],
        "description": [
            "UNTESTED",
            "Removes the ScriptTag from the AI player's enemy list.",
            "\nRemoves the ScriptTag entity from the AI player's enemy list."
        ]
    },
    "AILevelSet": {
        "prefix": "SF2.Action.AILevelSet",
        "body": [
            "AILevelSet",
            "{",
            "\tPlayer = \"${1:playerName}\",  -- The player name of an AI player.",
            "\tLevel = ${2:50} -- The level of a unit, item, or spell.",
            "}"
        ],
        "description": [
            "UNTESTED",
            "Changes the parameter for the level for an AI player.",
            "\nThis command sets the unit and building levels of the AI player. This is necessary because the AI does not have an avatar",
            "whose level it could use to determine the level of your units/buildings.",
            "\nThe command can also be used to change the AI level during the course of the map by simply setting a new level.",
            "However, this only affects newly produced buildings and characters; existing ones retain their level."
        ]
    },
    "AIMilitaryOffensiveSet": {
        "prefix": "SF2.Action.AIMilitaryOffensiveSet",
        "body": [
            "AIMilitaryOffensiveSet",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name of an AI player.",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Changes the parameter for military offensive behavior for an AI player.",
            "\nSpecifies the percentage of military units built by the AI.",
            "\nPercent = 100 means that the AI is very offensive and sends out attack squads early on.",
            "Percent = 0 means that the AI is completely defensive and keeps its troops in camp.",
            "\nMilitary Offensive also affects scouting (locating enemies), for example:",
            "If the AI is very offensive, there will be much more scouting."
        ]
    },
    "AIPlayerDeactivate": {
        "prefix": "SF2.Action.AIPlayerDeactivate",
        "body": [
            "AIPlayerDeactivate",
            "{",
            "\tPlayer = \"${1:playerName}\"  -- The player name of an AI player.",
            "}"
        ],
        "description": "Disables an AI player — it stops producing, building, repairing, and gathering."
    },
    "AITechTreeAddBuilding": {
        "prefix": "SF2.Action.AITechTreeAddBuilding",
        "body": [
            "AITechTreeAddBuilding",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name of an AI player.",
            "\tBuildingId = ${2:50} -- The Building ID from the Database.",
            "}"
        ],
        "description": "Allows the AI player to construct a new building."
    },
    "AITechTreeAddBuildingUpgrade": {
        "prefix": "SF2.Action.AITechTreeAddBuildingUpgrade",
        "body": [
            "AITechTreeAddBuildingUpgrade",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name of an AI player.",
            "\tUpgradeId = ${2:50} -- The Building Upgrade ID from the Database.",
            "}"
        ],
        "description": "Allows the AI player to construct a new building upgrade."
    },
    "AITechTreeGiveAll": {
        "prefix": "SF2.Action.AITechTreeGiveAll",
        "body": [
            "AITechTreeGiveAll",
            "{",
            "\tPlayer = \"${1:playerName}\" -- The player name of an AI player.",
            "}"
        ],
        "description": "Allows the AI player to build everything from the tech tree."
    },
    "AITroupSizeSet": {
        "prefix": "SF2.Action.AITroupSizeSet",
        "body": [
            "AITroupSizeSet",
            "{",
            "\tPlayer = \"${1:playerName}\" -- The player name of an AI player.",
            "\tSize = ${2:50} -- The size of an Attacking force.",
            "}"
        ],
        "description": [
            "Changes the parameter for the Attack force size for an AI player.",
            "\nSets the size of the AI player's attack forces.",
            "The Size parameter is the number of units in an attack force.",
            "\nConstruction AI: Approximate number of troops",
            "Military AI: The exact troop size,",
            "with the attack frequency parameter (AIAttackFrequencySet) currently taking priority.",
            "\nIf there are not enough troops available at the time of the attack,",
            "the attack will be launched with the available troop size."
        ]
    },
    "AIUnitTimerSet": {
        "prefix": "SF2.Action.AIUnitTimerSet",
        "body": [
            "AIUnitTimerSet",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name of an AI player.",
            "\tValue = ${2:50} -- Value of a variable",
            "}"
        ],
        "description": "Sets the AI unit timer."
    },
    "AtmoZoneChange": {
        "prefix": "SF2.Action.AtmoZoneChange",
        "body": [
            "AtmoZoneChange",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tAtmoDay = \"${2:filePath}\", -- A file including the path relative to the ‘redist/base/sound/00_atmoset_’ file without the .XML extension.",
            "\tAtmoNight = \"${3:filePath}\" -- A file including the path relative to the ‘redist/base/sound/00_atmoset_’ file without the .XML extension.",
            "}"
        ],
        "description": "Changes the parameters of an Atmo Zone."
    },
    "AvatarFlagRandomize": {
        "prefix": "SF2.Action.AvatarFlagRandomize",
        "body": [
            "AvatarFlagRandomize",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:name}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": "NEED TEST!\nMinValue, MaxValue not implemented? Sets the avatar variable to a random value in the min-max range."
    },
    "AvatarFlagSetFalse": {
        "prefix": "SF2.Action.AvatarFlagSetFalse",
        "body": [
            "AvatarFlagSetFalse",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:name}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": "Sets the avatar flag to false."
    },
    "AvatarFlagSetTrue": {
        "prefix": "SF2.Action.AvatarFlagSetTrue",
        "body": [
            "AvatarFlagSetTrue",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:name}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": "Sets the avatar flag to true."
    },
    "AvatarFlagToggle": {
        "prefix": "SF2.Action.AvatarFlagToggle",
        "body": [
            "AvatarFlagToggle",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:name}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": "Negates the truth value of the Avatar flag."
    },
    "AvatarFollowCameraDirectionUpdate": {
        "prefix": "SF2.Action.AvatarFollowCameraDirectionUpdate",
        "body": [
            "AvatarFollowCameraDirectionUpdate",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag.",
            "}"
        ],
        "description": "Changes the viewing direction of the tracking camera so that it is positioned directly behind the avatar."
    },
    "AvatarGoldGive": {
        "prefix": "SF2.Action.AvatarGoldGive",
        "body": [
            "AvatarGoldGive",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tAmount = ${2:50} -- Gold amount.",
            "}"
        ],
        "description": "Gives the avatar a certain amount of gold."
    },
    "AvatarGoldTake": {
        "prefix": "SF2.Action.AvatarGoldTake",
        "body": [
            "AvatarGoldTake",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tAmount = ${2:50} -- Gold amount.",
            "}"
        ],
        "description": "Takes a certain amount of gold from the avatar."
    },
    "AvatarItemEquipmentGive": {
        "prefix": "SF2.Action.AvatarItemEquipmentGive",
        "body": [
            "AvatarItemEquipmentGive",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tItemId = ${2:50}, -- The Item ID from the Database",
            "\tAmount = ${3:50} -- Item amount",
            "}"
        ],
        "description": [
            "Gives the avatar a certain number of equipment items.",
            "\nGives a specific player's avatar a specific amount of a specific equipment item."
        ]
    },
    "AvatarItemEquipmentTake": {
        "prefix": "SF2.Action.AvatarItemEquipmentTake",
        "body": [
            "AvatarItemEquipmentTake",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tItemId = ${2:50}, -- The Item ID from the Database",
            "\tAmount = ${3:50} -- Any amount",
            "}"
        ],
        "description": [
            "Takes a certain number of equipment items from the avatar.",
            "\nTakes a certain amount of a certain equipment item from a specific player's avatar."
        ]
    },
    "AvatarItemGenericGive": {
        "prefix": "SF2.Action.AvatarItemGenericGive",
        "body": [
            "AvatarItemGenericGive",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tPrefixId = ${2:50}, -- The Item ID from the Database.",
            "\tItemId = ${3:50}, -- The Item ID from the Database.",
            "\tSuffixId = ${4:50}, -- The Item ID from the Database.",
            "\tLevel = ${5:50}, -- The level of a unit, item, or spell.",
            "\tAmount = ${6:50} -- Any amount.",
            "}"
        ],
        "description": "Gives the avatar a certain number of randomly assembled generic items."
    },   
    "AvatarItemGenericVariableGive": {
        "prefix": "SF2.Action.AvatarItemGenericVariableGive",
        "body": [
            "AvatarItemGenericVariableGive",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tVarPrefixId = \"${2:var}\", -- The Item ID from the Database, stored in a MapValue.",
            "\tVarItemId = \"${3:var}\", -- The Item ID from the Database, stored in a MapValue.",
            "\tVarSuffixId = \"${4:var}\", -- The Item ID from the Database, stored in a MapValue.",
            "\tVarLevel = \"${5:var}\", -- The level of a unit, item, or spell, stored in a MapValue.",
            "\tAmount = ${6:50} -- Any amount.",
            "}"
        ],
        "description": "Gives the avatar a certain number of randomly assembled generic items (values comes from MapValue variables)."
    },
    "AvatarItemMiscGive": {
        "prefix": "SF2.Action.AvatarItemMiscGive",
        "body": [
            "AvatarItemMiscGive",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tItemId = ${2:50}, -- The Item ID from the Database.",
            "\tAmount = ${3:50} -- Any amount.",
            "}"
        ],
        "description": [
            "Gives the avatar a certain number of misc items.",
            "\nGives the avatar of a specific player a certain amount of a specific misc (quest) item."
        ]
    },
    "AvatarItemMiscTake": {
        "prefix": "SF2.Action.AvatarItemMiscTake",
        "body": [
            "AvatarItemMiscTake",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tItemId = ${2:50}, -- The Item ID from the Database.",
            "\tAmount = ${3:50} -- Any amount.",
            "}"
        ],
        "description": [
            "Takes a certain number of misc items from the avatar.",
            "\nTakes a certain amount of a certain misc (quest) item from a specific player's avatar."
        ]
    },
    "AvatarSpawn": {
        "prefix": "SF2.Action.AvatarSpawn",
        "body": [
            "AvatarSpawn",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tX = ${2:50}, -- The X coordinate in world coordinates.",
            "\tY = ${3:50}, -- The Y coordinate in world coordinates.",
            "\tDirection = ${4:50} -- A direction in degrees (0-360°). 0° is south, 90° is east.",
            "}"
        ],
        "description": [
            "Spawns the player's avatar at the specified location.",
            "\nRevive the avatar at this position. The command is only intended for cutscenes to ensure",
            "that the avatar participates in the cutscene, even if they died shortly before."
        ]
    },
    "AvatarSpawnToEntity": {
        "prefix": "SF2.Action.AvatarSpawnToEntity",
        "body": [
            "AvatarSpawnToEntity",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tTargetTag = \"${2:targetTag}\", -- The script tag of the target.",
            "\tDirection = ${3:50} -- A direction in degrees (0-360°). 0° is south, 90° is east.",
            "}"
        ],
        "description": [
            "Spawns the player's avatar at the script tag.",
            "\nRevive the avatar at this position. The command is only intended for cutscenes to ensure",
            "that the avatar participates in the cutscene, even if they died shortly before."
        ]
    },
    "AvatarTimerStart": {
        "prefix": "SF2.Action.AvatarTimerStart",
        "body": [
            "AvatarTimerStart",
            "{",
            "\tName = \"${1:timerName}\", -- The name of the avatar timer.",
            "\tPlayer = \"${2:playerName}\" -- The player name as set in Teamsetup.",
            "}"
        ],
        "description": "Starts an avatar timer."
    },
    "AvatarTimerStop": {
        "prefix": "SF2.Action.AvatarTimerStop",
        "body": [
            "AvatarTimerStop",
            "{",
            "\tName = \"${1:timerName}\", -- The name of the avatar timer.",
            "\tPlayer = \"${2:playerName}\" -- The player name as set in Teamsetup.",
            "}"
        ],
        "description": "Stops (deletes) an avatar timer."
    },
    "AvatarValueAdd": {
        "prefix": "SF2.Action.AvatarValueAdd",
        "body": [
            "AvatarValueAdd",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tValue = ${3:50} -- Value of a variable.",
            "}"
        ],
        "description": "Adds the value to the avatar variable."
    },
    "AvatarValueAddVariable": {
        "prefix": "SF2.Action.AvatarValueAddVariable",
        "body": [
            "AvatarValueAddVariable",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tPlayer = \"${3:playerName}\", -- The player name as set in Teamsetup.",
            "\tVariable = \"${4:var}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": [
            "Adds the variable to the avatar variables.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name + Variable"
        ]
    },
    "AvatarValueDecrease": {
        "prefix": "SF2.Action.AvatarValueDecrease",
        "body": [
            "AvatarValueDecrease",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": [
            "Decrements (reduces) the value by 1.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name - 1"
        ]
    },
    "AvatarValueDivide": {
        "prefix": "SF2.Action.AvatarValueDivide",
        "body": [
            "AvatarValueDivide",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tValue = ${3:50} -- Value of a variable.",
            "}"
        ],
        "description": "Divides the value by the avatar variable."
    },
    "AvatarValueDivideVariable": {
        "prefix": "SF2.Action.AvatarValueDivideVariable",
        "body": [
            "AvatarValueDivideVariable",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tPlayer = \"${3:playerName}\", -- The player name as set in Teamsetup.",
            "\tVariable = \"${4:var}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": [
            "Divides the variable by the avatar variable.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name / Variable"
        ]
    },
    "AvatarValueExchangeVariable": {
        "prefix": "SF2.Action.AvatarValueExchangeVariable",
        "body": [
            "AvatarValueExchangeVariable",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tPlayer = \"${3:playerName}\", -- The player name as set in Teamsetup.",
            "\tVariable = \"${4:var}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": [
            "Replaces the variable with the avatar variable.",
            "\nPerforms the following arithmetic operation:",
            "Temp = Name",
            "Name = Variable",
            "Variable = Temp",
            "\nIn other words: the values of the two variables are swapped. If Name was previously 5 and Variable was 20,",
            "then after execution, Name is 20 and Variable has the value 5."
        ]
    },
    "AvatarValueIncrease": {
        "prefix": "SF2.Action.AvatarValueIncrease",
        "body": [
            "AvatarValueIncrease",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\" -- The name of the avatar variable.",
            "}",
        ],
        "description": [
            "Increments (increases) the value by 1.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name + 1"
        ]
    },
    "AvatarValueMultiply": {
        "prefix": "SF2.Action.AvatarValueMultiply",
        "body": [
            "AvatarValueMultiply",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tValue = ${3:50} -- Value of a variable.",
            "}"
        ],
        "description": "Multiplies the value by the avatar variable."
    },
    "AvatarValueMultiplyVariable": {
        "prefix": "SF2.Action.AvatarValueMultiplyVariable",
        "body": [
            "AvatarValueMultiplyVariable",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tPlayer = \"${3:playerName}\", -- The player name as set in Teamsetup.",
            "\tVariable = \"${4:var}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": [
            "Multiplies the variable by the avatar variable.",
            "\nPerforms the following calculation:",
            "Name = Name * Variable"
        ]
    },
    "AvatarValueRandomize": {
        "prefix": "SF2.Action.AvatarValueRandomize",
        "body": [
            "AvatarValueRandomize",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tMinValue = ${3:50}, -- The smallest value that the random function should return.",
            "\tMaxValue = ${4:50} -- The largest value that the random function should return.",
            "}"
        ],
        "description": "Sets the Avatar variable to a random value in the Min-Max range."
    },
    "AvatarValueSet": {
        "prefix": "SF2.Action.AvatarValueSet",
        "body": [
            "AvatarValueSet",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tValue = ${3:50} -- Value of a variable.\",",
            "}"
        ],
        "description": "Sets the avatar variable to a specific value."
    },
    "AvatarValueSetVariable": {
        "prefix": "SF2.Action.AvatarValueSetVariable",
        "body": [
            "AvatarValueSetVariable",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tPlayer = \"${3:playerName}\", -- The player name as set in Teamsetup.",
            "\tVariable = \"${4:var}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": [
            "Assigns the value of the avatar variable to the variable.",
            "\nPerforms the following arithmetic operation:",
            "Name = Variable"
        ]
    },
    "AvatarValueSubtract": {
        "prefix": "SF2.Action.AvatarValueSubtract",
        "body": [
            "AvatarValueSubtract",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tValue = ${3:50} -- Value of a variable.",
            "}"
        ],
        "description": "Subtracts the value from the avatar variable."
    },
    "AvatarValueSubtractVariable": {
        "prefix": "SF2.Action.AvatarValueSubtractVariable",
        "body": [
            "AvatarValueSubtractVariable",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tName = \"${2:var}\", -- The name of the avatar variable.",
            "\tPlayer = \"${3:playerName}\", -- The player name as set in Teamsetup.",
            "\tVariable = \"${4:var}\" -- The name of the avatar variable.",
            "}"
        ],
        "description": [
            "Subtracts the variable from the avatar variable.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name - Variable"
        ]
    },
    "AvatarXPGive": {
        "prefix": "SF2.Action.AvatarXPGive",
        "body": [
            "AvatarXPGive",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tAmount = ${2:50} -- Any amount.",
            "}"
        ],
        "description": [
            "Gives XP to the avatar.",
            "\nGives a specific player's avatar a certain amount of XP (experience)."
        ]
    },
    "BuildingAbilityAdd": {
        "prefix": "SF2.Action.BuildingAbilityAdd",
        "body": [
            "BuildingAbilityAdd",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tAbilityId = ${2:50} -- The Ability ID from the Database.",
            "}"
        ],
        "description": "Gives the building the specified ability."
    },
    "BuildingAbilityRemove": {
        "prefix": "SF2.Action.BuildingAbilityRemove",
        "body": [
            "BuildingAbilityRemove",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tAbilityId = ${2:50} -- The Ability ID from the Database.",
            "}"
        ],
        "description": "Removes the specified ability from the building."
    },
    "BuildingDestroy": {
        "prefix": "SF2.Action.BuildingDestroy",
        "body": [
            "BuildingDestroy",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "Destroy the building immediately.",
            "\nThe building collapses into the ground along with the smoke and everything else,",
            "as if it had been destroyed by game units."
        ]
    },
    "BuildingHealthAdd": {
        "prefix": "SF2.Action.BuildingHealthAdd",
        "body": [
            "BuildingHealthAdd",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Adds percent of max health points to Building Health.",
            "\nAdds a certain percentage of the building's maximum hit points",
            "to the current value of the hit points.",
            "\nIf you enter 100 percent, you can be sure that the building will have maximum health points afterwards."
        ]
    },
    "BuildingHealthSet": {
        "prefix": "SF2.Action.BuildingHealthSet",
        "body": [
            "BuildingHealthSet",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Sets Building Health to percent of maximum health points.",
            "\nSets the hit points of a building to a certain percentage of the maximum hit points.",
            "\nIf you enter 100 percent, you can be sure that the building will have maximum health points afterwards."
        ]
    },
    "BuildingHealthSubtract": {
        "prefix": "SF2.Action.BuildingHealthSubtract",
        "body": [
            "BuildingHealthSubtract",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Subtracts percent of maximum health points from Building Health.",
            "\nSubtracts a specified percentage of the building's maximum hit points from the current hit point value.",
            "\nIf you enter 100 Percent, it is guaranteed that the building will then only have 0 hit points left.",
            "It will then be on the edge of destruction. If you want to destroy the building, you should use the BuildingDestroy command instead."
        ]
    },
    "BuildingTeamTransfer": {
        "prefix": "SF2.Action.BuildingTeamTransfer",
        "body": [
            "BuildingTeamTransfer",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tTeam = \"${2:teamName}\" -- The team name from the editor.",
            "}"
        ],
        "description": "Transfers a building to a team."
    },
    "CameraSet": {
        "prefix": "SF2.Action.CameraSet",
        "body": [
            "CameraSet",
            "{",
            "\tX = ${1:50}, -- The X coordinate in world coordinates.",
            "\tY = ${2:50}, -- The Y coordinate in world coordinates.",
            "\tZ = ${3:50}, -- The Z coordinate in world coordinates.",
            "\tLookAtX = ${4:50}, -- The LookAtX coordinate in world coordinates.",
            "\tLookAtY = ${5:50}, -- The LookAtY coordinate in world coordinates.",
            "\tLookAtZ = ${6:50} -- The LookAtZ coordinate in world coordinates.",
            "}"
        ],
        "description": "Sets a stationary camera and makes it look at the LookAt coordinates."
    },
    "CameraStop": {
        "prefix": "SF2.Action.CameraStop",
        "body": [
            "CameraStop{}"
        ],
        "description": "Stops a camera set with CameraSet."
    },
    "CameraTakeAddToTrack": {
        "prefix": "SF2.Action.CameraTakeAddToTrack",
        "body": [
            "CameraTakeAddToTrack",
            "{",
            "\tFile = \"${1:file}\", -- A .TAK file from the ‘camera’ folder of a card, without the .tak extension.",
            "\tTag = \"${2:scriptTag}\", -- A script tag",
            "\tTargetTag = \"${3:targetTag}\" -- The script tag of the target can also be an empty string.",
            "}"
        ],
        "description": "Adds a camera take. Must be called before CameraTrackPlay."
    },
    "CameraTakePlay": {
        "prefix": "SF2.Action.CameraTakePlay",
        "body": [
            "CameraTakePlay",
            "{",
            "\tFile = \"${1:file}\" -- A .TAK file from the ‘camera’ folder of a card, without the .tak extension.",
            "}"
        ],
        "description": "Adds a camera take. Must be called before CameraTrackPlay."
    },
    "CameraTrackClear": {
        "prefix": "SF2.Action.CameraTrackClear",
        "body": [
            "CameraTrackClear{}"
        ],
        "description": "Deletes all takes from the track."
    },
    "CameraTrackPlay": {
        "prefix": "SF2.Action.CameraTrackPlay",
        "body": [
            "CameraTrackPlay{}"
        ],
        "description": "Plays all takes recorded so far one after the other (multiple takes = track)."
    },
    "CutsceneBegin": {
        "prefix": "SF2.Action.CutsceneBegin",
        "body": [
            "CutsceneBegin",
            "{",
            "\tFile = \"${1:file}\" -- A file including the path relative to the ‘/base/sound/00_music/cutscene_music/’ folder without the .MP3 extension.",
            "}"
        ],
        "description": "Starts a cutscene."
    },
    "CutsceneBeginWithMusic": {
        "prefix": "SF2.Action.CutsceneBeginWithMusic",
        "body": [
            "CutsceneBeginWithMusic",
            "{",
            "\tFile = \"${1:file}\" -- A file including the path relative to the ‘redist/base/sound/00_music’ folder without the .MP3 extension.",
            "}"
        ],
        "description": "A cutscene starts with music."
    },
    "CutsceneCombatDisable": {
        "prefix": "SF2.Action.CutsceneCombatDisable",
        "body": [
            "CutsceneCombatDisable",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Disables the combat system for cutscenes."
    },
    "CutsceneCombatEnable": {
        "prefix": "SF2.Action.CutsceneCombatEnable",
        "body": [
            "CutsceneCombatEnable",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Enables the combat system for cutscenes."
    },
    "CutsceneCombatOff": {
        "prefix": "SF2.Action.CutsceneCombatOff",
        "body": [
            "CutsceneCombatOff{}"
        ],
        "description": "Disables the combat system for cutscenes."
    },
    "CutsceneCombatOn": {
        "prefix": "SF2.Action.CutsceneCombatOn",
        "body": [
            "CutsceneCombatOn{}"
        ],
        "description": "Enables the combat system for cutscenes."
    },
    "CutsceneEnd": {
        "prefix": "SF2.Action.CutsceneEnd",
        "body": [
            "CutsceneEnd{}"
        ],
        "description": "Ends a cutscene."
    },
    "CutsceneFigureFreeze": {
        "prefix": "SF2.Action.CutsceneFigureFreeze",
        "body": [
            "CutsceneFigureFreeze",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Freezes the animation of a character."
    },
    "CutsceneFigureRenderAll": {
        "prefix": "SF2.Action.CutsceneFigureRenderAll",
        "body": [
            "CutsceneFigureRenderAll{}"
        ],
        "description": "Renders all figures again."
    },
    "CutsceneFigureRenderList": {
        "prefix": "SF2.Action.CutsceneFigureRenderList",
        "body": [
            "CutsceneFigureRenderList",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Creates a list of figures to be rendered."
    },
    "CutsceneFigureTeleport": {
        "prefix": "SF2.Action.CutsceneFigureTeleport",
        "body": [
            "CutsceneFigureTeleport",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tX = ${1:50}, -- The X coordinate in world coordinates.",
            "\tY = ${2:50} -- The Y coordinate in world coordinates.",
            "}"
        ],
        "description": "Instantly moves the character to the specified point."
    },
    "CutsceneFigureTeleportBack": {
        "prefix": "SF2.Action.CutsceneFigureTeleportBack",
        "body": [
            "CutsceneFigureTeleportBack",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Returns the character to the point where they stood before the last teleport command."
    },
    "CutsceneFigureTeleportToEntity": {
        "prefix": "SF2.Action.CutsceneFigureTeleportToEntity",
        "body": [
            "CutsceneFigureTeleportToEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": "Instantly moves the character to the position of the target entity."
    },
    "CutsceneFigureWeaponsHide": {
        "prefix": "SF2.Action.CutsceneFigureWeaponsHide",
        "body": [
            "CutsceneFigureWeaponsHide",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Turns off the display of this character's weapons."
    },    
    "CutsceneFigureWeaponsShow": {
        "prefix": "SF2.Action.CutsceneFigureWeaponsShow",
        "body": [
            "CutsceneFigureWeaponsShow",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Turns on the display of this character's weapons."
    },
    "CutsceneSay": {
        "prefix": "SF2.Action.CutsceneSay",
        "body": [
            "CutsceneSay",
            "{",
            "\tTextTag = \"${1:textTag}\", -- Text tag for the Loka(?).",
            "\tTag = \"${2:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Text output in a cutscene."
    },
    "DebugMessage": {
        "prefix": "SF2.Action.DebugMessage",
        "body": [
            "DebugMessage",
            "{",
            "\tCaption = \"${1:debugTitle}\", -- The title bar above a DebugMessage/QuestionBox.",
            "\tMessage = \"${2:debugMessage}\" -- The message in a DebugMessageBox.",
            "}"
        ],
        "description": "Displays a Windows MessageBox that can be used to output debug messages."
    },
    "DialogBegin": {
        "prefix": "SF2.Action.DialogBegin",
        "body": [
            "DialogBegin",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tTag = \"${2:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Starts a dialog from the script."
    },
    "DialogCameraTakeAddToTrack": {
        "prefix": "SF2.Action.DialogCameraTakeAddToTrack",
        "body": [
            "DialogCameraTakeAddToTrack",
            "{",
            "\tFile = \"${1:file}\", -- A .TAK file from the DialogCamera folder, without the .tak extension.",
            "\tTag = \"${2:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${3:targetTag}\" -- The script tag of the target can also be an empty string.",
            "}"
        ],
        "description": "Adds a Camera Take dialog. FOR INTERNAL USE ONLY!"
    },
    "DialogSetDisabled": {
        "prefix": "SF2.Action.DialogSetDisabled",
        "body": [
            "DialogSetDisabled",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "Disables the dialog for this entity.",
            "\nDisables an NPC's ability to interact (the symbol above its head disappears)."
        ]
    },
    "DialogSetEnabled": {
        "prefix": "SF2.Action.DialogSetEnabled",
        "body": [
            "DialogSetEnabled",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "Enables the dialog for this entity.",
            "\nEnables an NPC's ability to interact (the symbol above its head appears)."
        ]
    },
    "DialogTypeSetMainQuest": {
        "prefix": "SF2.Action.DialogTypeSetMainQuest",
        "body": [
            "DialogTypeSetMainQuest",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "Sets the dialog flag and character of an entity to ‘Mainquest’.",
            "\nSets the dialogue symbol of an NPC to the “MainQuest” type. This is the exclamation mark.",
            "\nSwitching is also possible when the dialog is currently disabled."
        ]
    },
    "DialogTypeSetSideQuest": {
        "prefix": "SF2.Action.DialogTypeSetSideQuest",
        "body": [
            "DialogTypeSetSideQuest",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "Sets the dialog flag and character of an entity to ‘SideQuest’.",
            "\nSets the dialogue symbol of an NPC to the “SideQuest” type. This is the question mark.",
            "\nSwitching is also possible when the dialog is currently disabled."
        ]
    },
    "EffectStart": {
        "prefix": "SF2.Action.EffectStart",
        "body": [
            "EffectStart",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tFile = \"${2:file}\" -- An effect file from the redist/base/gfx/effects/ folder without the .XML extension.",
            "}"
        ],
        "description": [
            "Starts a visual effect.",
            "\nStarts an effect on an entity.",
            "The effect files are located in the folder:/redist/base/gfx/effects/ as XML files.",
            "\nAn effect file is specified as follows:",
            "File = “Effect_Building_Fire”",
            "\nThis loads the effect file “base/gfx/effects/Effect_Building_Fire.xml.”",
            "\nYou no longer need to specify the entire path to the effect file as you did before.",
            "The file name without the .XML extension is now sufficient."
        ]
    },
    "EffectStartAddon1": {
        "prefix": "SF2.Action.EffectStartAddon1",
        "body": [
            "EffectStartAddon1",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tFile = \"${2:file}\" -- An effect file from the redist/base/gfx/effects/ folder without the .XML extension.",
            "}"
        ],
        "description": "Starts a visual effect."
    },
    "EffectStartAtEntityPosition": {
        "prefix": "SF2.Action.EffectStartAtEntityPosition",
        "body": [
            "EffectStartAtEntityPosition",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tFile = \"${2:file}\" -- An effect file from the redist/base/gfx/effects/ folder without the .XML extension.",
            "}"
        ],
        "description": [
            "Starts a visual effect at the position of an entity.",
            "\nStarts an effect at the position of an entity. The effect is not attached to the entity,",
            "but is only placed where the entity is currently located. If the entity disappears or the character moves elsewhere,",
            "the effect does NOT move with it.",
            "\nImportant: looped effects cannot be played with this command!"
        ]
            
    },
    "EffectStartAtEntityPositionAddon1": {
        "prefix": "SF2.Action.EffectStartAtEntityPositionAddon1",
        "body": [
            "EffectStartAtEntityPositionAddon1",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tFile = \"${2:file}\" -- An effect file from the redist/base/gfx/effects/ folder without the .XML extension.",
            "}"
        ],
        "description": "Starts a visual effect at the position of an entity."
    },
    "EffectStop": {
        "prefix": "SF2.Action.EffectStop",
        "body": [
            "EffectStop",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "Stops a visual effect.",
            "\nStops all effects currently active on the target.",
            "\nYou can only stop effects that do not have a specified length (i.e., that last indefinitely or loop).",
            "If you want to shorten an effect that stops automatically after a certain amount of time,",
            "you must request a new effect that runs for a correspondingly shorter time."
        ]
    },
    "EntityFlagRandomize": {
        "prefix": "SF2.Action.EntityFlagRandomize",
        "body": [
            "EntityFlagRandomize",
            "{",
            "\tName = \"${1:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": "NEED TEST!\nMinValue, MaxValue not implemented? Sets the entity variable to a random value in the min-max range."
    },
    "EntityFlagSetFalse": {
        "prefix": "SF2.Action.EntityFlagSetFalse",
        "body": [
            "EntityFlagSetFalse",
            "{",
            "\tName = \"${1:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": "Sets the entity flag to false."
    },
    "EntityFlagSetTrue": {
        "prefix": "SF2.Action.EntityFlagSetTrue",
        "body": [
            "EntityFlagSetTrue",
            "{",
            "\tName = \"${1:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": "Sets the entity flag to true."
    },
    "EntityFlagToggle": {
        "prefix": "SF2.Action.EntityFlagToggle",
        "body": [
            "EntityFlagToggle",
            "{",
            "\tName = \"${1:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": "Negates the truth value of the entity flag."
    },
    "EntityTimerStart": {
        "prefix": "SF2.Action.EntityTimerStart",
        "body": [
            "EntityTimerStart",
            "{",
            "\tName = \"${1:timer}\" -- The name of the entity timer.",
            "}"
        ],
        "description": "Starts an entity timer."
    },
    "EntityTimerStop": {
        "prefix": "SF2.Action.EntityTimerStop",
        "body": [
            "EntityTimerStop",
            "{",
            "\tName = \"${1:timer}\" -- The name of the entity timer.",
            "}"
        ],
        "description": "Stops (deletes) an entity timer."
    },
    "EntityValueAdd": {
        "prefix": "SF2.Action.EntityValueAdd",
        "body": [
            "EntityValueAdd",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tValue = ${2:50} -- Value of a variable.",
            "}"
        ],
        "description": "Adds the value to the entity variable."
    },    
    "EntityValueAddVariable": {
        "prefix": "SF2.Action.EntityValueAddVariable",
        "body": [
            "EntityValueAddVariable",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tVariable = \"${2:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": [
            "Adds the variable to the entity variables.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name + Variable"
        ]
    },    
    "EntityValueDecrease": {
        "prefix": "SF2.Action.EntityValueDecrease",
        "body": [
            "EntityValueDecrease",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "}"
        ],
        "description": [
            "Decrements (reduces) the value by 1.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name - 1"
        ]
    },
    "EntityValueDivide": {
        "prefix": "SF2.Action.EntityValueDivide",
        "body": [
            "EntityValueDivide",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tValue = ${2:50} -- Value of a variable.",
            "}"
        ],
        "description": "Divides the value by the entity variable."
    },
    "EntityValueDivideVariable": {
        "prefix": "SF2.Action.EntityValueDivideVariable",
        "body": [
            "EntityValueDivideVariable",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tVariable = \"${2:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": [
            "Divides the variable by the entity variable.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name / Variable"
        ]
    },
    "EntityValueExchangeVariable": {
        "prefix": "SF2.Action.EntityValueExchangeVariable",
        "body": [
            "EntityValueExchangeVariable",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tVariable = \"${2:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": [
            "Replaces the variable with the entity variable.",
            "\nPerforms the following arithmetic operation:",
            "Temp = Name",
            "Name = Variable",
            "Variable = Temp",
            "\nIn other words: the values of the two variables are swapped.",
            "If Name was previously 5 and Variable was 20, then after execution, Name is 20 and Variable has the value 5."
        ]
    },
    "EntityValueIncrease": {
        "prefix": "SF2.Action.EntityValueIncrease",
        "body": [
            "EntityValueIncrease",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "}"
        ],
        "description": [
            "Increments (increases) the value by 1.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name + 1"
        ]
    },
    "EntityValueMultiply": {
        "prefix": "SF2.Action.EntityValueMultiply",
        "body": [
            "EntityValueMultiply",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tValue = ${2:50} -- Value of a variable.",
            "}"
        ],
        "description": "Multiplies the value by the entity variable."
    },
    "EntityValueMultiplyVariable": {
        "prefix": "SF2.Action.EntityValueMultiplyVariable",
        "body": [
            "EntityValueMultiplyVariable",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tVariable = \"${2:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": [
            "Multiplies the variable by the entity variable.",
            "\nPerforms the following calculation:",
            "Name = Name * Variable"
        ]
    },
    "EntityValueRandomize": {
        "prefix": "SF2.Action.EntityValueRandomize",
        "body": [
            "EntityValueRandomize",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tMinValue = ${2:50}, -- The smallest value that the random function should return.",
            "\tMaxValue = ${3:50} -- The largest value that the random function should return.",
            "}"
        ],
        "description": "Sets the entity variable to a random value in the min-max range."
    },
    "EntityValueSet": {
        "prefix": "SF2.Action.EntityValueSet",
        "body": [
            "EntityValueSet",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tValue = ${2:50} -- Value of a variable.",
            "}"
        ],
        "description": "Sets the entity variable to a specific value."
    },
    "EntityValueSetVariable": {
        "prefix": "SF2.Action.EntityValueSetVariable",
        "body": [
            "EntityValueSetVariable",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tVariable = \"${2:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": [
            "Assigns the value of the entity variable to the variable.",
            "\nPerforms the following arithmetic operation:",
            "Name = Variable"
        ]
    },
    "EntityValueSubtract": {
        "prefix": "SF2.Action.EntityValueSubtract",
        "body": [
            "EntityValueSubtract",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tValue = ${2:50} -- Value of a variable.",
            "}"
        ],
        "description": "Subtracts the value from the entity variable."
    },
    "EntityValueSubtractVariable": {
        "prefix": "SF2.Action.EntityValueSubtractVariable",
        "body": [
            "EntityValueSubtractVariable",
            "{",
            "\tName = \"${1:var}\", -- The name of the entity variable.",
            "\tVariable = \"${2:var}\" -- The name of the entity variable.",
            "}"
        ],
        "description": [
            "Subtracts the variable from the entity variable.",
            "\nPerforms the following arithmetic operation:",
            "Name = Name - Variable"
        ]
    },
    "EventReEnable": {
        "prefix": "SF2.Action.EventReEnable",
        "body": [
            "EventReEnable",
            "{",
            "\tName = \"${1:var}\" -- The name of the map variable.",
            "}"
        ],
        "description": [
            "Allows an OnRepeatEvent to be executed again.",
            "\nThis re-enables OnOneTimeRepeatEvents.",
            "Has no effect if the event hasn't been executed yet.",
            "The name parameter corresponds to the name parameter of the RepeatEvent.",
            "\nThe command has no effect if there is no RepeatEvent with this name."
        ]
    },
    "FigureAbilityAdd": {
        "prefix": "SF2.Action.FigureAbilityAdd",
        "body": [
            "FigureAbilityAdd",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tAbilityId = ${2:50} -- The Ability ID from the Database.",
            "}"
        ],
        "description": "Gives the character the specified ability."
    },
    "FigureAbilityRemove": {
        "prefix": "SF2.Action.FigureAbilityRemove",
        "body": [
            "FigureAbilityRemove",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tAbilityId = ${2:50} -- The Ability ID from the Database.",
            "}"
        ],
        "description": "Removes the specified ability from the character."
    },
    "FigureAnimPlayLooped": {
        "prefix": "SF2.Action.FigureAnimPlayLooped",
        "body": [
            "FigureAnimPlayLooped",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tFile = \"${2:file}\" -- A file including the path relative to the ‘redist’ folder.",
            "}"
        ],
        "description": [
            "Plays the animation in a loop.",
            "\nMakes the character play a specific animation repeatedly.",
            "You have to specify an SKA file for a character. For details... ask.",
            "They can also explain that if a character dies during animation playback,",
            "they will be dead after the animation ends,",
            "but the idle standing animation will play until the character rots away."
        ]
    },    
    "FigureAnimPlayOnce": {
        "prefix": "SF2.Action.FigureAnimPlayOnce",
        "body": [
            "FigureAnimPlayOnce",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tFile = \"${2:file}\" -- A file including the path relative to the ‘redist’ folder.",
            "}"
        ],
        "description": [
            "Plays the animation once.",
            "\nMakes the character play a specific animation.",
            "You have to specify an SKA file for a character. For details... ask.",
            "They can also explain that if a character dies during animation playback,",
            "they will be dead after the animation ends,",
            "but the idle standing animation will play until the character rots away."
        ]
    },
    "FigureAttackEntity": {
        "prefix": "SF2.Action.FigureAttackEntity",
        "body": [
            "FigureAttackEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": [
            "Gives the character a target to attack. Character defends itself against attacks from other characters.",
            "\nThe character should attack the entity. The target should be another character or a building.",
            "\nIf another character or building attracts more hate than the target,",
            "the character will first attack the targets on which it has built up more hate.",
            "If the character survives all intermediate attacks, it should ultimately attack the actual target again."
        ]
    },
    "FigureCastSpell": {
        "prefix": "SF2.Action.FigureCastSpell",
        "body": [
            "FigureCastSpell",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tSpell = ${2:50}, -- The Spell ID from the Database.",
            "\tPower = ${3:50}, -- The strength of the spell.",
            "\tX = ${4:50}, -- The X coordinate in world coordinates.",
            "\tY = ${5:50} -- The Y coordinate in world coordinates.",
            "}"
        ],
        "description": "Cast a spell from an entity to a coordinate."
    },
    "FigureCastSpellToEntity": {
        "prefix": "SF2.Action.FigureCastSpellToEntity",
        "body": [
            "FigureCastSpellToEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tSpell = ${2:50}, -- The Spell ID from the Database.",
            "\tPower = ${3:50}, -- The strength of the spell.",
            "\tTargetTag = \"${4:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": "Casting a spell from one entity to another entity."
    },
    "FigureCorpseRotForbid": {
        "prefix": "SF2.Action.FigureCorpseRotForbid",
        "body": [
            "FigureCorpseRotForbid",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Certainly, a character must not disappear after death."
    },
    "FigureCutsceneTalkJobSet": {
        "prefix": "SF2.Action.FigureCutsceneTalkJobSet",
        "body": [
            "FigureCutsceneTalkJobSet",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Gives the character the TalkJob in a cutscene."
    },
    "FigureDirectionSet": {
        "prefix": "SF2.Action.FigureDirectionSet",
        "body": [
            "FigureDirectionSet",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tDirection = ${2:50} -- A direction in degrees (0-360°). 0° is south, 90° is east.",
            "}"
        ],
        "description": [
            "Makes the character look in the specified direction.",
            "\nMakes a character look in a specific direction.",
            "A direction of 0 makes the figure face south, 90 faces east, 180 faces north, and 270 faces west."
        ]
    },
    "FigureDirectionSetToEntity": {
        "prefix": "SF2.Action.FigureDirectionSetToEntity",
        "body": [
            "FigureDirectionSetToEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": [
            "Makes the character look toward the other ScriptTag Entity.",
            "\nMakes a character look toward the target."
        ]
    },    
    "FigureFollowEntity": {
        "prefix": "SF2.Action.FigureFollowEntity",
        "body": [
            "FigureFollowEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": "One character should follow another."
    },    
    "FigureForceAttackEntity": {
        "prefix": "SF2.Action.FigureForceAttackEntity",
        "body": [
            "FigureForceAttackEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": [
            "Gives the character a target to attack. The character ignores attacks from other characters.",
            "\nThe character should attack the entity. The target should be another character or a building.",
            "The character will ignore all attacks and focus solely on killing the target.",
            "Only when the target is destroyed will the character attack other enemies again."
        ]
    },
    "FigureForcedRun": {
        "prefix": "SF2.Action.FigureForcedRun",
        "body": [
            "FigureForcedRun",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tX = ${2:50}, -- The X coordinate in world coordinates.",
            "\tY = ${3:50} -- The Y coordinate in world coordinates.",
            "}"
        ],
        "description": [
            "Makes a character run purposefully and without distraction to a specific point.",
            "\nMakes a character run to the coordinates in “force” mode.",
            "This means that the character will ignore all opponents along the way and will not be distracted."
        ]
    },
    "FigureForcedRunToEntity": {
        "prefix": "SF2.Action.FigureForcedRunToEntity",
        "body": [
            "FigureForcedRunToEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": [
            "Makes a character run purposefully and without distraction to the current position of an entity.",
            "\nMore specifically, when the character starts running, it will check the coordinates of the target entity and run there.",
            "If the target is a character and is moving, it will not follow the target, but will continue to run to the original coordinates."
        ]
    },
    "FigureForcedSimpleRun": {
        "prefix": "SF2.Action.FigureForcedSimpleRun",
        "body": [
            "FigureForcedSimpleRun",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tX = ${2:50}, -- The X coordinate in world coordinates.",
            "\tY = ${3:50} -- The Y coordinate in world coordinates.",
            "}"
        ],
        "description": [
            "Makes a character run purposefully and without distraction to a specific point.",
            "\nSee the Figure*Run/Walk command of the same name.",
            "\nThe only difference concerns pathfinding. SimpleWalk/SimpleRun means that the character chooses a greatly simplified path.",
            "It will simply choose the direct route (as the crow flies) to the destination and run straight ahead in that direction",
            "until it either arrives or is stopped by a blocked field.",
            "\nIn addition, she will simply run through characters that are in her way instead of swiping them away.",
            "\nThat's why the command is restricted to controlled environments such as cutscenes!",
            "Anyone who thinks they have a valid reason to use this command outside of a cutscene should know exactly what they are doing!"
        ]
    },
    "FigureForcedSimpleRunToEntity": {
        "prefix": "SF2.Action.FigureForcedSimpleRunToEntity",
        "body": [
            "FigureForcedSimpleRunToEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": [
            "Makes a character run purposefully and without distraction to the current position of an entity.",
            "\nSee the Figure*Run/Walk command of the same name.",
            "\nThe only difference concerns pathfinding. SimpleWalk/SimpleRun means that the character chooses a greatly simplified path.",
            "It will simply choose the direct route (as the crow flies) to the destination and run straight ahead in that direction",
            "until it either arrives or is stopped by a blocked field.",
            "\nIn addition, she will simply run through characters that are in her way instead of swiping them away.",
            "\nThat's why the command is restricted to controlled environments such as cutscenes!",
            "Anyone who thinks they have a valid reason to use this command outside of a cutscene should know exactly what they are doing!"
        ]
    },    
    "FigureForcedSimpleWalkToEntity": {
        "prefix": "SF2.Action.FigureForcedSimpleWalkToEntity",
        "body": [
            "FigureForcedSimpleWalkToEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": [
            "Makes a character walk purposefully and without distraction to the current position of an entity.",
            "\nSee the Figure*Run/Walk command of the same name.",
            "\nThe only difference concerns pathfinding. SimpleWalk/SimpleRun means that the character chooses a greatly simplified path.",
            "It will simply choose the direct route (as the crow flies) to the destination and run straight ahead in that direction",
            "until it either arrives or is stopped by a blocked field.",
            "\nIn addition, she will simply run through characters that are in her way instead of swiping them away.",
            "\nThat's why the command is restricted to controlled environments such as cutscenes!",
            "Anyone who thinks they have a valid reason to use this command outside of a cutscene should know exactly what they are doing!"
        ]
    },
    "FigureForcedSimpleWalk": {
        "prefix": "SF2.Action.FigureForcedSimpleWalk",
        "body": [
            "FigureForcedSimpleWalk",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tX = ${2:50}, -- The X coordinate in world coordinates.",
            "\tY = ${3:50} -- The Y coordinate in world coordinates.",
            "}"
        ],
        "description": [
            "Makes a character walk purposefully and without distraction to a specific point.",
            "\nSee the Figure*Run/Walk command of the same name.",
            "\nThe only difference concerns pathfinding. SimpleWalk/SimpleRun means that the character chooses a greatly simplified path.",
            "It will simply choose the direct route (as the crow flies) to the destination and run straight ahead in that direction",
            "until it either arrives or is stopped by a blocked field.",
            "\nIn addition, she will simply run through characters that are in her way instead of swiping them away.",
            "\nThat's why the command is restricted to controlled environments such as cutscenes!",
            "Anyone who thinks they have a valid reason to use this command outside of a cutscene should know exactly what they are doing!"
        ]
    },    
    "FigureForcedWalk": {
        "prefix": "SF2.Action.FigureForcedWalk",
        "body": [
            "FigureForcedWalk",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tX = ${2:50}, -- The X coordinate in world coordinates.",
            "\tY = ${3:50} -- The Y coordinate in world coordinates.",
            "}"
        ],
        "description": [
            "Makes a character walk purposefully and without distraction to a specific point.",
            "\nMakes a character move to the coordinates in “force” mode.",
            "This means that the character will ignore all opponents along the way and will not be distracted."
        ]
    },
    "FigureForcedWalkToEntity": {
        "prefix": "SF2.Action.FigureForcedWalkToEntity",
        "body": [
            "FigureForcedWalkToEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": [
            "Makes a character walk purposefully and without distraction to the current position of an entity.",
            "\nMore specifically, when the character starts moving, it will check the coordinates of the target entity and move there.",
            "If the target is a character and is moving, it will not follow the target, but will continue to move to the original coordinates."
        ]
    },
    "FigureHateClear": {
        "prefix": "SF2.Action.FigureHateClear",
        "body": [
            "FigureHateClear",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": "Removes all hate from the character, causing them to stop a fight/pursuit."
    },
    "FigureHealthAdd": {
        "prefix": "SF2.Action.FigureHealthAdd",
        "body": [
            "FigureHealthAdd",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Adds to Figure Health percent of max health points.",
            "\nAdds a certain percentage of the character's maximum hit points to the current value of the hit points.",
            "If you transfer 100 percent, you can be sure that the character will have maximum health points afterwards."
        ]
    },
    "FigureHealthSet": {
        "prefix": "SF2.Action.FigureHealthSet",
        "body": [
            "FigureHealthSet",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Sets Figure Health to percent of maximum health points.",
            "\nSets a character's hit points to a certain percentage of their maximum hit points.",
            "If you transfer 100 percent, you can be sure that the character will have maximum health points afterwards."
        ]
    },
    "FigureHealthSubtract": {
        "prefix": "SF2.Action.FigureHealthSubtract",
        "body": [
            "FigureHealthSubtract",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Subtracted from Figure Health percent of max health points.",
            "\nSubtracts a certain percentage of the character's maximum hit points from the current hit point value.",
            "If you pass 100 Percent, it is guaranteed that the character will only have 0 health points left. They are then on the edge of death.",
            "If you want to kill the character, you should use the FigureKill command instead."
        ]
    },
    "FigureHeroSpawn": {
        "prefix": "SF2.Action.FigureHeroSpawn",
        "body": [
            "FigureHeroSpawn",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tTag = \"${2:scriptTag}\", -- A script tag.",
            "\tX = ${3:50}, -- The X coordinate in world coordinates.",
            "\tY = ${4:50}, -- The Y coordinate in world coordinates.",
            "\tDirection = ${5:50} -- A direction in degrees (0-360°). 0° is south, 90° is east.",
            "}"
        ],
        "description": "Spawns the hero with the specified HeroTag at the location."
    },
    "FigureHeroSpawnToEntity": {
        "prefix": "SF2.Action.FigureHeroSpawnToEntity",
        "body": [
            "FigureHeroSpawnToEntity",
            "{",
            "\tPlayer = \"${1:playerName}\", -- The player name as set in Teamsetup.",
            "\tTag = \"${2:scriptTag}\", -- A script tag.",
            "\tTargetTag = \"${3:targetTag}\", -- The script tag of the target.",
            "\tDirection = ${4:50} -- A direction in degrees (0-360°). 0° is south, 90° is east.",
            "}"
        ],
        "description": "Spawns the hero with the specified HeroTag at the entity."
    },
    "FigureHoldPosition": {
        "prefix": "SF2.Action.FigureHoldPosition",
        "body": [
            "FigureHoldPosition",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "The character should maintain its current position even when attacked.",
            "\nCauses a character to hold their position and not run towards opponents.",
            "\nThis is useful for ranged fighters who you want to position tactically using scripts",
            "so that they cannot be lured away from their position.",
            "Conversely, the command makes little sense for melee fighters,",
            "because they would then be defenseless against ranged fighters and could be slaughtered."
        ]
    },
    "FigureKill": {
        "prefix": "SF2.Action.FigureKill",
        "body": [
            "FigureKill",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "Kills the character instantly.",
            "\nKills a character. The character will fall down dead, play the death animation,",
            "and remain lying there as a corpse until it rots away. If the character has loot, the player can loot it."
        ]
    },
    "FigureLevelSet": {
        "prefix": "SF2.Action.FigureLevelSet",
        "body": [
            "FigureLevelSet",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tLevel = ${2:50} -- The level of a character",
            "}"
        ],
        "description": "Changes the level of a character. Do NOT use for avatars/heroes!"
    },
    "FigureLookAtDirection": {
        "prefix": "SF2.Action.FigureLookAtDirection",
        "body": [
            "FigureLookAtDirection",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tDirection = ${2:50} -- A direction in degrees (0-360°). 0° is south, 90° is east.",
            "}"
        ],
        "description": [
            "Makes the character look in the specified direction.",
            "\nMakes a character look in a specific direction.",
            "Please note that, unlike Spellforce 1, the 0° alignment causes the character to face south."
        ]
    },
    "FigureLookAtEntity": {
        "prefix": "SF2.Action.FigureLookAtEntity",
        "body": [
            "FigureLookAtEntity",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tTargetTag = \"${2:targetTag}\" -- The script tag of the target.",
            "}"
        ],
        "description": [
            "Makes the character look toward the other ScriptTag Entity.",
            "\nMakes a character look in the direction of the specified entity."
        ]
    },
    "FigureLootItemEquipmentAdd": {
        "prefix": "SF2.Action.FigureLootItemEquipmentAdd",
        "body": [
            "FigureLootItemEquipmentAdd",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tDropChance = ${2:50}, -- The probability in percent that this item will drop (default: 100%).",
            "\tItemId = ${3:50} -- The Item ID from the Database.",
            "}"
        ],
        "description": [
            "Gives the unit a miscellaneous item as loot.",
            "\nATTENTION: the loot remains until the unit dies! If the unit respawns,",
            "it has no longer loot with it, it would have to be re-added it if necessary!"
        ]
    },
    "FigureLootItemEquipmentRemove": {
        "prefix": "SF2.Action.FigureLootItemEquipmentRemove",
        "body": [
            "FigureLootItemEquipmentRemove",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tItemId = ${2:50} -- The Item ID from the Database.",
            "}"
        ],
        "description": "Removes an equipment item from the loot of the unit."
    },
    "FigureLootItemGenericAdd": {
        "prefix": "SF2.Action.FigureLootItemGenericAdd",
        "body": [
            "FigureLootItemGenericAdd",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tDropChance = ${2:50}, -- The probability in percent that this item will drop (default: 100%).",
            "\tLevel = ${3:50}, -- The level of a unit, item, or spell.",
            "\tSkill = ${4:50} -- The Skill ID from the Database.",
            "}"
        ],
        "description": [
            "Gives the unit a generic Item as loot.",
            "\nATTENTION: the loot remains until the unit dies! If the unit respawns,",
            "it has no longer loot with it, it would have to be re-added it if necessary!"
        ]
    },
    "FigureLootItemGenericRemove": {
        "prefix": "SF2.Action.FigureLootItemGenericRemove",
        "body": [
            "FigureLootItemGenericRemove",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "}"
        ],
        "description": "Removes a generic item from the loot of the unit."
    },
    "FigureLootItemMiscAdd": {
        "prefix": "SF2.Action.FigureLootItemMiscAdd",
        "body": [
            "FigureLootItemMiscAdd",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tDropChance = ${2:50}, -- The probability in percent that this item will drop (default: 100%).",
            "\tItemId = ${3:50} -- The Item ID from the Database.",
            "}"
        ],
        "description": [
            "Gives the unit a miscellaneous item as loot.",
            "\nATTENTION: the loot remains until the unit dies! If the unit respawns,",
            "it has no longer loot with it, it would have to be re-added it if necessary!"
        ]
    },
    "FigureLootItemMiscRemove": {
        "prefix": "SF2.Action.FigureLootItemMiscRemove",
        "body": [
            "FigureLootItemMiscRemove",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag.",
            "\tItemId = ${2:50} -- The Item ID from the Database.",
            "}"
        ],
        "description": "Removes a misc. Item from the loot of the unit."
    },
    "FigureLootRemoveAll": {
        "prefix": "SF2.Action.FigureLootRemoveAll",
        "body": [
            "FigureLootRemoveAll",
            "{",
            "\tTag = \"${1:scriptTag}\" -- A script tag",
            "}"
        ],
        "description": [
            "Removes all loot from the unit.",
            "\nRemoves the entire loot, no matter what's inside."
        ]
    },
    "FigureManaAdd": {
        "prefix": "SF2.Action.FigureManaAdd",
        "body": [
            "FigureManaAdd",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Adds to the unit mana x percent of max. Mana Points.",
            "\nAdds a certain percentage of maximum mana of the unit to the current mana value.",
            "Each time you pass 100 Percent, ensures that the unit has maximum mana."
        ]
    },
    "FigureManaSet": {
        "prefix": "SF2.Action.FigureManaSet",
        "body": [
            "FigureManaSet",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Sets the unit mana to x percent of max. Mana Points.",
            "\nSets the mana of a unit to a specified percentage of the maximum mana value.",
            "Each time you pass 100 Percent, ensures that the unit has maximum mana."
        ]
    },
    "FigureManaSubtract": {
        "prefix": "SF2.Action.FigureManaSubtract",
        "body": [
            "FigureManaSubtract",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tPercent = ${2:50} -- A percentage (value between 0 and 100).",
            "}"
        ],
        "description": [
            "Subtracts from the unit mana x percent of max. Mana Points.",
            "\nSubtracts a specified percentage of maximum mana of the unit from the current mana value.",
            "Each time you pass 100 Percent, it is ensured that the unit no longer has mana."
        ]
    },
    "FigureNpcSpawn": {
        "prefix": "SF2.Action.FigureNpcSpawn",
        "body": [
            "FigureNpcSpawn",
            "{",
            "\tTag = \"${1:scriptTag}\", -- A script tag",
            "\tLevel = ${2:50}, -- The level of a unit, item, or spell.",
            "\tUnitId = ${3:50}, -- The Unit ID from the Database.",
            "\tX = ${4:50}, -- The X coordinate in world coordinates.",
            "\tY = ${5:50}, -- The Y coordinate in world coordinates.",
            "\tTeam = \"${6:teamName}\" -- The team name from the editor.",
            "}"
        ],
        "description": [
            "Spawns a new NPC character at a specific point.",
            "\nSpawned an NPC character with a specific UnitId and level to a team and at the specified coordinates.",
            "The character then has the ScriptTag specified with Tag and can be queried or controlled accordingly via this Tag."
        ]
    },
	"FigureNpcSpawnLRTA": {
		"prefix": "SF2.Action.FigureNpcSpawnLRTA",
		"body": [
			"FigureNpcSpawnLRTA",
			"{",
			"\tTag = \"${1:Tag}\",             -- A script tag.",
			"\tPlayer = \"${2:Player}\",       -- The player name as set up in the team setup.",
			"\tLevel = ${3:50},                -- The level of a unit, an item or a spell.",
			"\tUnitId = ${4:50},               -- The unit ID as from the database.",
			"\tX = ${5:50},                    -- The X coordinate in world coordinates.",
			"\tY = ${6:50},                    -- The Y coordinate in world coordinates.",
			"\tTeam = \"${7:Team}\"            -- The team name from the editor.",
			"}"
		],
		"description": [
			"Spawns a new NPC figure at a specific point",
			"(level relative to avatar level)."
		]
	},
	"FigureNpcSpawnLRTAToEntity": {
		"prefix": "SF2.Action.FigureNpcSpawnLRTAToEntity",
		"body": [
			"FigureNpcSpawnLRTAToEntity",
			"{",
			"\tTag = \"${1:Tag}\",             -- A script tag.",
			"\tPlayer = \"${2:Player}\",       -- The player name as set up in the team setup.",
			"\tLevel = ${3:50},                -- The level of a unit, an item or a spell.",
			"\tUnitId = ${4:50},               -- The unit ID as from the database.",
			"\tTargetTag = \"${5:TargetTag}\", -- The script tag of the target.",
			"\tTeam = \"${6:Team}\"            -- The team name from the editor.",
			"}"
		],
		"description": [
			"Spawns a new figure at a specific point",
			"(level relative to avatar level)."
		]
	},
	"FigureNpcSpawnToEntity": {
		"prefix": "SF2.Action.FigureNpcSpawnToEntity",
		"body": [
			"FigureNpcSpawnToEntity",
			"{",
			"\tTag = \"${1:Tag}\",             -- A script tag.",
			"\tLevel = ${2:50},                -- The level of a unit, an item or a spell.",
			"\tUnitId = ${3:50},               -- The unit ID as from the database.",
			"\tTargetTag = \"${4:TargetTag}\", -- The script tag of the target.",
			"\tTeam = \"${5:Team}\"            -- The team name from the editor.",
			"}"
		],
		"description": [
			"Spawns a new figure at a specific point.",
			"",
			"Spawns an NPC figure with a specific UnitId and level into a team at the given target entity.",
			"",
			"The figure then has the ScriptTag specified by Tag,",
			"and can be queried or controlled via this tag."
		]
	},
	"FigureOutcry": {
		"prefix": "SF2.Action.FigureOutcry",
		"body": [
			"FigureOutcry",
			"{",
			"\tTextTag = \"${1:TextTag}\",  -- Text tag for the localization.",
			"\tTag = \"${2:Tag}\"           -- A script tag.",
			"}"
		],
		"description": [
			"Creates an outcry with voice output and on-screen text.",
			"",
			"Makes a figure perform an outcry. This outcry will be shown as text in the game,",
			"and if available, the matching voice sample will be played.",
			"",
			"The texts for this command are stored in the following file (parallel to the 'script' folder):",
			"\\<mapname>\\dialog\\OutcryText.lua",
			"",
			"The format of this script is as follows:",
			"return",
			"{",
			"\ttexttag1 = { Text = \"Reinforcements are coming!\" },",
			"\ttexttag2 = { Text = \"Very good!\", Color = {255, 0, 0} },",
			"}",
			"",
			"The 'texttag1' is a TextTag that must be specified in the parameter with the same name.",
			"Make sure each TextTag is unique, otherwise the last one will overwrite a previous one.",
			"",
			"The values in Color represent the Red, Green, and Blue components.",
			"Color is optional and should be omitted if white text color is desired."
		]
	},
	"FigureOutcryAlert": {
		"prefix": "SF2.Action.FigureOutcryAlert",
		"body": [
			"FigureOutcryAlert",
			"{",
			"\tTextTag = \"${1:TextTag}\",    -- Text tag for the localization.",
			"\tTag = \"${2:Tag}\",            -- A script tag.",
			"\tTargetTag = \"${3:TargetTag}\" -- The script tag of the target, default = script's tag.",
			"}"
		],
		"description": [
			"Creates an outcry with voice output and on-screen text."
		]
	},
	"FigureOutcryImmediate": {
		"prefix": "SF2.Action.FigureOutcryImmediate",
		"body": [
			"FigureOutcryImmediate",
			"{",
			"\tTextTag = \"${1:TextTag}\",  -- Text tag for the localization.",
			"\tTag = \"${2:Tag}\"           -- A script tag.",
			"}"
		],
		"description": [
			"Creates an outcry with voice output and on-screen text.",
			"The text is displayed immediately."
		]
	},
	"FigurePathGoto": {
		"prefix": "SF2.Action.FigurePathGoto",
		"body": [
			"FigurePathGoto",
			"{",
			"\tGoto = ${1:{}},    -- Here, any figure 'goto' action must be specified.",
			"\tPoints = ${2:{}},  -- Path points specified as strings in the format: \"X, Y\".",
			"\tTags = ${3:{}}     -- Path points specified as script tag strings: \"MyExampleTag\".",
			"}"
		],
		"description": [
			"Makes a figure move to a point via the specified waypoints.",
			"",
			"A path point system (from code) can be used to move figures over multiple points to a target.",
			"The integration is done via the PathGoto action.",
			"",
			"The 'Goto' parameter must be set to any Walk/Run function, which is then also the first path point.",
			"All additional 'Points' are defined as strings in the format \"X, Y\".",
			"",
			"Example using coordinates:",
			"FigurePathGoto",
			"{",
			"\tGoto = FigurePatrolWalk {Tag = \"pl_HumanHeroLya\", X = 35, Y = 300},",
			"\tPoints =",
			"\t{",
			"\t\t\"40, 300\",",
			"\t\t\"50, 295\",",
			"\t\t\"25, 310\",",
			"\t\t\"30, 305\",",
			"\t\t\"35, 295\",",
			"\t\t\"45, 315\",",
			"\t},",
			"}",
			"",
			"OR (alternatively) with script tags:",
			"FigurePathGoto",
			"{",
			"\tGoto = FigurePatrolWalkToEntity {Tag = \"pl_HumanHeroLya\", TargetTag = \"Pathpoint01\"},",
			"\tTags =",
			"\t{",
			"\t\t\"pl_HumanAvatar\",",
			"\t\t\"Lantern\",",
			"\t\t\"FencePost\",",
			"\t\t\"LastMeal\",",
			"\t\t\"PathEndPoint\",",
			"\t},",
			"}",
			"",
			"Note: only with FigurePatrolWalk will the figure endlessly patrol back and forth (loop).",
			"With all other Walk/Run commands, the figure moves only to the endpoint and stays there."
		]
	},
	"FigurePatrolWalk": {
		"prefix": "SF2.Action.FigurePatrolWalk",
		"body": [
			"FigurePatrolWalk",
			"{",
			"\tTag = \"${1:Tag}\",  -- A script tag.",
			"\tX = ${2:50},        -- The X coordinate in world coordinates.",
			"\tY = ${3:50}         -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Makes a figure walk back and forth between points.",
			"",
			"This really only makes sense in combination with FigurePathGoto, for example:",
			"FigurePathGoto",
			"{",
			"\tGoto = FigurePatrolWalk{X = 50, Y = 80},",
			"\tPoints =",
			"\t{",
			"\t\t\"80, 25\",",
			"\t\t\"10, 10\",",
			"\t},",
			"}"
		]
	},
	"FigurePatrolWalkToEntity": {
		"prefix": "SF2.Action.FigurePatrolWalkToEntity",
		"body": [
			"FigurePatrolWalkToEntity",
			"{",
			"\tTag = \"${1:Tag}\",        -- A script tag.",
			"\tTargetTag = \"${2:TargetTag}\"  -- The script tag of the target.",
			"}"
		],
		"description": [
			"Makes a figure walk back and forth between points.",
			"",
			"This really only makes sense in combination with FigurePathGoto, for example:",
			"FigurePathGoto",
			"{",
			"\tGoto = FigurePatrolWalkToEntity {Tag = \"myname\", TargetTag = \"WP1\"},",
			"\tTags =",
			"\t{",
			"\t\t\"WP2\",",
			"\t\t\"WP3\",",
			"\t\t\"WP4\",",
			"\t\t\"WP5\",",
			"\t\t\"WP6\",",
			"\t\t\"WP7\",",
			"\t},",
			"}"
		]
	},
	"FigurePlayerTransfer": {
		"prefix": "SF2.Action.FigurePlayerTransfer",
		"body": [
			"FigurePlayerTransfer",
			"{",
			"\tTag = \"${1:Tag}\",             -- A script tag.",
			"\tPlayer = \"${2:pl_Human}\"     -- The player name as set in the team setup.",
			"}"
		],
		"description": [
			"Transfers a figure to a player.",
			"",
			"Transfers the figure into the control of the player or removes control of the figure from the player.",
			"The command behaves like the earlier ChangeOwner command, but now figures can also be taken away from the player."
		]
	},
	"FigureRespawn": {
		"prefix": "SF2.Action.FigureRespawn",
		"body": [
			"FigureRespawn",
			"{",
			"\tTag = \"${1:Tag}\",    -- A script tag.",
			"\tX = ${2:50},          -- The X coordinate in world coordinates.",
			"\tY = ${3:50}           -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Respawns a dead NPC figure at a specific point."
		]
	},
	"FigureRespawnToEntity": {
		"prefix": "SF2.Action.FigureRespawnToEntity",
		"body": [
			"FigureRespawnToEntity",
			"{",
			"\tTag = \"${1:Tag}\",          -- A script tag.",
			"\tTargetTag = \"${2:TargetTag}\"  -- The script tag of the target.",
			"}"
		],
		"description": [
			"Respawns a dead NPC figure at a script tag entity."
		]
	},
	"FigureRoamingDisable": {
		"prefix": "SF2.Action.FigureRoamingDisable",
		"body": [
			"FigureRoamingDisable",
			"{",
			"\tTag = \"${1:Tag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Makes the figure stay at its point and not move."
		]
	},
	"FigureRoamingEnable": {
		"prefix": "SF2.Action.FigureRoamingEnable",
		"body": [
			"FigureRoamingEnable",
			"{",
			"\tTag = \"${1:Tag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Makes the figure occasionally take a few steps."
		]
	},
	"FigureRtsKitSpawn": {
		"prefix": "SF2.Action.FigureRtsKitSpawn",
		"body": [
			"FigureRtsKitSpawn",
			"{",
			"\tUnitId = ${1:50},         -- The UnitId as in the database.",
			"\tLevel = ${2:50},          -- Ignored, RTS units are always relative to avatar level!",
			"\tX = ${3:50},              -- The X coordinate in world coordinates.",
			"\tY = ${4:50},              -- The Y coordinate in world coordinates.",
			"\tPlayerKit = \"${5:PlayerKit}\"  -- Player kit from the editor.",
			"}"
		],
		"description": [
			"Spawns a new RTS figure for a player kit at a specific point.",
            "",
			"An RTS figure with the given UnitId and Level is spawned into an existing PlayerKit at the specified coordinates.",
            "",
			"The PlayerKit must exist at the time of execution, otherwise an assert occurs.",
			"Important: The PlayerKit must NOT be marked as 'active' in the editor. If marked active, it will already be assigned at game start.",
			"PlayerKits only exist until they are assigned — afterwards, they are considered non-existent."
		]
	},
	"FigureRtsKitSpawnToEntity": {
		"prefix": "SF2.Action.FigureRtsKitSpawnToEntity",
		"body": [
			"FigureRtsKitSpawnToEntity",
			"{",
			"\tLevel = ${1:50},          -- Ignored, RTS units are always relative to avatar level!",
			"\tTargetTag = \"${2:TargetTag}\",  -- The Script Tag of the target entity.",
			"\tUnitId = ${3:50},         -- The UnitId as in the database.",
			"\tPlayerKit = \"${4:PlayerKit}\"  -- Player kit from the editor.",
			"}"
		],
		"description": [
			"Spawns a new RTS figure for a player kit at a specific entity.",
            "",
			"An RTS figure with the given UnitId and Level is spawned into an existing PlayerKit at the specified entity.",
            "",
			"The PlayerKit must exist at the time of execution, otherwise an assert occurs.",
			"[!] The PlayerKit must NOT be marked as 'active' in the editor. If marked active, it will already be assigned at game start.",
			"PlayerKits only exist until they are assigned — afterwards, they are considered non-existent."
		]
	},
	"SF2.Action.FigureRtsPlayerSpawn": {
		"prefix": "SF2.Action.FigureRtsPlayerSpawn",
		"body": [
			"FigureRtsPlayerSpawn",
			"{",
			"\tUnitId = ${1:50},             -- The UnitId from the database.",
			"\tPlayer = \"${2:pl_Human}\",  -- The player name as defined in the team setup.",
			"\tX = ${3:50},                  -- The X coordinate in world coordinates.",
			"\tY = ${4:50},                  -- The Y coordinate in world coordinates.",
			"\tAmount = ${5:50}              -- Any number of units to spawn.",
			"}"
		],
		"description": [
			"Spawns a new RTS figure for a player at a specific point.",
			"",
			"Any number of RTS units can be spawned into a temporary PlayerKit, which is then assigned to the player.",
			"",
			"This makes newly spawned RTS units immediately controllable by the player.",
			"Previously, one had to create a PlayerKit in the editor, spawn the units into it, and then transfer the kit to the player.",
			"This was not only cumbersome, but also made permanent spawning impossible, since only a limited number of PlayerKits can be created."
		]
	},
	"SF2.Action.FigureRtsPlayerSpawnToEntity": {
		"prefix": "SF2.Action.FigureRtsPlayerSpawnToEntity",
		"body": [
			"FigureRtsPlayerSpawnToEntity",
			"{",
			"\tUnitId = ${1:50},             -- The UnitId from the database.",
			"\tPlayer = \"${2:pl_Human}\",  -- The player name as defined in the team setup.",
			"\tTargetTag = \"${3:Target}\", -- The ScriptTag of the target entity.",
			"\tAmount = ${4:50}             -- Any number of units to spawn.",
			"}"
		],
		"description": [
			"Spawns a new RTS figure for a player at a specific entity.",
			"",
			"Any number of RTS units can be spawned into a temporary PlayerKit, which is then assigned to the player.",
			"",
			"This makes newly spawned RTS units immediately controllable by the player.",
			"Previously, one had to create a PlayerKit in the editor, spawn the units into it, and then transfer the kit to the player.",
			"This was not only cumbersome, but also made permanent spawning impossible, since only a limited number of PlayerKits can be created."
		]
	},
	"SF2.Action.FigureRtsSpawn": {
		"prefix": "SF2.Action.FigureRtsSpawn",
		"body": [
			"FigureRtsSpawn",
			"{",
			"\tUnitId = ${1:50},             -- The UnitId from the database.",
			"\tLevel = ${2:0},              -- Ignored, RTS units are always relative to the avatar level.",
			"\tPlayer = \"${3:pl_Human}\",  -- The player name as defined in the team setup.",
			"\tX = ${4:100},                -- The X coordinate in world space.",
			"\tY = ${5:200}                 -- The Y coordinate in world space.",
			"}"
		],
		"description": [
			"Spawns a new RTS figure for a player at a specific point.",
			"",
			"An RTS figure with the given UnitId and Level is spawned for the specified player at the provided coordinates."
		]
	},
	"SF2.Action.FigureRtsSpawnToEntity": {
		"prefix": "SF2.Action.FigureRtsSpawnToEntity",
		"body": [
			"FigureRtsSpawnToEntity",
			"{",
			"\tUnitId = ${1:50},             -- The UnitId from the database.",
			"\tLevel = ${2:0},              -- Ignored, RTS units are always relative to the avatar level.",
			"\tPlayer = \"${3:pl_Human}\",  -- The player name as defined in the team setup.",
			"\tTargetTag = \"${4:Target}\"  -- The ScriptTag of the target entity.",
			"}"
		],
		"description": [
			"Spawns a new RTS figure for a player at a specific entity.",
			"",
			"An RTS figure with the given UnitId and Level is spawned for the specified player at the target entity."
		]
	},
	"SF2.Action.FigureRun": {
		"prefix": "SF2.Action.FigureRun",
		"body": [
			"FigureRun",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"\tX = ${2:100},           -- The X coordinate in world space.",
			"\tY = ${3:200}            -- The Y coordinate in world space.",
			"}"
		],
		"description": [
			"Makes a figure run to the specified coordinates.",
			"",
			"The figure will attack enemies it encounters on the way. After fighting or being otherwise distracted, it will continue running until it reaches the destination for the first time.",
			"",
			"This behavior corresponds to the old 'ContinuousGoto'.",
			"",
			"[!] If you want the figure to always return to the destination point repeatedly, use the IdleGoHome event (or eventually the appropriate action)."
		]
	},
	"SF2.Action.FigureRunToEntity": {
		"prefix": "SF2.Action.FigureRunToEntity",
		"body": [
			"FigureRunToEntity",
			"{",
			"\tTag = \"${1:MyFigure}\",       -- A ScriptTag.",
			"\tTargetTag = \"${2:Target}\"   -- The ScriptTag of the target entity.",
			"}"
		],
		"description": [
			"Makes a figure run to the current position of the target entity.",
			"",
			"The figure will not follow the entity dynamically, but instead run to the coordinates where the entity was located at the time of execution.",
			"",
			"On the way, the figure will attack enemies it encounters. After fighting or being otherwise distracted, it will continue running until it reaches the destination for the first time.",
			"",
			"This behavior corresponds to the old 'ContinuousGoto'.",
			"",
			"[!] If you want the figure to always pursue the target entity, use the Follow command instead."
		]
	},
	"SF2.Action.FigureSimpleRun": {
		"prefix": "SF2.Action.FigureSimpleRun",
		"body": [
			"FigureSimpleRun",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"\tX = ${2:50},             -- X coordinate in world space.",
			"\tY = ${3:50},             -- Y coordinate in world space.",
			"}"
		],
		"description": [
			"Makes a figure run to the given coordinates. Ensures that the figure arrives (continuous goto).",
			"",
			"Similar to the standard FigureRun/FigureWalk command, but with simplified pathfinding:",
			"- The figure chooses a straight-line path (direct air-line) to the target.",
			"- It continues forward until it either arrives or is blocked by terrain.",
			"- Other figures in the way are ignored — the runner passes through them without collision handling.",
			"",
			"[!] This command is intended only for controlled environments such as cutscenes.",
			"If used outside such contexts, behavior can be unrealistic or game-breaking.",
			"Use with caution and only if you fully understand the implications."
		]
	},
	"SF2.Action.FigureSimpleRunToEntity": {
		"prefix": "SF2.Action.FigureSimpleRunToEntity",
		"body": [
			"FigureSimpleRunToEntity",
			"{",
			"\tTag = \"${1:MyFigure}\",       -- A ScriptTag.",
			"\tTargetTag = \"${2:Target}\",  -- The ScriptTag of the target entity.",
			"}"
		],
		"description": [
			"Makes a figure run to the current position of the target entity. Ensures that the figure arrives (continuous goto).",
			"",
			"Similar to the standard FigureRunToEntity/FigureWalkToEntity command, but with simplified pathfinding:",
			"- The figure chooses a straight-line path (direct air-line) to the target position.",
			"- It continues forward until it either arrives or is blocked by terrain.",
			"- Other figures in the way are ignored — the runner passes through them without collision handling.",
			"",
			"[!] This command is intended only for controlled environments such as cutscenes.",
			"If used outside such contexts, behavior can be unrealistic or game-breaking.",
			"Use with caution and only if you fully understand the implications."
		]
	},
	"SF2.Action.FigureSimpleWalk": {
		"prefix": "SF2.Action.FigureSimpleWalk",
		"body": [
			"FigureSimpleWalk",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"\tX = ${2:100},            -- X coordinate in world space.",
			"\tY = ${3:200},            -- Y coordinate in world space.",
			"}"
		],
		"description": [
			"Makes a figure walk to the specified coordinates. Ensures that the figure arrives (continuous goto).",
			"",
			"Similar to the standard FigureRun/FigureWalk command, but with simplified pathfinding:",
			"- The figure chooses a straight-line path (direct air-line) to the target position.",
			"- It continues forward until it either arrives or is blocked by terrain.",
			"- Other figures in the way are ignored — the walker passes through them without collision handling.",
			"",
			"[!] This command is intended only for controlled environments such as cutscenes.",
			"If used outside such contexts, behavior can be unrealistic or game-breaking.",
			"Use with caution and only if you fully understand the implications."
		]
	},
	"SF2.Action.FigureSimpleWalkToEntity": {
		"prefix": "SF2.Action.FigureSimpleWalkToEntity",
		"body": [
			"FigureSimpleWalkToEntity",
			"{",
			"\tTag = \"${1:MyFigure}\",       -- A ScriptTag.",
			"\tTargetTag = \"${2:Target}\",  -- The ScriptTag of the target entity.",
			"}"
		],
		"description": [
			"Makes a figure walk to the current position of the specified target entity. Ensures that the figure arrives (continuous goto).",
			"",
			"Similar to the standard FigureRun/FigureWalk commands, but with simplified pathfinding:",
			"- The figure chooses a straight-line path (direct air-line) to the target position.",
			"- It continues forward until it either arrives or is blocked by terrain.",
			"- Other figures in the way are ignored — the walker passes through them without collision handling.",
			"",
			"[!] This command is intended only for controlled environments such as cutscenes.",
			"If used outside such contexts, behavior can be unrealistic or game-breaking.",
			"Use with caution and only if you fully understand the implications."
		]
	},
	"SF2.Action.FigureStop": {
		"prefix": "SF2.Action.FigureStop",
		"body": [
			"FigureStop",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"}"
		],
		"description": [
			"Stops a figure immediately and cancels any active jobs.",
			"",
			"The figure will cease all current actions, including:",
			"- Movement",
			"- Combat or enemy pursuit",
			"- Follow mode",
			"",
			"This ensures the figure remains idle until given a new command."
		]
	},
	"SF2.Action.FigureSwappingDisable": {
		"prefix": "SF2.Action.FigureSwappingDisable",
		"body": [
			"FigureSwappingDisable",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"}"
		],
		"description": [
			"Prevents the figure from swapping positions with other figures.",
			"",
			"Normally, figures may swap places to avoid blocking each other.",
			"With this action enabled, the specified figure will no longer swap."
		]
	},
	"SF2.Action.FigureSwappingEnable": {
		"prefix": "SF2.Action.FigureSwappingEnable",
		"body": [
			"FigureSwappingEnable",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"}"
		],
		"description": [
			"Allows the figure to swap positions with other figures.",
			"",
			"Normally, figures may swap places to avoid blocking each other.",
			"With this action enabled, the specified figure can swap again."
		]
	},
	"SF2.Action.FigureTeamTransfer": {
		"prefix": "SF2.Action.FigureTeamTransfer",
		"body": [
			"FigureTeamTransfer",
			"{",
			"\tTag = \"${1:MyFigure}\",   -- A ScriptTag.",
			"\tTeam = \"${2:MyTeam}\",   -- The team name as defined in the editor.",
			"}"
		],
		"description": [
			"Transfers a figure to a specified team.",
			"",
			"The figure is reassigned to another team, which changes its behavior regarding allies and enemies.",
			"",
			"This action behaves like the earlier ChangeFaction command."
		]
	},
	"SF2.Action.FigureTeleport": {
		"prefix": "SF2.Action.FigureTeleport",
		"body": [
			"FigureTeleport",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"\tX = ${2:100},            -- The X coordinate in world space.",
			"\tY = ${3:200},            -- The Y coordinate in world space.",
			"}"
		],
		"description": [
			"Instantly moves a figure to the specified point.",
			"",
			"The figure is teleported immediately to the given world coordinates."
		]
	},
	"SF2.Action.FigureTeleportToEntity": {
		"prefix": "SF2.Action.FigureTeleportToEntity",
		"body": [
			"FigureTeleportToEntity",
			"{",
			"\tTag = \"${1:MyFigure}\",      -- A ScriptTag.",
			"\tTargetTag = \"${2:Target}\", -- The ScriptTag of the target entity.",
			"}"
		],
		"description": [
			"Instantly moves a figure to the position of a target entity.",
			"",
			"The figure is teleported immediately to the current position of the target entity.",
			"",
			"Works even under heavy interference and atmospheric storms.",
			"Teleported figures do not automatically trigger an outcry like 'Beam me up, Scotty!'"
		]
	},
	"SF2.Action.FigureUnitChange": {
		"prefix": "SF2.Action.FigureUnitChange",
		"body": [
			"FigureUnitChange",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"\tUnitId = ${2:1234},      -- The UnitId from the database.",
			"\tLevel = ${3:1},          -- The level of the unit, item, or spell.",
			"}"
		],
		"description": [
			"Changes the UnitId of a figure.",
			"",
			"The figure is assigned a new unit, giving it a different appearance and new stats.",
			"",
			"[!] IMPORTANT: If the figure has a dialog, it will lose any currently displayed dialog icon.",
			"You must reassign the dialog icon and re-enable the dialog if the figure should remain interactive.",
			"",
			"Additionally, the figure will interrupt all current actions when changed.",
			"This includes aborting any ongoing movement (Goto) or combat."
		]
	},
	"SF2.Action.FigureVanish": {
		"prefix": "SF2.Action.FigureVanish",
		"body": [
			"FigureVanish",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"}"
		],
		"description": [
			"Makes the figure vanish, treating it as 'dead'.",
			"",
			"The figure disappears instantly without playing a death animation or leaving behind a corpse.",
			"If the figure had loot, it will not be obtainable by the player.",
			"",
			"This is essentially a silent removal of the figure from the map."
		]
	},
	"SF2.Action.FigureWalk": {
		"prefix": "SF2.Action.FigureWalk",
		"body": [
			"FigureWalk",
			"{",
			"\tTag = \"${1:MyFigure}\",  -- A ScriptTag.",
			"\tX = ${2:100},            -- X coordinate in world space.",
			"\tY = ${3:200},            -- Y coordinate in world space.",
			"}"
		],
		"description": [
			"Makes the figure walk to the specified coordinates.",
			"",
			"If the figure encounters enemies on the way, it will attack them.",
			"After fighting or being distracted, it will continue walking until it reaches the target for the first time.",
			"This matches the old ContinuousGoto behavior.",
			"",
			"[!] If the figure should repeatedly attempt to reach the destination, use the IdleGoHome event (or the appropriate future action)."
		]
	},
	"SF2.Action.FigureWalkToEntity": {
		"prefix": "SF2.Action.FigureWalkToEntity",
		"body": [
			"FigureWalkToEntity",
			"{",
			"\tTag = \"${1:MyFigure}\",       -- A ScriptTag.",
			"\tTargetTag = \"${2:Target}\",  -- The ScriptTag of the target entity.",
			"}"
		],
		"description": [
			"Makes the figure walk to the position of the specified target entity.",
			"",
			"The figure will not follow the entity, but instead walk to the coordinates where the target entity was located when the command was executed.",
			"",
			"If the figure encounters enemies on the way, it will attack them.",
			"After fighting or being distracted, it will continue walking until it reaches the target position for the first time.",
			"This matches the old ContinuousGoto behavior.",
			"",
			"[!] If the figure should repeatedly attempt to reach the target entity, use the Follow command instead."
		]
	},
	"SF2.Action.FogOfWarCloak": {
		"prefix": "SF2.Action.FogOfWarCloak",
		"body": [
			"FogOfWarCloak",
			"{",
			"\tFogOfWarId = ${1:0},  -- The ID of a Fog of War reveal position (default = 0).",
			"}"
		],
		"description": [
			"Covers the Fog of War again at the specified reveal position.",
			"",
			"This allows you to re-cover an area of the Fog of War:",
			"  FogOfWarCloak { FogOfWarId = 1 },",
			"",
			"The ID must first be defined when using a FogOfWarReveal with a unique ID:",
			"  FogOfWarReveal { FogOfWarId = 1, X = 99, Y = 99, Range = 9, Height = 9 },",
			"",
			"[!] Warning: If multiple reveals share the same ID, only one position will be revealed and cloaked.",
			"",
			"The parameter `FogOfWarId` is optional (default = 0).",
			"When omitted, it avoids the above issue and behaves like previous scripts.",
			"Use a unique ID only when you want to cover the same spot again later."
		]
	},
	"SF2.Action.FogOfWarReveal": {
		"prefix": "SF2.Action.FogOfWarReveal",
		"body": [
			"FogOfWarReveal",
			"{",
			"\tFogOfWarId = ${1:0},  -- The ID of a Fog of War reveal position (default = 0).",
			"\tX = ${2:50},             -- The X coordinate in world coordinates.",
			"\tY = ${3:50},             -- The Y coordinate in world coordinates.",
			"\tRange = ${4:50},         -- The reveal radius in grid points.",
			"\tHeight = ${5:3}       -- The reveal height above ground (default = 3).",
			"}"
		],
		"description": [
			"Reveals the Fog of War at a given position, based on the specified height.",
			"",
			"This permanently reveals an area of the map. Once revealed by script,",
			"the player will always see enemy units and buildings in that area.",
			"",
			"- Range defines the reveal radius in meters.",
			"- Height allows controlling line of sight over obstacles.",
			"",
			"For example, when revealing a point in a lake, a low Height may only",
			"show the water area. Increasing Height allows revealing terrain and",
			"structures beyond the obstacle.",
			"",
			"[!] Use unique FogOfWarId values if you plan to later re-cover an area",
			"with FogOfWarCloak. Default 0 behaves like legacy scripts."
		]
	},
	"SF2.Action.FogOfWarRevealAtEntity": {
		"prefix": "SF2.Action.FogOfWarRevealAtEntity",
		"body": [
			"FogOfWarRevealAtEntity",
			"{",
			"\tFogOfWarId = ${1:0},  -- The ID of a Fog of War reveal position (default = 0).",
			"\tTag = \"${2:Tag}\",   -- The script tag of the entity.",
			"\tRange = ${3:50},     -- The reveal radius in grid points.",
			"\tHeight = ${4:3}      -- The reveal height above ground (default = 3).",
			"}"
		],
		"description": [
			"Reveals the Fog of War at the position of a target entity.",
			"",
			"Once revealed by script, this area will never be covered again.",
			"The player will always see enemy units and buildings in the area.",
			"",
			"- Range defines the reveal radius in meters.",
			"- Height controls how much terrain and obstacles are visible.",
			"",
			"For example: placing the reveal in a lake with low Height may only",
			"show the water area. Increasing Height allows visibility over terrain",
			"and buildings around it.",
			"",
			"[!] Use unique FogOfWarId values if you plan to later hide the area",
			"again with FogOfWarCloak. Default 0 behaves like legacy scripts."
		]
	},
	"SF2.Action.FogOfWarTeamAdd": {
		"prefix": "SF2.Action.FogOfWarTeamAdd",
		"body": [
			"FogOfWarTeamAdd",
			"{",
			"\tTeam = \"${1:TeamName}\"  -- The team name from the editor.",
			"}"
		],
		"description": [
			"Adds Fog of War visibility for the specified team.",
			"",
			"The given team will additionally reveal the Fog of War in areas it explores.",
			"This is useful for granting allied or neutral factions shared vision."
		]
	},
	"SF2.Action.MapTimerStart": {
		"prefix": "SF2.Action.MapTimerStart",
		"body": [
			"MapTimerStart",
			"{",
			"\tName = \"${1:TimerName}\"  -- The name of the map timer.",
			"}"
		],
		"description": [
			"Starts a map timer.",
			"",
			"A map timer can be used to track time-based events within the scenario.",
			"It will begin counting once started and can later be checked, stopped, or reset."
		]
	},
	"SF2.Action.MapTimerStop": {
		"prefix": "SF2.Action.MapTimerStop",
		"body": [
			"MapTimerStop",
			"{",
			"\tName = \"${1:TimerName}\"  -- The name of the map timer.",
			"}"
		],
		"description": [
			"Stops (deletes) a map timer.",
			"",
			"Once stopped, the timer is removed and can no longer be queried or continued.",
			"If needed again, it must be restarted with MapTimerStart."
		]
	},
	"SF2.Action.MapValueAdd": {
		"prefix": "SF2.Action.MapValueAdd",
		"body": [
			"MapValueAdd",
			"{",
			"\tName = \"${1:VariableName}\"  -- The name of the map variable.",
			"\tValue = ${2:1}                -- Value to be added.",
			"}"
		],
		"description": [
			"Adds the given value to the map variable."
		]
	},
	"SF2.Action.MapValueAddVariable": {
		"prefix": "SF2.Action.MapValueAddVariable",
		"body": [
			"MapValueAddVariable",
			"{",
			"\tName = \"${1:TargetVariable}\"    -- The name of the map variable to modify.",
			"\tVariable = \"${2:SourceVariable}\" -- The name of the map variable to add from.",
			"}"
		],
		"description": [
			"Adds the value of one map variable to another.",
			"",
			"Performs the operation:",
			"TargetVariable = TargetVariable + SourceVariable"
		]
	},
	"SF2.Action.MapValueDecrease": {
		"prefix": "SF2.Action.MapValueDecrease",
		"body": [
			"MapValueDecrease",
			"{",
			"\tName = \"${1:VariableName}\" -- The name of the map variable.",
			"}"
		],
		"description": [
			"Decrements the value of a map variable by 1.",
			"",
			"Performs the operation:",
			"VariableName = VariableName - 1"
		]
	},
	"SF2.Action.MapValueDivide": {
		"prefix": "SF2.Action.MapValueDivide",
		"body": [
			"MapValueDivide",
			"{",
			"\tName = \"${1:VariableName}\", -- The name of the map variable.",
			"\tValue = ${2:1}               -- The value to divide by.",
			"}"
		],
		"description": [
			"Divides the value of a map variable by the given value.",
			"",
			"Performs the operation:",
			"VariableName = VariableName / Value"
		]
	},
	"SF2.Action.MapValueDivideVariable": {
		"prefix": "SF2.Action.MapValueDivideVariable",
		"body": [
			"MapValueDivideVariable",
			"{",
			"\tName = \"${1:VariableName}\",     -- The name of the map variable to divide.",
			"\tVariable = \"${2:OtherVariable}\" -- The name of the divisor map variable.",
			"}"
		],
		"description": [
			"Divides one map variable by another.",
			"",
			"Performs the operation:",
			"Name = Name / Variable"
		]
	},
	"SF2.Action.MapValueExchangeVariable": {
		"prefix": "SF2.Action.MapValueExchangeVariable",
		"body": [
			"MapValueExchangeVariable",
			"{",
			"\tName = \"${1:VariableName}\",     -- The name of the first map variable.",
			"\tVariable = \"${2:OtherVariable}\" -- The name of the second map variable to swap with.",
			"}"
		],
		"description": [
			"Swaps the values of two map variables.",
			"",
			"Performs the operation:",
			"Temp = Name",
			"Name = Variable",
			"Variable = Temp",
			"",
			"If PlayerScore = 5 and EnemyScore = 20 before execution,",
			"then PlayerScore = 20 and EnemyScore = 5 afterwards."
		]
	},
	"SF2.Action.MapValueIncrease": {
		"prefix": "SF2.Action.MapValueIncrease",
		"body": [
			"MapValueIncrease",
			"{",
			"\tName = \"${1:VariableName}\" -- The name of the map variable to increase.",
			"}"
		],
		"description": [
			"Increments (increases) the value of a map variable by 1.",
			"",
			"Performs the operation:",
			"Name = Name + 1"
		]
	},
	"SF2.Action.MapValueMultiply": {
		"prefix": "SF2.Action.MapValueMultiply",
		"body": [
			"MapValueMultiply",
			"{",
			"\tName = \"${1:VariableName}\", -- The name of the map variable to multiply.",
			"\tValue = ${2:2}              -- The value to multiply the variable with.",
			"}"
		],
		"description": [
			"Multiplies the map variable with the given value.",
			"",
			"Performs the operation:",
			"Name = Name * Value"
		]
	},
	"SF2.Action.MapValueMultiplyVariable": {
		"prefix": "SF2.Action.MapValueMultiplyVariable",
		"body": [
			"MapValueMultiplyVariable",
			"{",
			"\tName = \"${1:VariableName}\",   -- The name of the map variable to multiply.",
			"\tVariable = \"${2:OtherVar}\"  -- The name of the second map variable.",
			"}"
		],
		"description": [
			"Multiplies a map variable with another map variable.",
			"",
			"Performs the operation:",
			"Name = Name * Variable"
		]
	},
	"SF2.Action.MapValueRandomize": {
		"prefix": "SF2.Action.MapValueRandomize",
		"body": [
			"MapValueRandomize",
			"{",
			"\tName = \"${1:VariableName}\",   -- The name of the map variable.",
			"\tMinValue = ${2:0},             -- Minimum random value (default = 0).",
			"\tMaxValue = ${3:1}              -- Maximum random value (default = 1).",
			"}"
		],
		"description": [
			"Sets a map variable to a random value within the given range."
		]
	},
	"SF2.Action.MapValueSet": {
		"prefix": "SF2.Action.MapValueSet",
		"body": [
			"MapValueSet",
			"{",
			"\tName = \"${1:VariableName}\",  -- The name of the map variable.",
			"\tValue = ${2:0}                 -- The value to assign (default = 0).",
			"}"
		],
		"description": [
			"Sets the map variable to a specific value."
		]
	},
	"SF2.Action.MapValueSetVariable": {
		"prefix": "SF2.Action.MapValueSetVariable",
		"body": [
			"MapValueSetVariable",
			"{",
			"\tName = \"${1:VariableName}\",      -- The name of the map variable to set.",
			"\tVariable = \"${2:OtherVariable}\"  -- The source map variable (default = \"OtherVariable\").",
			"}"
		],
		"description": [
			"Assigns the value of one map variable to another."
		]
	},
	"SF2.Action.MapValueSubtract": {
		"prefix": "SF2.Action.MapValueSubtract",
		"body": [
			"MapValueSubtract",
			"{",
			"\tName = \"${1:VariableName}\",  -- The name of the map variable.",
			"\tValue = ${2:1}                -- The value to subtract (default = 1).",
			"}"
		],
		"description": [
			"Subtracts a given value from a map variable.",
			"",
			"Performs:",
			"Name = Name - Value"
		]
	},
	"SF2.Action.MapValueSubtractVariable": {
		"prefix": "SF2.Action.MapValueSubtractVariable",
		"body": [
			"MapValueSubtractVariable",
			"{",
			"\tName = \"${1:VariableName}\",      -- The name of the map variable.",
			"\tVariable = \"${2:OtherVariable}\"  -- The variable whose value will be subtracted (default = 0).",
			"}"
		],
		"description": [
			"Subtracts the value of one map variable from another.",
			"",
			"Performs:",
			"Name = Name - Variable"
		]
	},
	"SF2.Action.MinimapAlertSet": {
		"prefix": "SF2.Action.MinimapAlertSet",
		"body": [
			"MinimapAlertSet",
			"{",
			"\tX = ${1:0},        -- X coordinate in world coordinates (default = 0).",
			"\tY = ${2:0},        -- Y coordinate in world coordinates (default = 0).",
			"\tType = ${3:1}      -- Alert type (default = 1).",
			"}"
		],
		"description": [
			"Places an alert (visual marker) on the minimap at the given position.",
			"",
			"Alert types:",
			"1 = Default",
			"2 = Attack",
			"3 = Quest",
			"4 = Outcry",
			"5 = QuickSelect",
			"6 = Dead"
		]
	},
	"SF2.Action.MinimapAlertSetToEntity": {
		"prefix": "SF2.Action.MinimapAlertSetToEntity",
		"body": [
			"MinimapAlertSetToEntity",
			"{",
			"\tTag = \"${1:}\",    -- Script tag of the target entity (default = empty).",
			"\tType = ${2:1}      -- Alert type (default = 1).",
			"}"
		],
		"description": [
			"Places an alert (visual marker) on the minimap at the position of a target entity.",
			"",
			"Alert types:",
			"1 = Default",
			"2 = Attack",
			"3 = Quest",
			"4 = Outcry",
			"5 = QuickSelect",
			"6 = Dead"
		]
	},
	"SF2.Action.NoSpawnEffect": {
		"prefix": "SF2.Action.NoSpawnEffect",
		"body": [
			"NoSpawnEffect",
			"{",
			"\tSpawn = ${1:FigureNpcSpawn{ Tag = \"NPC1\", X = 100, Y = 100, UnitId = 50, Level = 1 }}  -- A spawn action to execute (required).",
			"}"
		],
		"description": [
			"Spawns a dead NPC at a specific location, without playing the default spawn effect.",
			"",
			"Parameter:",
			"- Spawn: Any valid 'spawn' action (e.g., FigureNpcSpawn).",
			"",
			"Example:",
			"NoSpawnEffect { Spawn = FigureNpcSpawn{ Tag = \"Enemy1\", X = 120, Y = 90, UnitId = 200, Level = 2 } }",
			"→ Spawns the NPC at the given coordinates without showing a spawn effect."
		]
	},
	"SF2.Action.ObjectChange": {
		"prefix": "SF2.Action.ObjectChange",
		"body": [
			"ObjectChange",
			"{",
			"\tTag = \"${1:MyObject}\"            -- Script tag of the object to be changed (required).",
			"\tObjectId = ${2:1001}               -- New ObjectId from the database (optional).",
			"\tX = ${3:[self]}                   -- X coordinate in world space (optional, default = current position).",
			"\tY = ${4:[self]}                   -- Y coordinate in world space (optional, default = current position).",
			"\tDirection = ${5:[self]}           -- Facing direction in degrees (0-360, optional, default = current direction).",
			"}"
		],
		"description": [
			"Changes an existing object into another object, moves it to a new position, or changes its facing direction.",
			"",
			"Parameters:",
			"- Tag: Script tag of the target object (required).",
			"- ObjectId: ID of the new object type (from DB).",
			"- X, Y: New world coordinates. If omitted, the object stays at its current location.",
			"- Direction: New facing direction (0° = south, 90° = east).",
			"",
			"Notes:",
			"- You can specify just one, several, or all parameters.",
			"- The object must already exist and have a ScriptTag."
		]
	},
	"SF2.Action.ObjectLootItemEquipmentAdd": {
		"prefix": "SF2.Action.ObjectLootItemEquipmentAdd",
		"body": [
			"ObjectLootItemEquipmentAdd",
			"{",
			"\tTag = \"${1:MyObject}\"       -- Script tag of the object (required).",
			"\tDropChance = ${2:100}        -- Drop chance in %, default = 100%.",
			"\tItemId = ${3:2001}           -- ItemId from the database (required).",
			"}"
		],
		"description": [
			"Adds an equipment item as loot to an object (e.g., NPC, chest, etc.).",
			"",
			"Parameters:",
			"- Tag: Script tag of the target object (required).",
			"- DropChance: Probability that the item will drop (default = 100%).",
			"- ItemId: The ID of the equipment item from the database (required).",
			"",
			"Important Notes:",
			"- Loot remains assigned until the figure dies.",
			"- If the figure respawns, it will **not** automatically regain the loot —",
			"  it must be added again via script."
		]
	},
	"SF2.Action.ObjectLootItemEquipmentRemove": {
		"prefix": "SF2.Action.ObjectLootItemEquipmentRemove",
		"body": [
			"ObjectLootItemEquipmentRemove",
			"{",
			"\tTag = \"${1:MyObject}\"   -- Script tag of the object (required).",
			"\tItemId = ${2:2001}        -- ItemId from the database (required).",
			"}"
		],
		"description": [
			"Removes an equipment item from an object's loot.",
			"",
			"Parameters:",
			"- Tag: Script tag of the target object (required).",
			"- ItemId: The ID of the equipment item from the database (required).",
			"",
			"Important Notes:",
			"- Only the **first matching ItemId** will be removed.",
			"- If there are multiple identical items in the loot,",
			"  you must call this action multiple times (up to 5,",
			"  since objects can hold max 5 loot slots).",
			"",
			"Example:",
			"ObjectLootItemEquipmentRemove { Tag = \"OrcBoss\", ItemId = 3010 }",
			"→ Removes one occurrence of the equipment with ID 3010 from the OrcBoss' loot."
		]
	},
	"SF2.Action.ObjectLootItemGenericAdd": {
		"prefix": "SF2.Action.ObjectLootItemGenericAdd",
		"body": [
			"ObjectLootItemGenericAdd",
			"{",
			"\tTag = \"${1:MyObject}\"          -- Script tag of the object (required).",
			"\tDropChance = ${2:100}            -- Drop chance in percent (default: 100%).",
			"\tLevel = ${3:1}                   -- Level of the unit, item, or spell (required).",
			"\tSkill = ${4:5001}                -- Skill ID from the database (required).",
			"}"
		],
		"description": [
			"Adds a generic item as loot to the specified object.",
			"",
			"Parameters:",
			"- Tag: Script tag of the target object (required).",
			"- DropChance: Probability in % that the item drops (default: 100).",
			"- Level: The level of the unit, item, or spell (required).",
			"- Skill: Skill ID from the database (required).",
			"",
			"Important Notes:",
			"- Loot persists until the figure dies.",
			"- Respawned figures **do not retain loot** automatically —",
			"  you must re-add it after respawn if needed.",
			"",
			"Example:",
			"ObjectLootItemGenericAdd { Tag = \"OrcBoss\", DropChance = 50, Level = 3, Skill = 7010 }",
			"→ OrcBoss has a 50% chance to drop a level 3 item/spell with Skill ID 7010."
		]
	},
	"SF2.Action.ObjectLootItemGenericRemove": {
		"prefix": "SF2.Action.ObjectLootItemGenericRemove",
		"body": [
			"ObjectLootItemGenericRemove",
			"{",
			"\tTag = \"${1:MyObject}\"  -- Script tag of the object (required).",
			"}"
		],
		"description": [
			"Removes a generic item from the loot of the specified object.",
			"",
			"Parameters:",
			"- Tag: Script tag of the target object (required).",
			"",
			"Behavior:",
			"- Removes the **first generic item** found in the loot.",
			"- If multiple generic items exist, call this action multiple times (up to 5 — the max loot slots).",
			"",
			"Limitations:",
			"- You cannot target a specific generic item for removal.",
			"- Only sequential removal is possible (first found, then next, etc.).",
			"",
			"Example:",
			"ObjectLootItemGenericRemove { Tag = \"OrcBoss\" }",
			"→ Removes the first generic loot item from OrcBoss."
		]
	},
	"SF2.Action.ObjectLootItemMiscAdd": {
		"prefix": "SF2.Action.ObjectLootItemMiscAdd",
		"body": [
			"ObjectLootItemMiscAdd",
			"{",
			"\tTag = \"${1:MyObject}\"          -- Script tag of the object (required).",
			"\tDropChance = ${2:100}            -- Drop chance in percent (default: 100%).",
			"\tItemId = ${3:12345}              -- Item ID from the database (required).",
			"}"
		],
		"description": [
			"Adds a misc item as loot to the specified object.",
			"",
			"Parameters:",
			"- Tag: Script tag of the target object (required).",
			"- DropChance: Chance in % that the item drops (default = 100).",
			"- ItemId: Database ID of the misc item (required).",
			"",
			"Behavior:",
			"- The item will remain in the objects loot until the unit dies.",
			"- If the unit respawns, the loot will NOT persist — it must be added again via script.",
			"",
			"Example:",
			"ObjectLootItemMiscAdd { Tag = \"TreasureChest\", DropChance = 75, ItemId = 9012 }",
			"→ Adds an item with ID 9012 to the loot of TreasureChest with 75% drop chance."
		]
	},
	"SF2.Action.ObjectLootItemMiscRemove": {
		"prefix": "SF2.Action.ObjectLootItemMiscRemove",
		"body": [
			"ObjectLootItemMiscRemove",
			"{",
			"\tTag = \"${1:MyObject}\"   -- Script tag of the object (required).",
			"\tItemId = ${2:12345}      -- Item ID from the database (required).",
			"}"
		],
		"description": [
			"Removes a misc item from the specified object’s loot.",
			"",
			"Parameters:",
			"- Tag: Script tag of the target object (required).",
			"- ItemId: Database ID of the misc item to remove (required).",
			"",
			"Behavior:",
			"- Removes the first item with the given ItemId found in the loot.",
			"- If multiple items with the same ItemId exist, this must be called multiple times (up to 5 max loot slots).",
			"",
			"Example:",
			"ObjectLootItemMiscRemove { Tag = \"TreasureChest\", ItemId = 9012 }",
			"→ Removes one instance of item ID 9012 from TreasureChest’s loot."
		]
	},
	"SF2.Action.ObjectLootRemoveAll": {
		"prefix": "SF2.Action.ObjectLootRemoveAll",
		"body": [
			"ObjectLootRemoveAll",
			"{",
			"\tTag = \"${1:MyObject}\"  -- Script tag of the object (required).",
			"}"
		],
		"description": [
			"Removes all loot from the specified object.",
			"",
			"Parameters:",
			"- Tag: Script tag of the target object (required).",
			"",
			"Behavior:",
			"- Clears all loot slots (up to 5).",
			"- After execution, the object will drop no items upon death.",
			"",
			"Example:",
			"ObjectLootRemoveAll { Tag = \"TreasureChest\" }",
			"→ Removes all loot from the chest so it drops nothing."
		]
	},
	"SF2.Action.ObjectSpawn": {
		"prefix": "SF2.Action.ObjectSpawn",
		"body": [
			"ObjectSpawn",
			"{",
			"\tObjectId = ${1:12345},     -- ObjectId from the database (required).",
			"\tX = ${2:1000},             -- X world coordinate (required).",
			"\tY = ${3:1000},             -- Y world coordinate (required).",
			"\tDirection = ${4:0},        -- Facing direction in degrees (0-360). 0 = South, 90 = East. Default: 0.",
			"\tTag = \"${5:MyObject}\"    -- Optional script tag for referencing the spawned object.",
			"}"
		],
		"description": [
			"Spawns a new object at the specified position and direction.",
			"",
			"Parameters:",
			"- ObjectId: Database Object ID of the object to spawn (required).",
			"- X, Y: World coordinates where the object should appear (required).",
			"- Direction: Facing direction in degrees (0°=South, 90°=East). Default is 0.",
			"- Tag: Optional script tag for referencing the spawned object later.",
			"",
			"Behavior:",
			"- Creates a new instance of the object at the given location.",
			"- If Tag is provided, the object can be manipulated by other actions.",
			"",
			"Example:",
			"ObjectSpawn { ObjectId = 101, X = 200, Y = 400, Direction = 90, Tag = \"Gate01\" }",
			"→ Spawns a gate object facing east at coordinates (200,400) with tag 'Gate01'."
		]
	},
	"SF2.Action.ObjectSpawnToEntity": {
		"prefix": "SF2.Action.ObjectSpawnToEntity",
		"body": [
			"ObjectSpawnToEntity",
			"{",
			"\tObjectId = ${1:12345},     -- ObjectId from the database (required).",
			"\tTargetTag = \"${2:Target}\", -- Script tag of the target entity (required).",
			"\tDirection = ${3:0},        -- Facing direction in degrees (0-360). 0 = South, 90 = East. Default: 0.",
			"\tTag = \"${4:MyObject}\"    -- Optional script tag for referencing the spawned object.",
			"}"
		],
		"description": [
			"Spawns a new object at the position of a target entity with the specified direction.",
			"",
			"Parameters:",
			"- ObjectId: Database Object ID of the object to spawn (required).",
			"- TargetTag: Script tag of the target entity that determines the spawn location (required).",
			"- Direction: Facing direction in degrees (0°=South, 90°=East). Default is 0.",
			"- Tag: Optional script tag for referencing the spawned object later.",
			"",
			"Behavior:",
			"- Creates a new instance of the object at the location of the specified entity.",
			"- If Tag is provided, the object can be manipulated by other actions.",
			"",
			"Example:",
			"ObjectSpawnToEntity { ObjectId = 202, TargetTag = \"EnemyBase\", Direction = 180, Tag = \"Turret01\" }",
			"→ Spawns a turret object facing north at the position of entity 'EnemyBase', tagged as 'Turret01'."
		]
	},
	"SF2.Action.ObjectVanish": {
		"prefix": "SF2.Action.ObjectVanish",
		"body": [
			"ObjectVanish",
			"{",
			"\tTag = \"${1:MyObject}\"  -- Script tag of the object to remove (required).",
			"}"
		],
		"description": [
			"Removes an object from the map.",
			"",
			"Parameters:",
			"- Tag: Script tag of the object that should be removed (required).",
			"",
			"Behavior:",
			"- Immediately makes the specified object disappear from the map.",
			"- The object is fully removed and cannot be interacted with afterwards.",
			"",
			"Example:",
			"ObjectVanish { Tag = \"Bridge01\" }",
			"→ Removes the object with the script tag 'Bridge01' from the map."
		]
	},
	"SF2.Action.PlayerActivate": {
		"prefix": "SF2.Action.PlayerActivate",
		"body": [
			"PlayerActivate",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as defined in the Team Setup (required).",
			"}"
		],
		"description": [
			"Activates an AI-controlled player.",
			"",
			"Parameters:",
			"- Player: The player name as defined in the Team Setup (required).",
			"",
			"Behavior:",
			"- Activates the specified AI player.",
			"- If the AI is a builder type: it immediately starts building its economy and base.",
			"- If the AI is a military-only type: it immediately starts offensive actions.",
			"",
			"Example:",
			"PlayerActivate { Player = \"pl_Orcs\" }",
			"→ Activates the Orc AI and lets it start its configured behavior."
		]
	},
	"SF2.Action.PlayerBuildingAdd": {
		"prefix": "SF2.Action.PlayerBuildingAdd",
		"body": [
			"PlayerBuildingAdd",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as defined in the Team Setup (required).",
			"\tBuildingId = ${2:50}           -- The Building ID from the database / Editor (required).",
			"}"
		],
		"description": [
			"Adds a building type to the player's tech tree.",
			"",
			"Parameters:",
			"- Player: The player name as defined in the Team Setup (required).",
			"- BuildingId: The type ID from the SQL database or Editor (required).",
			"",
			"Behavior:",
			"- Grants the specified building to the player's tech tree.",
			"- Once added, the player can construct this building.",
			"- If the player already has the building in the tech tree, this action will assert (error).",
			"",
			"Example:",
			"PlayerBuildingAdd { Player = \"pl_Orcs\", BuildingId = 1024 }",
			"→ Grants the Orc player the ability to construct the building with ID 1024."
		]
	},
	"SF2.Action.PlayerBuildingTeamTransfer": {
		"prefix": "SF2.Action.PlayerBuildingTeamTransfer",
		"body": [
			"PlayerBuildingTeamTransfer",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as defined in the Team Setup (required).",
			"\tTeam = \"${2:50}\"             -- The team name from the Editor (required).",
			"}"
		],
		"description": [
			"Transfers all buildings of a player to another team and deletes the player's RTS units.",
			"",
			"Parameters:",
			"- Player: The player name as defined in the Team Setup (required).",
			"- Team: The team name from the Editor (required).",
			"",
			"Behavior:",
			"- Removes all RTS units belonging to the specified player.",
			"- Transfers all buildings owned by that player to the specified team.",
			"",
			"Example:",
			"PlayerBuildingTeamTransfer { Player = \"pl_Human\", Team = \"Team_Enemy\" }",
			"→ Deletes all units of the human player and gives all their buildings to 'Team_Enemy'."
		]
	},
	"SF2.Action.PlayerBuildingUpgradeAdd": {
		"prefix": "SF2.Action.PlayerBuildingUpgradeAdd",
		"body": [
			"PlayerBuildingUpgradeAdd",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as defined in the Team Setup (required).",
			"\tUpgradeId = ${2:50}            -- The Building Upgrade ID from the database (required).",
			"}"
		],
		"description": [
			"Adds a building upgrade to the player's Tech Tree.",
			"",
			"Parameters:",
			"- Player: The player name as defined in the Team Setup (required).",
			"- UpgradeId: The Building Upgrade ID from the database/SQL client (required).",
			"",
			"Behavior:",
			"- The player gains access to the specified building upgrade in their Tech Tree.",
			"- Will assert (error) if the player already has this upgrade in their Tech Tree.",
			"",
			"Example:",
			"PlayerBuildingUpgradeAdd { Player = \"pl_Human\", UpgradeId = 301 }",
			"→ Adds the building upgrade with ID 301 to the human player's Tech Tree."
		]
	},
	"SF2.Action.PlayerGameEnds": {
		"prefix": "SF2.Action.PlayerGameEnds",
		"body": [
			"PlayerGameEnds",
			"{",
			"}"
		],
		"description": [
			"Ends the game for the player once the victory condition is fulfilled.",
			"",
			"Behavior:",
			"- Typically triggered when the player defeats the final boss or completes the main quest objective.",
			"- This action will end the match and declare the player victorious.",
			"",
			"Example:",
			"PlayerGameEnds { }",
			"→ Ends the game when the script conditions (e.g., defeating the final boss) are met."
		]
	},
	"SF2.Action.PlayerGameOver": {
		"prefix": "SF2.Action.PlayerGameOver",
		"body": [
			"PlayerGameOver",
			"{",
			"\tPlayer = \"${1:pl_Human}\",     -- The player name as set in the Team Setup.",
			"\tTag = \"${2:pl_HumanAvatar}\",  -- A script tag (e.g. the players avatar).",
			"\tLocaTag = \"${3:50}\"             -- A UI Loca Tag for the text shown on Game Over.",
			"}"
		],
		"description": [
			"Ends the game for the specified player with a Game Over.",
			"",
			"Parameters:",
			"- Player: The player name as set in the Team Setup.",
			"- Tag: A script tag (commonly the player’s avatar).",
			"- LocaTag: Optional UI Loca Tag for the text displayed on Game Over.",
			"",
			"Example:",
			"PlayerGameOver { Player = \"pl_Human\", Tag = \"pl_HumanAvatar\", LocaTag = \"GameOverText\" }",
			"→ Triggers a Game Over for the player and shows the specified text in the UI."
		]
	},
	"SF2.Action.PlayerHeroAdd": {
		"prefix": "SF2.Action.PlayerHeroAdd",
		"body": [
			"PlayerHeroAdd",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the Team Setup.",
			"\tHeroId = \"${2:50}\"           -- The ID of a hero (script tag from the DB, e.g. \"HeroMordecay\").",
			"}"
		],
		"description": [
			"Adds a hero to the player’s roster.",
			"",
			"The player can then recruit/build this hero in the Hero Hall.",
			"",
			"Parameters:",
			"- Player: The player name as set in the Team Setup.",
			"- HeroId: The hero’s script tag as defined in the database (without prefix like 'pl_Human').",
			"",
			"Example:",
			"PlayerHeroAdd { Player = \"pl_Human\", HeroId = \"HeroMordecay\" }",
			"→ The player gains access to Mordecay in the Hero Hall."
		]
	},
	"SF2.Action.PlayerHeroRemove": {
		"prefix": "SF2.Action.PlayerHeroRemove",
		"body": [
			"PlayerHeroRemove",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the Team Setup.",
			"\tTag = \"${2:Tag}\"              -- The script tag of the hero (from DB, e.g. \"HeroMordecay\").",
			"}"
		],
		"description": [
			"Removes a hero from the player.",
			"",
			"The player can no longer recruit/build this hero.",
			"If the hero is still alive, they will vanish.",
			"",
			"Parameters:",
			"- Player: The player name as set in the Team Setup.",
			"- Tag: The script tag of the hero as defined in the database (without prefix like 'pl_Human').",
			"",
			"Example:",
			"PlayerHeroRemove { Player = \"pl_Human\", Tag = \"HeroMordecay\" }",
			"→ The player loses access to Mordecay, and if he is alive, he vanishes."
		]
	},
	"SF2.Action.PlayerKitCreate": {
		"prefix": "SF2.Action.PlayerKitCreate",
		"body": [
			"PlayerKitCreate",
			"{",
			"\tPlayerKit = \"${1:playerKit}\"  -- The PlayerKit",
			"}"
		],
		"description": [
			"Creates a new PlayerKit so that it does not need to be set up in the editor.",
			"",
			"Allows you to create a PlayerKit via script. If removed later, it behaves as usual,",
			"but it can always be recreated on demand.",
			"",
			"If the PlayerKit already exists, the command will simply be ignored."
		]
	},
	"SF2.Action.PlayerKitTransfer": {
		"prefix": "SF2.Action.PlayerKitTransfer",
		"body": [
			"PlayerKitTransfer",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tPlayerKit = \"${2:}\"       -- The PlayerKit as defined in the Editor.",
			"}"
		],
		"description": [
			"Transfers a PlayerKit to a player.",
			"",
			"After the transfer, the PlayerKit no longer exists.",
			"The PlayerKit must still exist, otherwise the command asserts!",
			"",
			"Only PlayerKits that are not marked as 'active' in the editor setup can be transferred,",
			"because active PlayerKits are already assigned at the start and no longer exist afterwards."
		]
	},
	"SF2.Action.PlayerMapTravel": {
		"prefix": "SF2.Action.PlayerMapTravel",
		"body": [
			"PlayerMapTravel",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tMap = \"${2:}\"             -- The target map name, relative to base/map/, without .MAP extension.",
			"\tTargetTag = \"${3:}\"       -- The ScriptTag of the PortalEndPoint on the target map.",
			"}"
		],
		"description": [
			"Transfers the player to the target map at the PortalEndPoint with the given TargetTag.",
			"",
			"Example:",
			"PlayerMapTravel { Map = \"Campaign/P316_Shal\", TargetTag = \"EndPoint\", Player = \"default\" }",
			"",
			"The TargetTag must be the tag of a 'PortalEndPoint' entity on the target map,",
			"which defines where the player spawns after traveling."
		]
	},
	"SF2.Action.PlayerMapTravelAddon1": {
		"prefix": "SF2.Action.PlayerMapTravelAddon1",
		"body": [
			"PlayerMapTravelAddon1",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tMap = \"${2:}\"             -- The target map name, relative to addon1/map/, without .MAP extension.",
			"\tTargetTag = \"${3:}\"       -- The ScriptTag of the PortalEndPoint on the target map.",
			"}"
		],
		"description": [
			"Transfers the player to the target map (from addon1/map/) at the PortalEndPoint with the given TargetTag.",
			"",
			"The TargetTag must be the tag of a 'PortalEndPoint' entity on the target map,",
			"which defines where the player spawns after traveling."
		]
	},
	"SF2.Action.PlayerNPCKillCountIncrease": {
		"prefix": "SF2.Action.PlayerNPCKillCountIncrease",
		"body": [
			"PlayerNPCKillCountIncrease",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tUnitId = ${2:}              -- The UnitId from the database.",
			"}"
		],
		"description": [
			"Increases the kill counter for this unit, useful when a quest checks for specific kill counts."
		]
	},
	"SF2.Action.PlayerResourceLenyaGive": {
		"prefix": "SF2.Action.PlayerResourceLenyaGive",
		"body": [
			"PlayerResourceLenyaGive",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set up in the Team Setup.",
			"\tAmount = ${2:50}              -- Any amount of Lenya to give.",
			"}"
		],
		"description": [
			"Gives the player a specified amount of Lenya."
		]
	},
	"SF2.Action.PlayerResourceLenyaTake": {
		"prefix": "SF2.Action.PlayerResourceLenyaTake",
		"body": [
			"PlayerResourceLenyaTake",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tAmount = ${2:}              -- Any amount of Lenya to take.",
			"}"
		],
		"description": [
			"Removes a specified amount of Lenya from the player. If the resource would drop below 0, it is set to 0 (no negative resources)."
		]
	},
	"SF2.Action.PlayerResourceSilverGive": {
		"prefix": "SF2.Action.PlayerResourceSilverGive",
		"body": [
			"PlayerResourceSilverGive",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tAmount = ${2:}              -- Any amount of Silver to give.",
			"}"
		],
		"description": [
			"Gives the player a specified amount of Silver."
		]
	},
	"SF2.Action.PlayerResourceSilverTake": {
		"prefix": "SF2.Action.PlayerResourceSilverTake",
		"body": [
			"PlayerResourceSilverTake",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tAmount = ${2:}              -- Any amount of Silver to take.",
			"}"
		],
		"description": [
			"Removes a specified amount of Silver from the player. If the resource would drop below 0, it is set to 0 (no negative resources)."
		]
	},
	"SF2.Action.PlayerResourceStoneGive": {
		"prefix": "SF2.Action.PlayerResourceStoneGive",
		"body": [
			"PlayerResourceStoneGive",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tAmount = ${2:}              -- Any amount of Stone to give.",
			"}"
		],
		"description": [
			"Gives the player a specified amount of Stone."
		]
	},
	"SF2.Action.PlayerResourceStoneTake": {
		"prefix": "SF2.Action.PlayerResourceStoneTake",
		"body": [
			"PlayerResourceStoneTake",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tAmount = ${2:}              -- Any amount of Stone to take.",
			"}"
		],
		"description": [
			"Removes a specified amount of Stone from the player. If the resource would drop below 0, it is set to 0 (no negative resources)."
		]
	},
	"SF2.Action.PlayerRTSKillCountIncrease": {
		"prefix": "SF2.Action.PlayerRTSKillCountIncrease",
		"body": [
			"PlayerRTSKillCountIncrease",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tUnitId = ${2:}              -- The UnitId as defined in the database.",
			"}"
		],
		"description": [
			"Increases the kill counter for this unit, in case a quest checks for it."
		]
	},
	"SF2.Action.PlayerRtsUnitKillInRange": {
		"prefix": "SF2.Action.PlayerRtsUnitKillInRange",
		"body": [
			"PlayerRtsUnitKillInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tX = ${2:}                  -- The X coordinate in world coordinates.",
			"\tY = ${3:}                  -- The Y coordinate in world coordinates.",
			"\tRange = ${4:}              -- The radius of the query in grid points.",
			"}"
		],
		"description": [
			"Kills all RTS units of the given player within the specified range.",
			"Does not affect the Avatar, heroes, or NPC units."
		]
	},
	"SF2.Action.PlayerRtsUnitKillInRangeToEntity": {
		"prefix": "SF2.Action.PlayerRtsUnitKillInRangeToEntity",
		"body": [
			"PlayerRtsUnitKillInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tTag = \"${2:}\"             -- A Script Tag.",
			"\tRange = ${3:}              -- The radius of the query in grid points.",
			"}"
		],
		"description": [
			"Kills all RTS units of the given player within the specified range of the entity with the given ScriptTag.",
			"Does not affect the Avatar, heroes, or NPC units."
		]
	},
	"SF2.Action.PlayerTeamTransfer": {
		"prefix": "SF2.Action.PlayerTeamTransfer",
		"body": [
			"PlayerTeamTransfer",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set up in the Team Setup.",
			"\tTeam = \"${2:}\"            -- The team name from the editor.",
			"}"
		],
		"description": [
			"Assigns a player to another team.",
			"All units of the player will change their friend/foe behavior based on the new team."
		]
	},
	"SF2.Action.PlayerTravelDisable": {
		"prefix": "SF2.Action.PlayerTravelDisable",
		"body": [
			"PlayerTravelDisable",
			"{",
			"}"
		],
		"description": [
			"Prevents the player from leaving the map using travel stones or portals."
		]
	},
	"SF2.Action.PlayerTravelEnable": {
		"prefix": "SF2.Action.PlayerTravelEnable",
		"body": [
			"PlayerTravelEnable",
			"{",
			"}"
		],
		"description": [
			"Allows the player to leave the map using travel stones or portals."
		]
	},
	"SF2.Action.PlayerTravelStoneAdd": {
		"prefix": "SF2.Action.PlayerTravelStoneAdd",
		"body": [
			"PlayerTravelStoneAdd",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the Team Setup.",
			"\tTag = \"${2:TravelStoneTag}\"  -- Script Tag of the travel stone.",
			"}"
		],
		"description": [
			"Grants the player access to this travel stone."
		]
	},
	"SF2.Action.PortalDisable": {
		"prefix": "SF2.Action.PortalDisable",
		"body": [
			"PortalDisable",
			"{",
			"\tTag = \"${1:PortalTag}\"  -- Script Tag of the portal.",
			"}"
		],
		"description": [
			"Disables the specified portal."
		]
	},
	"SF2.Action.PortalEnable": {
		"prefix": "SF2.Action.PortalEnable",
		"body": [
			"PortalEnable",
			"{",
			"\tTag = \"${1:PortalTag}\"  -- Script Tag of the portal.",
			"}"
		],
		"description": [
			"Enables the specified portal."
		]
	},
	"SF2.Action.QuestSetActive": {
		"prefix": "SF2.Action.QuestSetActive",
		"body": [
			"QuestSetActive",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the Team Setup.",
			"\tQuest = \"${2:QuestTag}\"   -- The name or tag of a quest.",
			"}"
		],
		"description": [
			"Activates the specified quest.",
			"Sets a quest to active, meaning the player now has the task to solve this quest."
		]
	},
	"SF2.Action.QuestSetActiveAgain": {
		"prefix": "SF2.Action.QuestSetActiveAgain",
		"body": [
			"QuestSetActiveAgain",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the Team Setup.",
			"\tQuest = \"${2:QuestTag}\"   -- The name or tag of a quest.",
			"}"
		],
		"description": [
			"Re-activates the specified quest.",
			"Sets a quest back to active, even if it was previously solved or marked unsolvable.",
			"Useful for quests that can repeat at fixed intervals."
		]
	},
	"SF2.Action.QuestSetInactive": {
		"prefix": "SF2.Action.QuestSetInactive",
		"body": [
			"QuestSetInactive",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the Team Setup.",
			"\tQuest = \"${2:QuestTag}\"   -- The name or tag of a quest.",
			"}"
		],
		"description": [
			"Removes the specified quest from the quest log.",
			"The quest is considered inactive again."
		]
	},
	"SF2.Action.QuestSetSolved": {
		"prefix": "SF2.Action.QuestSetSolved",
		"body": [
			"QuestSetSolved",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the Team Setup.",
			"\tQuest = \"${2:QuestTag}\"   -- The name or tag of a quest.",
			"}"
		],
		"description": [
			"Marks the specified quest as solved.",
			"The quest will only appear under solved quests."
		]
	},
	"SF2.Action.QuestSetUnsolvable": {
		"prefix": "SF2.Action.QuestSetUnsolvable",
		"body": [
			"QuestSetUnsolvable",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the Team Setup.",
			"\tQuest = \"${2:QuestTag}\"   -- The name or tag of a quest.",
			"}"
		],
		"description": [
			"Sets the specified quest as unsolvable.",
			"Marks a quest as unsolvable because the player can no longer complete it.",
			"In the quest log it appears under solved quests, but highlighted differently."
		]
	},
	"SF2.Action.SoundAmbientPlayLooped": {
		"prefix": "SF2.Action.SoundAmbientPlayLooped",
		"body": [
			"SoundAmbientPlayLooped",
			"{",
			"\tFile = \"${1:music/sf2_battle_evermore}\"  -- File path relative to 'redist/base/sound', without .WAV extension. Can be .wav or .mp3.",
			"\tX = ${2:0}                                -- The X world coordinate.",
			"\tY = ${3:0}                                -- The Y world coordinate (height in this case!).",
			"\tZ = ${4:0}                                -- The Z world coordinate.",
			"\tMaxRange = ${5:15}                        -- Maximum distance at which the sound is audible.",
			"\tFallOffRange = ${6:5}                     -- Distance where volume starts decreasing linearly until MaxRange.",
			"}"
		],
		"description": [
			"Plays an ambient (positioned) sound looped.",
			"Ambient sounds are tied to world coordinates and only audible nearby.",
			"FallOffRange defines where volume starts to drop, MaxRange defines the maximum audible radius.",
			"Example: File = \"music/sf2_battle_evermore.mp3\" or File = \"speech/male/malakay.mp3\""
		]
	},
	"SF2.Action.SoundAmbientPlayOnce": {
		"prefix": "SF2.Action.SoundAmbientPlayOnce",
		"body": [
			"SoundAmbientPlayOnce",
			"{",
			"\tFile = \"${1:music/sf2_battle_evermore}\"  -- File path relative to 'redist/base/sound', without .WAV extension. Can be .wav or .mp3.",
			"\tX = ${2:0}                                -- The X world coordinate.",
			"\tY = ${3:0}                                -- The Y world coordinate (height in this case!).",
			"\tZ = ${4:0}                                -- The Z world coordinate.",
			"\tMaxRange = ${5:15}                        -- Maximum distance at which the sound is audible.",
			"\tFallOffRange = ${6:5}                     -- Distance where volume starts decreasing linearly until MaxRange.",
			"}"
		],
		"description": [
			"Plays an ambient (positioned) sound once.",
			"Ambient sounds are tied to world coordinates and only audible nearby.",
			"FallOffRange defines where volume starts to drop, MaxRange defines the maximum audible radius.",
			"Example: File = \"music/sf2_battle_evermore.mp3\" or File = \"speech/male/malakay.mp3\""
		]
	},
	"SF2.Action.SoundGlobalPlayLooped": {
		"prefix": "SF2.Action.SoundGlobalPlayLooped",
		"body": [
			"SoundGlobalPlayLooped",
			"{",
			"\tFile = \"${1:music/sf2_battle_evermore}\"  -- File path relative to 'redist/base/sound', without .WAV extension. Can be .wav or .mp3.",
			"}"
		],
		"description": [
			"Plays a global sound in a loop.",
			"Global sounds are heard everywhere on the map at the same volume.",
			"Example: File = \"music/sf2_battle_evermore.mp3\" or File = \"speech/male/malakay.mp3\""
		]
	},
	"SF2.Action.SoundGlobalPlayOnce": {
		"prefix": "SF2.Action.SoundGlobalPlayOnce",
		"body": [
			"SoundGlobalPlayOnce",
			"{",
			"\tFile = \"${1:music/sf2_battle_evermore}\"  -- File path relative to 'redist/base/sound', without .WAV extension. Can be .wav or .mp3.",
			"}"
		],
		"description": [
			"Plays a global sound once.",
			"Global sounds are heard everywhere on the map at the same volume.",
			"Example: File = \"music/sf2_battle_evermore.mp3\" or File = \"speech/male/malakay.mp3\""
		]
	},
	"SF2.Action.SoundStop": {
		"prefix": "SF2.Action.SoundStop",
		"body": [
			"SoundStop",
			"{",
			"\tFile = \"${1:music/sf2_battle_evermore}\"  -- File path relative to 'redist/base/sound', without .WAV extension. Can be .wav or .mp3.",
			"}"
		],
		"description": [
			"Stops a sound.",
			"Stops a global or ambient sound by its file name.",
			"Example: File = \"music/sf2_battle_evermore.mp3\" or File = \"speech/male/malakay.mp3\""
		]
	},
	"SF2.Action.TeamCastSpell": {
		"prefix": "SF2.Action.TeamCastSpell",
		"body": [
			"TeamCastSpell",
			"{",
			"\tSpell = ${1:SpellID}      -- The spell ID from the database.",
			"\tPower = ${2:1}            -- The power/strength of the spell.",
			"\tTeam = \"${3:TeamName}\"  -- The team name from the editor.",
			"\tX = ${4:0}                -- The X coordinate in world space.",
			"\tY = ${5:0}                -- The Y coordinate in world space.",
			"}"
		],
		"description": [
			"Casts a spell from a team at a given coordinate.",
			"Allows casting a spell without an entity. A team must be specified, since many spells depend on team context.",
			"For example, healing should not affect enemy units, and damaging spells should not hit friendly ones.",
			"See also: FigureCastSpell."
		]
	},
	"SF2.Action.TeamCastSpellToEntity": {
		"prefix": "SF2.Action.TeamCastSpellToEntity",
		"body": [
			"TeamCastSpellToEntity",
			"{",
			"\tSpell = ${1:SpellID}          -- The spell ID from the database.",
			"\tPower = ${2:1}                -- The power/strength of the spell.",
			"\tTeam = \"${3:TeamName}\"      -- The team name from the editor.",
			"\tTargetTag = \"${4:Target}\"   -- The Script Tag of the target entity.",
			"}"
		],
		"description": [
			"Casts a spell from a team on a target entity.",
			"Allows casting a spell without an entity. A team must be specified, since many spells depend on team context.",
			"For example, healing should not affect enemy units, and damaging spells should not hit friendly ones.",
			"See also: FigureCastSpellToEntity."
		]
	},
	"SF2.Action.TutorialCameraCenterOnEntity": {
		"prefix": "SF2.Action.TutorialCameraCenterOnEntity",
		"body": [
			"TutorialCameraCenterOnEntity",
			"{",
			"\tTag = \"${1:EntityTag}\"  -- The Script Tag of the entity.",
			"}"
		],
		"description": [
			"Centers the camera on the given entity."
		]
	},
	"SF2.Action.TutorialCameraSetZoom": {
		"prefix": "SF2.Action.TutorialCameraSetZoom",
		"body": [
			"TutorialCameraSetZoom",
			"{",
			"\tZoom = ${1:1.0}  -- A zoom level (e.g., 0.5 = zoom out, 2.0 = zoom in).",
			"}"
		],
		"description": [
			"Changes the zoom level of the camera."
		]
	},
	"SF2.Action.TutorialInfoTextShow": {
		"prefix": "SF2.Action.TutorialInfoTextShow",
		"body": [
			"TutorialInfoTextShow",
			"{",
			"\tTextTag = \"${1:YourTextTag}\"  -- Text tag for the localization system.",
			"}"
		],
		"description": [
			"Shows a tutorial info text that specifies a task the player must fulfill."
		]
	},
	"SF2.Action.TutorialItemDeleteButtonDisable": {
		"prefix": "SF2.Action.TutorialItemDeleteButtonDisable",
		"body": [
			"TutorialItemDeleteButtonDisable",
			"{",
			"}"
		],
		"description": [
			"Disables the item delete button."
		]
	},
	"SF2.Action.TutorialItemDeleteButtonEnable": {
		"prefix": "SF2.Action.TutorialItemDeleteButtonEnable",
		"body": [
			"TutorialItemDeleteButtonEnable",
			"{",
			"}"
		],
		"description": [
			"Enables the item delete button."
		]
	},
	"SF2.Action.TutorialStateClear": {
		"prefix": "SF2.Action.TutorialStateClear",
		"body": [
			"TutorialStateClear",
			"{",
			"\tTutorialState = \"${1}\"  -- A Tutorial State constant.",
			"}"
		],
		"description": [
			"Clears a tutorial state.",
			"Removes a specific Tutorial State constant."
		]
	},
	"SF2.Action.TutorialStateSet": {
		"prefix": "SF2.Action.TutorialStateSet",
		"body": [
			"TutorialStateSet",
			"{",
			"\tTutorialState = \"${1}\"  -- A Tutorial State constant.",
			"}"
		],
		"description": [
			"Sets a tutorial state.",
			"Applies a specific Tutorial State constant."
		]
	},
	"SF2.Action.TutorialTaskSetSolved": {
		"prefix": "SF2.Action.TutorialTaskSetSolved",
		"body": [
			"TutorialTaskSetSolved",
			"{",
			"\tTake = ${1:tag}  -- Take number of a TutorialTask text.",
			"}"
		],
		"description": [
			"Marks a tutorial task as solved.",
			"Allows the player to dismiss the TutorialTask text as completed."
		]
	},
	"SF2.Action.TutorialTaskTextShow": {
		"prefix": "SF2.Action.TutorialTaskTextShow",
		"body": [
			"TutorialTaskTextShow",
			"{",
			"\tTextTag = \"${1:tag}\"  -- Text tag for the localization.",
			"}"
		],
		"description": [
			"Displays a tutorial task text.",
			"Shows a tutorial text that specifies a task to be completed."
		]
	},
	"SF2.Action.TutorialUIPointerHide": {
		"prefix": "SF2.Action.TutorialUIPointerHide",
		"body": [
			"TutorialUIPointerHide",
			"{",
			"}"
		],
		"description": [
			"Removes a UI pointer for the tutorial.",
			"Deletes an active UI pointer that was shown during the tutorial."
		]
	},
	"SF2.Action.TutorialUIPointerShow": {
		"prefix": "SF2.Action.TutorialUIPointerShow",
		"body": [
			"TutorialUIPointerShow",
			"{",
			"\tLeft = ${1:0},        -- The left coordinate of the rectangle.",
			"\tTop = ${2:0},         -- The top coordinate of the rectangle.",
			"\tWidth = ${3:100},     -- The width in pixels (scaled to 1024x768 resolution).",
			"\tHeight = ${4:100},    -- The height in pixels (scaled to 1024x768 resolution).",
			"\tFile = \"${5:example}\"  -- File path relative to 'base/gfx/ui/tutorial/' folder without .TGA extension.",
			"}"
		],
		"description": [
			"Sets a UI pointer for the tutorial.",
			"Displays a UI pointer rectangle with an optional graphic overlay to highlight areas of the interface."
		]
	},
	"SF2.Action.VisualTimerStart": {
		"prefix": "SF2.Action.VisualTimerStart",
		"body": [
			"VisualTimerStart",
			"{",
			"\tSeconds = ${1:60}  -- Number of seconds (not converted into GD steps).",
			"}"
		],
		"description": [
			"Starts a countdown timer that is displayed on-screen.",
			"The visual timer counts down to 0:00 and is meant to give players a clear indication of how much time remains for time-limited objectives."
		]
	},
	"SF2.Action.VisualTimerStop": {
		"prefix": "SF2.Action.VisualTimerStop",
		"body": [
			"VisualTimerStop",
			"{",
			"}"
		],
		"description": [
			"Stops a running visual timer.",
			"Stops the visual timer and removes it from the screen.",
			"Visual timers are used to give the player a constant visible countdown for time-limited tasks."
		]
	},
	"SF2.Action.WeatherChange": {
		"prefix": "SF2.Action.WeatherChange",
		"body": [
			"WeatherChange",
			"{",
			"\tFile = \"${1}\"  -- A weather file from the folder /mapname/weather/ without .XML extension.",
			"\tFadeDuration = ${2:3}  -- Weather fade duration in seconds.",
			"}"
		],
		"description": [
			"Temporarily changes the weather to a specific one.",
			"The game fades into the specified weather and keeps it active for an undefined time,",
			"until the next random weather change occurs (depending on the maps weather settings)."
		]
	},
	"SF2.Action.WeatherSetForever": {
		"prefix": "SF2.Action.WeatherSetForever",
		"body": [
			"WeatherSetForever",
			"{",
			"\tFile = \"${1:}\"  -- A weather file from the folder /mapname/weather/ without .XML extension.",
			"\tFadeDuration = ${2:3}  -- Weather fade duration in seconds.",
			"}"
		],
		"description": [
			"Permanently changes the weather to a specific one.",
			"The game fades into the specified weather and keeps it active, ignoring the maps weather settings.",
			"You can change it again using this command.",
			"Interaction with WeatherChange is unclear — might require testing."
		]
	},
	"SF2.Condition.AND": {
		"prefix": "SF2.Condition.AND",
		"body": [
			"AND",
			"{",
			"\t$0",
			"}"
		],
		"description": [
			"Logical AND for two or more conditions.",
			"You can combine as many conditions as you want, there is no script-side limit.",
			"AND and OR can also be nested, e.g.:",
			"AND",
			"{",
			"\tMapTimerIsElapsed   {Name = \"\", Seconds = },",
			"\tPlayerValueIsEqual  {Name = \"\", Value = },",
			"\tTeamIsInRange       {Team = , X = , Y = },",
			"\tOR",
			"\t{",
			"\t\tAnyFigureIsInRange   {X = , Y = },",
			"\t\tEntityFlagIsTrue     {Name = \"\"},",
			"\t\tMapTimerIsElapsed    {Name = \"\", Seconds = },",
			"\t},",
			"}"
		]
	},
	"AvatarFlagIsFalse": {
		"prefix": "SF2.Condition.AvatarFlagIsFalse",
		"body": [
			"AvatarFlagIsFalse",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:AvatarVar}\",   -- The name of the avatar variable (default: AvatarVar).",
			"}"
		],
		"description": [
			"Negated: Is the avatar variable true?"
		]
	},
	"AvatarFlagIsTrue": {
		"prefix": "SF2.Condition.AvatarFlagIsTrue",
		"body": [
			"AvatarFlagIsTrue",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:AvatarVar}\",   -- The name of the avatar variable (default: AvatarVar).",
			"}"
		],
		"description": [
			"AvatarFlagIsTrue",
			"Is the avatar variable true?"
		]
	},
	"AvatarHasGold": {
		"prefix": "SF2.Condition.AvatarHasGold",
		"body": [
			"AvatarHasGold",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tAmount = ${2:100},           -- Any number (default: 100).",
			"}"
		],
		"description": [
			"Checks whether the selected avatar owns at least the specified amount of gold."
		]
	},
	"AvatarHasItemEquipment": {
		"prefix": "SF2.Condition.AvatarHasItemEquipment",
		"body": [
			"AvatarHasItemEquipment",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tItemId = ${2:1000},          -- The item ID as listed in the Items SQL table (default: 1000).",
			"\tAmount = ${3:1},             -- Quantity to check for (default: 1).",
			"\tSearchEquipment = ${4:true},  -- Search the avatar's equipped items? (default: true).",
			"\tSearchHeroEquipment = ${5:true} -- Search the heroes' equipped items? (default: true).",
			"}"
		],
		"description": [
			"Checks whether an avatar owns at least the specified amount of a particular equipment item.",
			"Searches the avatar's inventory and — depending on flags — also the avatar's equipped items and the equipment of the avatar's heroes.",
			"ItemId refers to the ID found in the Items table (use your SQL client to look it up).",
			"Toggle SearchEquipment and SearchHeroEquipment to include or exclude equipped items and hero equipment. By default all locations are searched.",
			"Note: this command is not fully implemented."
		]
	},
	"AvatarHasItemEquipped": {
		"prefix": "SF2.Condition.AvatarHasItemEquipped",
		"body": [
			"AvatarHasItemEquipped",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tItemId = ${2:1000}           -- The item ID as listed in the Items SQL table (default: 1000).",
			"}"
		],
		"description": [
			"Checks whether the avatar currently has a specific equipment item equipped.",
			"The target item must be of type 'equipment'.",
			"Useful for verifying if an avatar is actively using a given item.",
			"See also: PlayerHeroHasItemEquipped."
		]
	},
	"AvatarHasItemMisc": {
		"prefix": "SF2.Condition.AvatarHasItemMisc",
		"body": [
			"AvatarHasItemMisc",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tItemId = ${2:2000},          -- The item ID as listed in the Items SQL table (default: 2000).",
			"\tAmount = ${3:1}              -- Quantity to check for (default: 1).",
			"}"
		],
		"description": [
			"Checks whether the avatar owns at least the specified amount of a given misc (quest) item.",
			"The search is limited to the avatar's inventory, since misc items cannot be equipped.",
			"ItemId corresponds to the entry in the Items table of the database."
		]
	},
	"AvatarHasLevel": {
		"prefix": "SF2.Condition.AvatarHasLevel",
		"body": [
			"AvatarHasLevel",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tLevel = ${2:10}              -- The minimum level to check for (default: 10).",
			"}"
		],
		"description": [
			"Checks whether the avatar's level is greater than or equal to the specified value.",
			"Useful for gating quests, abilities, or content behind a level requirement."
		]
	},
	"AvatarHasNotGold": {
		"prefix": "SF2.Condition.AvatarHasNotGold",
		"body": [
			"AvatarHasNotGold",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tAmount = ${2:100}            -- Quantity to check for (default: 100).",
			"}"
		],
		"description": [
			"Checks whether the avatar does not own the specified amount of gold.",
			"Acts as the negated form of AvatarHasGold."
		]
	},
	"AvatarHasNotItemEquipment": {
		"prefix": "SF2.Condition.AvatarHasNotItemEquipment",
		"body": [
			"AvatarHasNotItemEquipment",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tItemId = ${2:1000},           -- The item ID as listed in the Items SQL table (default: 1000).",
			"\tAmount = ${3:1},              -- Quantity to check for (default: 1).",
			"\tSearchEquipment = ${4:true},  -- Search the avatar's equipped items? (default: true).",
			"\tSearchHeroEquipment = ${5:true} -- Search the heroes' equipped items? (default: true).",
			"}"
		],
		"description": [
			"Checks whether the avatar does not own the specified amount of a particular equipment item.",
			"Negated form of AvatarHasItemEquipment."
		]
	},
	"AvatarHasNotItemEquipped": {
		"prefix": "SF2.Condition.AvatarHasNotItemEquipped",
		"body": [
			"AvatarHasNotItemEquipped",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tItemId = ${2:1000}           -- The item ID as listed in the Items SQL table (default: 1000).",
			"}"
		],
		"description": [
			"Checks whether the avatar does not currently have a specific equipment item equipped.",
			"Negated form of AvatarHasItemEquipped."
		]
	},
	"AvatarHasNotItemMisc": {
		"prefix": "SF2.Condition.AvatarHasNotItemMisc",
		"body": [
			"AvatarHasNotItemMisc",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tItemId = ${2:2000},          -- The item ID as listed in the Items SQL table (default: 2000).",
			"\tAmount = ${3:1}              -- Quantity to check for (default: 1).",
			"}"
		],
		"description": [
			"Checks whether the avatar does not own the specified amount of a given misc (quest) item.",
			"Negated form of AvatarHasItemMisc."
		]
	},
	"AvatarHasNotLevel": {
		"prefix": "SF2.Condition.AvatarHasNotLevel",
		"body": [
			"AvatarHasNotLevel",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tLevel = ${2:10}              -- The minimum level to check for (default: 10).",
			"}"
		],
		"description": [
			"Checks whether the avatar's level is lower than the specified value.",
			"Negated form of AvatarHasLevel."
		]
	},
	"AvatarHasNotSilver": {
		"prefix": "SF2.Condition.AvatarHasNotSilver",
		"body": [
			"AvatarHasNotSilver",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tAmount = ${2:100}            -- Quantity to check for (default: 100).",
			"}"
		],
		"description": [
			"Checks whether the avatar does not own the specified amount of silver.",
			"Negated form of AvatarHasSilver.",
			"Note: silver is deprecated in favor of gold."
		]
	},
	"AvatarHasNotSkill": {
		"prefix": "SF2.Condition.AvatarHasNotSkill",
		"body": [
			"AvatarHasNotSkill",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tSkill = ${2:3000}            -- The skill ID as listed in the database (default: 3000).",
			"}"
		],
		"description": [
			"Checks whether the avatar does not possess the specified skill.",
			"Negated form of AvatarHasSkill.",
			"Useful for quest conditions or restrictions where a skill should not yet be learned."
		]
	},
	"AvatarHasSilver": {
		"prefix": "SF2.Condition.AvatarHasSilver",
		"body": [
			"AvatarHasSilver",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tAmount = ${2:100}            -- Quantity to check for (default: 100).",
			"}"
		],
		"description": [
			"Checks whether the avatar owns at least the specified amount of silver.",
			"Deprecated: silver has been merged into gold as the only currency unit."
		]
	},
	"AvatarHasSkill": {
		"prefix": "SF2.Condition.AvatarHasSkill",
		"body": [
			"AvatarHasSkill",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tSkill = ${2:3000}            -- The skill ID as listed in the database (default: 3000).",
			"}"
		],
		"description": [
			"Checks whether the avatar possesses the specified skill.",
			"Currently, the condition cannot be restricted to a specific skill rank.",
			"Rank-based checks may be added in the future if needed."
		]
	},
	"AvatarIsCastingSpell": {
		"prefix": "SF2.Condition.AvatarIsCastingSpell",
		"body": [
			"AvatarIsCastingSpell",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tSpell = ${2:0}               -- The spell ID from the database (0 = any spell, default: 0).",
			"}"
		],
		"description": [
			"Checks whether the avatar is currently casting a spell.",
			"If a specific spell ID is provided, the check is restricted to that spell.",
			"Using Spell = 0 makes the condition true if the avatar is casting any spell at all."
		]
	},
	"AvatarIsFemale": {
		"prefix": "SF2.Condition.AvatarIsFemale",
		"body": [
			"AvatarIsFemale",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup (default: pl_Human).",
			"}"
		],
		"description": [
			"Checks whether the avatar is female.",
			"Primarily used for gender-specific behaviors, such as selecting the correct animation set during gameplay."
		]
	},
	"AvatarIsMale": {
		"prefix": "SF2.Condition.AvatarIsMale",
		"body": [
			"AvatarIsMale",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup (default: pl_Human).",
			"}"
		],
		"description": [
			"Checks whether the avatar is male.",
			"Negated form of AvatarIsFemale.",
			"Useful for gender-specific logic such as branching animations or dialogue."
		]
	},
	"AvatarIsNotCastingSpell": {
		"prefix": "SF2.Condition.AvatarIsNotCastingSpell",
		"body": [
			"AvatarIsNotCastingSpell",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tSpell = ${2:0}               -- The spell ID from the database (0 = any spell, default: 0).",
			"}"
		],
		"description": [
			"Checks whether the avatar is not currently casting the specified spell.",
			"Negated form of AvatarIsCastingSpell.",
			"Using Spell = 0 makes the condition true if the avatar is not casting any spell at all."
		]
	},
	"AvatarIsNotTalking": {
		"prefix": "SF2.Condition.AvatarIsNotTalking",
		"body": [
			"AvatarIsNotTalking",
			"{",
			"}"
		],
		"description": [
			"Checks whether the avatar is no longer in a dialogue sequence.",
			"Negated form of AvatarIsTalking.",
			"The condition becomes true once the dialogue ends and the cinematic black bars have fully disappeared.",
			"Timing may vary depending on the transition speed of the dialogue UI."
		]
	},
	"AvatarIsTalking": {
		"prefix": "SF2.Condition.AvatarIsTalking",
		"body": [
			"AvatarIsTalking",
			"{",
			"}"
		],
		"description": [
			"Checks whether the avatar is currently in a dialogue sequence.",
			"The condition becomes true as soon as the last dialogue line disappears and the cinematic black bars begin to roll off the screen.",
			"For reliable results, this condition should be combined with GameInterfaceIsVisible."
		]
	},
	"AvatarTimerIsElapsed": {
		"prefix": "SF2.Condition.AvatarTimerIsElapsed",
		"body": [
			"AvatarTimerIsElapsed",
			"{",
			"\tName = \"${1:TimerName}\",   -- The name of the avatar timer (default: TimerName).",
			"\tSeconds = ${2:10},           -- Number of seconds to check for (default: 10).",
			"\tPlayer = \"${3:pl_Human}\"   -- The player name as set in the team setup (default: pl_Human).",
			"}"
		],
		"description": [
			"Checks whether the specified avatar timer has elapsed for the given duration.",
			"Useful for time-based conditions such as cooldowns, scripted delays, or quest triggers."
		]
	},
	"AvatarTimerIsNotElapsed": {
		"prefix": "SF2.Condition.AvatarTimerIsNotElapsed",
		"body": [
			"AvatarTimerIsNotElapsed",
			"{",
			"\tName = \"${1:TimerName}\",   -- The name of the avatar timer (default: TimerName).",
			"\tSeconds = ${2:10},           -- Number of seconds to check for (default: 10).",
			"\tPlayer = \"${3:pl_Human}\"   -- The player name as set in the team setup (default: pl_Human).",
			"}"
		],
		"description": [
			"Checks whether the specified avatar timer has not yet elapsed.",
			"Negated form of AvatarTimerIsElapsed.",
			"Useful for conditions that must hold until a cooldown, delay, or scripted timer has fully passed."
		]
	},
	"AvatarValueIsEqual": {
		"prefix": "SF2.Condition.AvatarValueIsEqual",
		"body": [
			"AvatarValueIsEqual",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\", -- The name of the avatar variable (default: VariableName).",
			"\tValue = ${3:0}                -- The value to compare against (default: 0).",
			"}"
		],
		"description": [
			"Checks whether the specified avatar variable is equal to the given value.",
			"Useful for state tracking, quest variables, or scripted conditions where exact values matter."
		]
	},
	"AvatarValueIsEqualToVariable": {
		"prefix": "SF2.Condition.AvatarValueIsEqualToVariable",
		"body": [
			"AvatarValueIsEqualToVariable",
			"{",
			"\tPlayer1 = \"${1:pl_Human}\",   -- The first player (default: pl_Human).",
			"\tName = \"${2:VariableA}\",      -- The first avatar variable (default: VariableA).",
			"\tPlayer2 = \"${3:pl_Human}\",   -- The second player (default: pl_Human).",
			"\tVariable = \"${4:VariableB}\"   -- The second avatar variable (default: VariableB).",
			"}"
		],
		"description": [
			"Compares two avatar variables and checks whether they are equal.",
			"Useful for synchronizing state between different players or validating mirrored conditions."
		]
	},
	"AvatarValueIsGreater": {
		"prefix": "SF2.Condition.AvatarValueIsGreater",
		"body": [
			"AvatarValueIsGreater",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable (default: VariableName).",
			"\tValue = ${3:0}                 -- The value to compare against (default: 0).",
			"}"
		],
		"description": [
			"Checks whether the specified avatar variable is greater than the given value.",
			"Commonly used for thresholds such as level, resource count, quest progress, or other gameplay variables."
		]
	},
	"AvatarValueIsGreaterOrEqual": {
		"prefix": "SF2.Condition.AvatarValueIsGreaterOrEqual",
		"body": [
			"AvatarValueIsGreaterOrEqual",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable (default: VariableName).",
			"\tValue = ${3:0}                 -- The value to compare against (default: 0).",
			"}"
		],
		"description": [
			"Checks whether the specified avatar variable is greater than or equal to the given value.",
			"Useful for thresholds where meeting or exceeding a requirement is acceptable (e.g. level caps, resource minimums, or progress markers)."
		]
	},
	"AvatarValueIsGreaterOrEqualThanVariable": {
		"prefix": "SF2.Condition.AvatarValueIsGreaterOrEqualThanVariable",
		"body": [
			"AvatarValueIsGreaterOrEqualThanVariable",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable to compare (default: VariableName).",
			"\tPlayer = \"${3:pl_Human}\",   -- The player name for the comparison variable (default: pl_Human).",
			"\tVariable = \"${4:OtherVar}\"   -- The name of the comparison avatar variable (default: OtherVar).",
			"}"
		],
		"description": [
			"Checks whether one avatar variable is greater than or equal to another variable.",
			"Useful for comparing dynamic values, such as resource counters, quest variables, or progression states."
		]
	},
	"AvatarValueIsGreaterThanVariable": {
		"prefix": "SF2.Condition.AvatarValueIsGreaterThanVariable",
		"body": [
			"AvatarValueIsGreaterThanVariable",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable to compare (default: VariableName).",
			"\tPlayer = \"${3:pl_Human}\",   -- The player name for the comparison variable (default: pl_Human).",
			"\tVariable = \"${4:OtherVar}\"   -- The name of the comparison avatar variable (default: OtherVar).",
			"}"
		],
		"description": [
			"Checks if one avatar variable is strictly greater than another variable.",
			"Useful when enforcing progress milestones, thresholds, or superiority between two tracked values."
		]
	},
	"AvatarValueIsLess": {
		"prefix": "SF2.Condition.AvatarValueIsLess",
		"body": [
			"AvatarValueIsLess",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable to check (default: VariableName).",
			"\tValue = ${3:0}                 -- The value to compare against (default: 0).",
			"}"
		],
		"description": [
			"Checks if the avatar variable is less than the given value.",
			"Useful for detecting when a variable drops below a certain threshold, such as health, resources, or progress markers."
		]
	},
	"AvatarValueIsLessOrEqual": {
		"prefix": "SF2.Condition.AvatarValueIsLessOrEqual",
		"body": [
			"AvatarValueIsLessOrEqual",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable to check (default: VariableName).",
			"\tValue = ${3:0}                 -- The value to compare against (default: 0).",
			"}"
		],
		"description": [
			"Checks if the avatar variable is less than or equal to the given value.",
			"Often used to validate caps, limits, or minimum thresholds where the variable should not exceed a certain value."
		]
	},
	"AvatarValueIsLessOrEqualThanVariable": {
		"prefix": "SF2.Condition.AvatarValueIsLessOrEqualThanVariable",
		"body": [
			"AvatarValueIsLessOrEqualThanVariable",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable to check (default: VariableName).",
			"\tVariable = \"${3:OtherVar}\"   -- The other avatar variable to compare against (default: OtherVar).",
			"}"
		],
		"description": [
			"Checks if the avatar variable is less than or equal to another avatar variable.",
			"Useful when comparing dynamic values against each other instead of fixed numbers."
		]
	},
	"AvatarValueIsLessThanVariable": {
		"prefix": "SF2.Condition.AvatarValueIsLessThanVariable",
		"body": [
			"AvatarValueIsLessThanVariable",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable to check (default: VariableName).",
			"\tVariable = \"${3:OtherVar}\"   -- The other avatar variable to compare against (default: OtherVar).",
			"}"
		],
		"description": [
			"Checks if the avatar variable is less than another avatar variable.",
			"Handy when comparing avatar stats or resources against each other."
		]
	},
	"AvatarValueIsNotEqual": {
		"prefix": "SF2.Condition.AvatarValueIsNotEqual",
		"body": [
			"AvatarValueIsNotEqual",
			"{",
			"\tPlayer = \"${1:pl_Human}\",   -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The name of the avatar variable to check (default: VariableName).",
			"\tValue = ${3:0}                 -- The value to compare against (default: 0).",
			"}"
		],
		"description": [
			"Checks if the avatar variable does NOT equal the given value.",
			"Useful when you want to ensure a variable differs from a specific state."
		]
	},
	"AvatarValueIsNotEqualToVariable": {
		"prefix": "SF2.Condition.AvatarValueIsNotEqualToVariable",
		"body": [
			"AvatarValueIsNotEqualToVariable",
			"{",
			"\tPlayer = \"${1:pl_Human}\",    -- The player name as set in the team setup (default: pl_Human).",
			"\tName = \"${2:VariableName}\",  -- The first avatar variable to check.",
			"\tVariable = \"${3:OtherVar}\"   -- The other avatar variable to compare against.",
			"}"
		],
		"description": [
			"Checks if the avatar variable does NOT equal another avatar variable.",
			"Useful when comparing two variables to ensure they are different."
		]
	},
	"BuildingHasHealth": {
		"prefix": "SF2.Condition.BuildingHasHealth",
		"body": [
			"BuildingHasHealth",
			"{",
			"\tTag = \"${1:ScriptTag}\",      -- The script tag of the building.",
			"\tPercent = ${2:50}             -- Health percentage (0–100) relative to max HP.",
			"}"
		],
		"description": [
			"Checks if the building has at least the given percentage of health.",
			"Use BuildingIsAlive instead of setting Percent = 0 to check if it has been destroyed."
		]
	},
	"BuildingHasNotHealth": {
		"prefix": "SF2.Condition.BuildingHasNotHealth",
		"body": [
			"BuildingHasNotHealth",
			"{",
			"\tTag = \"${1:ScriptTag}\",      -- The script tag of the building.",
			"\tPercent = ${2:50}             -- Health percentage (0–100) relative to max HP.",
			"}"
		],
		"description": [
			"Negated: Checks if the building does not have the specified percentage of health.",
			"Use BuildingIsAlive instead of comparing with 0% when checking destruction state."
		]
	},
	"BuildingIsAboutToBeBuilt": {
		"prefix": "SF2.Condition.BuildingIsAboutToBeBuilt",
		"body": [
			"BuildingIsAboutToBeBuilt",
			"{",
			"\tBuildingId = ${1:0}    -- The building ID as defined in the database.",
			"}"
		],
		"description": [
			"Checks if a specific building is currently selected at the mouse cursor,",
			"and the player is in the process of choosing a construction site."
		]
	},
	"BuildingIsAlive": {
		"prefix": "SF2.Condition.BuildingIsAlive",
		"body": [
			"BuildingIsAlive",
			"{",
			"\tTag = \"${1:MyBuilding}\"    -- Script tag of the building to check.",
			"}"
		],
		"description": [
			"Checks if the building with the given ScriptTag is still alive (i.e., not destroyed and still existing in the world)."
		]
	},
	"BuildingIsDead": {
		"prefix": "SF2.Condition.BuildingIsDead",
		"body": [
			"BuildingIsDead",
			"{",
			"\tTag = \"${1:MyBuilding}\"    -- Script tag of the building to check.",
			"}"
		],
		"description": [
			"Negated condition: checks if the building with the given ScriptTag is not alive (i.e., destroyed or no longer existing)."
		]
	},
	"BuildingIsInEntityRange": {
		"prefix": "SF2.Condition.BuildingIsInEntityRange",
		"body": [
			"BuildingIsInEntityRange",
			"{",
			"\tTag = \"${1:SourceBuilding}\"        -- Script tag of the building.",
			"\tTargetTag = \"${2:TargetEntity}\"   -- Script tag of the target entity.",
			"\tRange = ${3:10}                     -- Radius in grid units.",
			"}"
		],
		"description": [
			"Checks if a building with the given ScriptTag is within a certain range of another entity.",
			"Useful for proximity checks such as detecting nearby allies, enemies, or interactive objects."
		]
	},
	"BuildingIsInRange": {
		"prefix": "SF2.Condition.BuildingIsInRange",
		"body": [
			"BuildingIsInRange",
			"{",
			"\tTag = \"${1:BuildingTag}\"    -- Script tag of the building.",
			"\tRange = ${2:10}              -- Radius in grid units.",
			"\tX = ${3:100}                 -- X coordinate (world coordinates).",
			"\tY = ${4:100}                 -- Y coordinate (world coordinates).",
			"}"
		],
		"description": [
			"Checks whether a building is within a given radius of specified world coordinates.",
			"Primarily useful for mechanics involving movable buildings or special cases like dynamic grids or wormholes."
		]
	},
	"BuildingIsInRangeToEntity": {
		"prefix": "SF2.Condition.BuildingIsInRangeToEntity",
		"body": [
			"BuildingIsInRangeToEntity",
			"{",
			"\tTag = \"${1:BuildingTag}\"        -- Script tag of the building.",
			"\tTargetTag = \"${2:TargetTag}\"   -- Script tag of the target entity.",
			"\tRange = ${3:10}                  -- Radius in grid units.",
			"}"
		],
		"description": [
			"Checks if a building is within a given range of another entity.",
			"The condition is symmetrical: the building and the entity are both considered for proximity."
		]
	},
	"BuildingIsInRect": {
		"prefix": "SF2.Condition.BuildingIsInRect",
		"body": [
			"BuildingIsInRect",
			"{",
			"\tTag = \"${1:BuildingTag}\"   -- Script tag of the building.",
			"\tTop = ${2:0}                 -- Top Y coordinate of the rectangle.",
			"\tLeft = ${3:0}                -- Left X coordinate of the rectangle.",
			"\tBottom = ${4:100}            -- Bottom Y coordinate of the rectangle.",
			"\tRight = ${5:100}             -- Right X coordinate of the rectangle.",
			"}"
		],
		"description": [
			"Checks if a building is inside the specified rectangular area.",
			"Requires movable buildings to be meaningful (or special mechanics like shifting coordinates or wormholes)."
		]
	},
	"BuildingIsNotAboutToBeBuilt": {
		"prefix": "SF2.Condition.BuildingIsNotAboutToBeBuilt",
		"body": [
			"BuildingIsNotAboutToBeBuilt",
			"{",
			"\tBuildingId = ${1:0}   -- Building ID from the database.",
			"}"
		],
		"description": [
			"Negated: Checks if a specific building is *not* currently attached to the cursor while the player is trying to find a construction spot."
		]
	},
	"BuildingIsNotInEntityRange": {
		"prefix": "SF2.Condition.BuildingIsNotInEntityRange",
		"body": [
			"BuildingIsNotInEntityRange",
			"{",
			"\tTag = \"${1:ScriptTag}\",        -- A script tag.",
			"\tTargetTag = \"${2:TargetTag}\", -- The script tag of the target.",
			"\tRange = ${3:0}                  -- The radius of the check in grid points.",
			"}"
		],
		"description": [
			"Negated: Checks if a building is *not* within the specified range of another entity."
		]
	},
	"BuildingIsNotInRange": {
		"prefix": "SF2.Condition.BuildingIsNotInRange",
		"body": [
			"BuildingIsNotInRange",
			"{",
			"\tTag = \"${1:ScriptTag}\",  -- A script tag.",
			"\tRange = ${2:0},           -- The radius of the check in grid points.",
			"\tX = ${3:0},               -- The X coordinate in world coordinates.",
			"\tY = ${4:0}                -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Checks if a building is *not* within the given range of the specified coordinates."
		]
	},
	"BuildingIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.BuildingIsNotInRangeToEntity",
		"body": [
			"BuildingIsNotInRangeToEntity",
			"{",
			"\tTag = \"${1:ScriptTag}\",       -- A script tag.",
			"\tTargetTag = \"${2:TargetTag}\", -- The script tag of the target entity.",
			"\tRange = ${3:0}                  -- The radius of the check in grid points.",
			"}"
		],
		"description": [
			"Negated: Checks if a building is *not* within the specified range of another entity."
		]
	},
	"BuildingIsNotInRect": {
		"prefix": "SF2.Condition.BuildingIsNotInRect",
		"body": [
			"BuildingIsNotInRect",
			"{",
			"\tTag = \"${1:ScriptTag}\", -- A script tag.",
			"\tTop = ${2:0},            -- The top coordinate of the rectangle.",
			"\tLeft = ${3:0},           -- The left coordinate of the rectangle.",
			"\tBottom = ${4:0},         -- The bottom coordinate of the rectangle.",
			"\tRight = ${5:0}           -- The right coordinate of the rectangle.",
			"}"
		],
		"description": [
			"Negated: Checks if a building is NOT located inside the specified rectangle."
		]
	},
	"BuildingIsNotSelected": {
		"prefix": "SF2.Condition.BuildingIsNotSelected",
		"body": [
			"BuildingIsNotSelected",
			"{",
			"\tBuildingId = ${1:BuildingId} -- The building ID from the database.",
			"}"
		],
		"description": [
			"Negated: Checks if a specific building is NOT selected."
		]
	},
	"BuildingIsSelected": {
		"prefix": "SF2.Condition.BuildingIsSelected",
		"body": [
			"BuildingIsSelected",
			"{",
			"\tBuildingId = ${1:BuildingId} -- The building ID from the database.",
			"}"
		],
		"description": [
			"Checks if a specific building is selected."
		]
	},
	"BuildingRallyPointIsInRange": {
		"prefix": "SF2.Condition.BuildingRallyPointIsInRange",
		"body": [
			"BuildingRallyPointIsInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\" -- The player name as set in the team setup.",
			"\tBuildingId = ${2:BuildingId} -- The building ID from the database.",
			"\tX = ${3:X} -- The X coordinate in world coordinates.",
			"\tY = ${4:Y} -- The Y coordinate in world coordinates.",
			"\tRange = ${5:Range} -- The radius of the query in grid points.",
			"}"
		],
		"description": [
			"Checks if the rally point of a building of the specified type is within range of the given coordinates."
		]
	},
	"BuildingRallyPointIsNotInRange": {
		"prefix": "SF2.Condition.BuildingRallyPointIsNotInRange",
		"body": [
			"BuildingRallyPointIsNotInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\", -- The player name as set in the team setup.",
			"\tBuildingId = ${2:BuildingId}, -- The building ID from the database.",
			"\tX = ${3:50}, -- The X coordinate in world coordinates.",
			"\tY = ${4:50}, -- The Y coordinate in world coordinates.",
			"\tRange = ${5:50} -- The radius of the query in grid points.",
			"}"
		],
		"description": [
			"Negated: Checks if the rally point of a building of the specified type is NOT within range of the given coordinates."
		]
	},
	"CoopPlayerIsNotPlaying": {
		"prefix": "SF2.Condition.CoopPlayerIsNotPlaying",
		"body": [
			"CoopPlayerIsNotPlaying",
			"{",
			"\tPlayer = \"${1:pl_Human}\" -- The player name as set in the team setup.",
			"}"
		],
		"description": [
			"Negated: Checks if the specified player is NOT connected (regarding multiplayer matches)."
		]
	},
	"CoopPlayerIsPlaying": {
		"prefix": "SF2.Condition.CoopPlayerIsPlaying",
		"body": [
			"CoopPlayerIsPlaying",
			"{",
			"\tPlayer = \"${1:pl_Human}\" -- The player name as set in the team setup.",
			"}"
		],
		"description": [
			"Checks if the specified player is connected (regarding multiplayer matches)."
		]
	},
	"CutsceneFiguresAreAlive": {
		"prefix": "SF2.Condition.CutsceneFiguresAreAlive",
		"body": [
			"CutsceneFiguresAreAlive",
			"{",
			"}"
		],
		"description": [
			"Are all cutscene figures registered in the render list alive?"
		]
	},
	"CutsceneFiguresAreNotAlive": {
		"prefix": "SF2.Condition.CutsceneFiguresAreNotAlive",
		"body": [
			"CutsceneFiguresAreNotAlive",
			"{",
			"}"
		],
		"description": [
			"Negated: Are all cutscene figures registered in the render list alive?"
		]
	},
	"CutsceneSayIsDone": {
		"prefix": "SF2.Condition.CutsceneSayIsDone",
		"body": [
			"CutsceneSayIsDone",
			"{",
			"}"
		],
		"description": [
			"Is the voice output of the last CutsceneSay finished?"
		]
	},
	"CutsceneSayIsNotDone": {
		"prefix": "SF2.Condition.CutsceneSayIsNotDone",
		"body": [
			"CutsceneSayIsNotDone",
			"{",
			"}"
		],
		"description": [
			"Negated: Is the voice output of the last CutsceneSay finished?"
		]
	},
	"DebugQuestionNo": {
		"prefix": "SF2.Condition.DebugQuestionNo",
		"body": [
			"DebugQuestionNo",
			"{",
			"\tCaption = \"${1:Script Debug Message}\", -- The title line above a DebugMessage/QuestionBox.",
			"\tQuestion = \"${2:Your question here}\"    -- The question inside a DebugQuestionBox.",
			"}"
		],
		"description": [
			"Negated: Displays a Windows message box",
			"Used to ask a Yes/No question"
		]
	},
	"DebugQuestionYes": {
		"prefix": "SF2.Condition.DebugQuestionYes",
		"body": [
			"DebugQuestionYes",
			"{",
			"\tCaption = \"${1:Script Debug Message}\", -- The title line above a DebugMessage/QuestionBox.",
			"\tQuestion = \"${2:Your question here}\"    -- The question inside a DebugQuestionBox.",
			"}"
		],
		"description": [
			"Displays a Windows message box",
			"Used to ask a Yes/No question"
		]
	},
	"DialogEquipmentIsNotVisible": {
		"prefix": "SF2.Condition.DialogEquipmentIsNotVisible",
		"body": [
			"DialogEquipmentIsNotVisible",
			"{",
			"}"
		],
		"description": [
			"Negated: Checks if the mentioned in-game equipment menu is visible"
		]
	},
	"DialogEquipmentIsVisible": {
		"prefix": "SF2.Condition.DialogEquipmentIsVisible",
		"body": [
			"DialogEquipmentIsVisible",
			"{",
			"}"
		],
		"description": [
			"Checks if the mentioned in-game equipment menu is visible"
		]
	},
	"DialogHeroEquipmentIsNotSelected": {
		"prefix": "SF2.Condition.DialogHeroEquipmentIsNotSelected",
		"body": [
			"DialogHeroEquipmentIsNotSelected",
			"{",
			"\tHero = ${1:0} -- The ID 1 to 5 of a hero, 0 for the avatar.",
			"}"
		],
		"description": [
			"Negated: Checks which slot (Avatar + Heroes) is selected",
			"Used in the equipment dialog"
		]
	},
	"DialogHeroEquipmentIsSelected": {
		"prefix": "SF2.Condition.DialogHeroEquipmentIsSelected",
		"body": [
			"DialogHeroEquipmentIsSelected",
			"{",
			"\tHero = ${1:0} -- The ID 1 to 5 of a hero, 0 for the avatar.",
			"}"
		],
		"description": [
			"Checks which slot (Avatar + Heroes) is selected",
			"Used in the equipment dialog"
		]
	},
	"DialogInventoryIsNotVisible": {
		"prefix": "SF2.Condition.DialogInventoryIsNotVisible",
		"body": [
			"DialogInventoryIsNotVisible",
			"{",
			"}"
		],
		"description": [
			"Negated: Checks if the mentioned in-game inventory menu is visible"
		]
	},
	"DialogInventoryIsVisible": {
		"prefix": "SF2.Condition.DialogInventoryIsVisible",
		"body": [
			"DialogInventoryIsVisible",
			"{",
			"}"
		],
		"description": [
			"Checks if the mentioned in-game inventory menu is visible"
		]
	},
	"DialogLootIsNotVisible": {
		"prefix": "SF2.Condition.DialogLootIsNotVisible",
		"body": [
			"DialogLootIsNotVisible",
			"{",
			"}"
		],
		"description": [
			"Negated: Checks if the mentioned in-game loot menu is visible"
		]
	},
	"DialogLootIsVisible": {
		"prefix": "SF2.Condition.DialogLootIsVisible",
		"body": [
			"DialogLootIsVisible",
			"{",
			"}"
		],
		"description": [
			"Checks if the mentioned in-game loot menu is visible"
		]
	},
	"DialogQuestBookDescriptionIsNotVisible": {
		"prefix": "SF2.Condition.DialogQuestBookDescriptionIsNotVisible",
		"body": [
			"DialogQuestBookDescriptionIsNotVisible",
			"{",
			"}"
		],
		"description": [
			"Negated: Checks if the mentioned in-game quest book description menu is visible"
		]
	},
	"DialogQuestBookDescriptionIsVisible": {
		"prefix": "SF2.Condition.DialogQuestBookDescriptionIsVisible",
		"body": [
			"DialogQuestBookDescriptionIsVisible",
			"{",
			"}"
		],
		"description": [
			"Checks if the mentioned in-game quest book description menu is visible"
		]
	},
	"DialogQuestBookIsNotVisible": {
		"prefix": "SF2.Condition.DialogQuestBookIsNotVisible",
		"body": [
			"DialogQuestBookIsNotVisible",
			"{",
			"}"
		],
		"description": [
			"Negated: Checks if the mentioned in-game quest book menu is visible"
		]
	},
	"DialogQuestBookIsVisible": {
		"prefix": "SF2.Condition.DialogQuestBookIsVisible",
		"body": [
			"DialogQuestBookIsVisible",
			"{",
			"}"
		],
		"description": [
			"Checks if the mentioned in-game quest book menu is visible"
		]
	},
	"DialogSkillTreeIsNotVisible": {
		"prefix": "SF2.Condition.DialogSkillTreeIsNotVisible",
		"body": [
			"DialogSkillTreeIsNotVisible",
			"{",
			"}"
		],
		"description": [
			"Negated: Checks if the mentioned in-game skill tree menu is visible"
		]
	},
	"DialogSkillTreeIsVisible": {
		"prefix": "SF2.Condition.DialogSkillTreeIsVisible",
		"body": [
			"DialogSkillTreeIsVisible",
			"{",
			"}"
		],
		"description": [
			"Checks if the mentioned in-game skill tree menu is visible"
		]
	},
	"DialogSpellBookIsNotVisible": {
		"prefix": "SF2.Condition.DialogSpellBookIsNotVisible",
		"body": [
			"DialogSpellBookIsNotVisible",
			"{",
			"}"
		],
		"description": [
			"Negated: Checks if the mentioned in-game spell book menu is visible"
		]
	},
	"DialogSpellBookIsVisible": {
		"prefix": "SF2.Condition.DialogSpellBookIsVisible",
		"body": [
			"DialogSpellBookIsVisible",
			"{",
			"}"
		],
		"description": [
			"Checks if the mentioned in-game spell book menu is visible"
		]
	},
	"EntityFlagIsFalse": {
		"prefix": "SF2.Condition.EntityFlagIsFalse",
		"body": [
			"EntityFlagIsFalse",
			"{",
			"\tName = \"${1:EntityVariable}\" -- The name of the entity variable.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity variable is true"
		]
	},
	"EntityFlagIsTrue": {
		"prefix": "SF2.Condition.EntityFlagIsTrue",
		"body": [
			"EntityFlagIsTrue",
			"{",
			"\tName = \"${1:EntityVariable}\" -- The name of the entity variable.",
			"}"
		],
		"description": [
			"Checks if the entity variable is true"
		]
	},
	"EntityIsExisting": {
		"prefix": "SF2.Condition.EntityIsExisting",
		"body": [
			"EntityIsExisting",
			"{",
			"\tTag = \"${1:ScriptTag}\" -- A script tag.",
			"}"
		],
		"description": [
			"Checks if an entity with this script tag exists",
			"Works with objects too (e.g., a loot chest that disappears after being looted)",
			"Useful to verify whether a ScriptTag is present on the map"
		]
	},
	"EntityIsNotExisting": {
		"prefix": "SF2.Condition.EntityIsNotExisting",
		"body": [
			"EntityIsNotExisting",
			"{",
			"\tTag = \"${1:ScriptTag}\" -- A script tag.",
			"}"
		],
		"description": [
			"Negated: Checks if an entity with this script tag does not exist",
			"Useful to confirm the absence of a ScriptTag on the map"
		]
	},
	"EntityTimerIsElapsed": {
		"prefix": "SF2.Condition.EntityTimerIsElapsed",
		"body": [
			"EntityTimerIsElapsed",
			"{",
			"\tName = \"${1:EntityTimer}\" -- The name of the entity timer.",
			"\tSeconds = ${2:10}          -- Number of seconds.",
			"}"
		],
		"description": [
			"Checks if the entity timer has elapsed"
		]
	},
	"EntityTimerIsNotElapsed": {
		"prefix": "SF2.Condition.EntityTimerIsNotElapsed",
		"body": [
			"EntityTimerIsNotElapsed",
			"{",
			"\tName = \"${1:EntityTimer}\" -- The name of the entity timer.",
			"\tSeconds = ${2:10}          -- Number of seconds.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity timer has not yet elapsed"
		]
	},
	"EntityValueIsEqual": {
		"prefix": "SF2.Condition.EntityValueIsEqual",
		"body": [
			"EntityValueIsEqual",
			"{",
			"\tName = \"${1:EntityVariable}\" -- The name of the entity variable.",
			"\tValue = ${2:0}                -- The value of the variable.",
			"}"
		],
		"description": [
			"Checks if the entity variable has the specified value"
		]
	},
	"EntityValueIsEqualToVariable": {
		"prefix": "SF2.Condition.EntityValueIsEqualToVariable",
		"body": [
			"EntityValueIsEqualToVariable",
			"{",
			"\tName = \"${1:EntityVariable}\"     -- The name of the entity variable.",
			"\tVariable = \"${2:OtherVariable}\" -- The name of the entity variable to compare with.",
			"}"
		],
		"description": [
			"Checks if the entity variable is equal to another entity variable"
		]
	},
	"EntityValueIsGreater": {
		"prefix": "SF2.Condition.EntityValueIsGreater",
		"body": [
			"EntityValueIsGreater",
			"{",
			"\tName = \"${1:EntityVariable}\" -- The name of the entity variable.",
			"\tValue = ${2:0}                -- The value to compare against.",
			"}"
		],
		"description": [
			"Checks if the entity variable is greater than the specified value"
		]
	},
	"EntityValueIsGreaterOrEqual": {
		"prefix": "SF2.Condition.EntityValueIsGreaterOrEqual",
		"body": [
			"EntityValueIsGreaterOrEqual",
			"{",
			"\tName = \"${1:EntityVariable}\" -- The name of the entity variable.",
			"\tValue = ${2:0}                -- The value to compare against.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity variable is greater than or equal to the specified value"
		]
	},
	"EntityValueIsGreaterOrEqualThanVariable": {
		"prefix": "SF2.Condition.EntityValueIsGreaterOrEqualThanVariable",
		"body": [
			"EntityValueIsGreaterOrEqualThanVariable",
			"{",
			"\tName = \"${1:EntityVariable}\"     -- The name of the entity variable.",
			"\tVariable = \"${2:OtherVariable}\" -- The name of the entity variable to compare with.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity variable is greater than or equal to another entity variable"
		]
	},
	"EntityValueIsGreaterThanVariable": {
		"prefix": "SF2.Condition.EntityValueIsGreaterThanVariable",
		"body": [
			"EntityValueIsGreaterThanVariable",
			"{",
			"\tName = \"${1:EntityVariable}\"     -- The name of the entity variable.",
			"\tVariable = \"${2:OtherVariable}\" -- The name of the entity variable to compare with.",
			"}"
		],
		"description": [
			"Checks if the entity variable is greater than another entity variable"
		]
	},
	"EntityValueIsLess": {
		"prefix": "SF2.Condition.EntityValueIsLess",
		"body": [
			"EntityValueIsLess",
			"{",
			"\tName = \"${1:EntityVariable}\" -- The name of the entity variable.",
			"\tValue = ${2:0}                -- The value to compare against.",
			"}"
		],
		"description": [
			"Checks if the entity variable is less than the specified value"
		]
	},
	"EntityValueIsLessOrEqual": {
		"prefix": "SF2.Condition.EntityValueIsLessOrEqual",
		"body": [
			"EntityValueIsLessOrEqual",
			"{",
			"\tName = \"${1:EntityVariable}\" -- The name of the entity variable.",
			"\tValue = ${2:0}                -- The value to compare against.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity variable is less than or equal to the specified value"
		]
	},
	"EntityValueIsLessOrEqualThanVariable": {
		"prefix": "SF2.Condition.EntityValueIsLessOrEqualThanVariable",
		"body": [
			"EntityValueIsLessOrEqualThanVariable",
			"{",
			"\tName = \"${1:EntityVariable}\"     -- The name of the entity variable.",
			"\tVariable = \"${2:OtherVariable}\" -- The name of the entity variable to compare with.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity variable is less than or equal to another entity variable"
		]
	},
	"EntityValueIsLessThanVariable": {
		"prefix": "SF2.Condition.EntityValueIsLessThanVariable",
		"body": [
			"EntityValueIsLessThanVariable",
			"{",
			"\tName = \"${1:EntityVariable}\"     -- The name of the entity variable.",
			"\tVariable = \"${2:OtherVariable}\" -- The name of the entity variable to compare with.",
			"}"
		],
		"description": [
			"Checks if the entity variable is less than another entity variable"
		]
	},
	"EntityValueIsNotEqual": {
		"prefix": "SF2.Condition.EntityValueIsNotEqual",
		"body": [
			"EntityValueIsNotEqual",
			"{",
			"\tName = \"${1:EntityVariable}\" -- The name of the entity variable.",
			"\tValue = ${2:0}                -- The value of the variable.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity variable is not equal to the specified value"
		]
	},
	"EntityValueIsNotEqualToVariable": {
		"prefix": "SF2.Condition.EntityValueIsNotEqualToVariable",
		"body": [
			"EntityValueIsNotEqualToVariable",
			"{",
			"\tName = \"${1:EntityVariable}\"     -- The name of the entity variable.",
			"\tVariable = \"${2:OtherVariable}\" -- The name of the entity variable to compare with.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity variable is not equal to another entity variable"
		]
	},
	"FigureHasHate": {
		"prefix": "SF2.Condition.FigureHasHate",
		"body": [
			"FigureHasHate",
			"{",
			"\tTag = \"${1:ScriptTag}\" -- A script tag.",
			"}"
		],
		"description": [
			"Checks if a figure has taken damage from an enemy",
			"Returns true only if the figure actually suffered damage",
			"Does not return true if the figure only destroys a building (unless it is a tower)",
			"See also: FigureIsInCombat"
		]
	},
	"FigureHasHealth": {
		"prefix": "SF2.Condition.FigureHasHealth",
		"body": [
			"FigureHasHealth",
			"{",
			"\tTag = \"${1:ScriptTag}\",  -- A script tag.",
			"\tPercent = ${2:50}         -- A percentage value between 0 and 100.",
			"}"
		],
		"description": [
			"Checks if a figure has a certain amount of health",
			"Evaluates whether the figure has the specified percentage of hitpoints based on the maximum value",
			"Note: Do not use Percent = 0 to check if a figure is dead. Use FigureIsAlive instead."
		]
	},
	"FigureHasMana": {
		"prefix": "SF2.Condition.FigureHasMana",
		"body": [
			"FigureHasMana",
			"{",
			"\tTag = \"${1:ScriptTag}\",  -- A script tag.",
			"\tPercent = ${2:50}         -- A percentage value between 0 and 100.",
			"}"
		],
		"description": [
			"Checks if a figure has a certain amount of mana",
			"Evaluates whether the figure has the specified percentage of mana based on the maximum value"
		]
	},
	"FigureHasNotHate": {
		"prefix": "SF2.Condition.FigureHasNotHate",
		"body": [
			"FigureHasNotHate",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Negated: Checks if a figure has not taken damage from an enemy"
		]
	},
	"FigureHasNotHealth": {
		"prefix": "SF2.Condition.FigureHasNotHealth",
		"body": [
			"FigureHasNotHealth",
			"{",
			"\tTag = \"${1:ScriptTag}\",  -- A script tag.",
			"\tPercent = ${2:50}         -- A percentage value between 0 and 100.",
			"}"
		],
		"description": [
			"Negated: Checks if a figure does not have a certain amount of health",
			"Evaluates whether the figure lacks the specified percentage of hitpoints based on the maximum value"
		]
	},
	"FigureHasNotMana": {
		"prefix": "SF2.Condition.FigureHasNotMana",
		"body": [
			"FigureHasNotMana",
			"{",
			"\tTag = \"${1:ScriptTag}\",  -- A script tag.",
			"\tPercent = ${2:50}         -- A percentage value between 0 and 100.",
			"}"
		],
		"description": [
			"Negated: Checks if a figure does not have a certain amount of mana",
			"Evaluates whether the figure lacks the specified percentage of mana based on the maximum value"
		]
	},
	"FigureIsAlive": {
		"prefix": "SF2.Condition.FigureIsAlive",
		"body": [
			"FigureIsAlive",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Checks if the entity with the given script tag is alive (exists).",
			"Evaluates whether the figure is still alive.",
			"A figure is considered dead if:",
			"- it died in combat,",
			"- it was killed via the FigureKill script command,",
			"- it was removed from the map using the FigureVanish script command,",
			"- it is still waiting to spawn because of a SpawnOnlyWhenEvent,",
			"- or there is no entity with the given script tag on the map (e.g., a typo in the tag)."
		]
	},
	"FigureIsDead": {
		"prefix": "SF2.Condition.FigureIsDead",
		"body": [
			"FigureIsDead",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Negated: Checks if the entity with the given script tag is not alive (non-existent or dead).",
			"A figure is considered dead if:",
			"- it died in combat,",
			"- it was killed via the FigureKill script command,",
			"- it was removed from the map using the FigureVanish script command,",
			"- it is still waiting to spawn because of a SpawnOnlyWhenEvent,",
			"- or there is no entity with the given script tag on the map (e.g., a typo in the tag)."
		]
	},
	"FigureIsFlying": {
		"prefix": "SF2.Condition.FigureIsFlying",
		"body": [
			"FigureIsFlying",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Checks if the specified figure is a flying unit."
		]
	},
	"FigureIsFollowing": {
		"prefix": "SF2.Condition.FigureIsFollowing",
		"body": [
			"FigureIsFollowing",
			"{",
			"\tTag = \"${1:ScriptTag}\",        -- A script tag.",
			"\tTargetTag = \"${2:TargetTag}\"  -- The script tag of the target.",
			"}"
		],
		"description": [
			"Checks if this figure is following the specified target figure."
		]
	},
	"FigureIsIdle": {
		"prefix": "SF2.Condition.FigureIsIdle",
		"body": [
			"FigureIsIdle",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Checks if the figure is currently idle (standing still and doing nothing).",
			"A figure is considered idle when it is not moving, fighting, or performing any job.",
			"Likely idle during dialogue sequences, though this is not confirmed.",
			"A figure is definitely not idle if:",
			"- It is moving somewhere.",
			"- It is fighting or on the way to combat.",
			"- It is dead (contrary to the idea of 'eternal rest').",
			"- It is performing a non-idle job."
		]
	},
	"FigureIsInCombat": {
		"prefix": "SF2.Condition.FigureIsInCombat",
		"body": [
			"FigureIsInCombat",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Checks if the figure is engaged in combat or moving towards an enemy.",
			"Returns true once the figure has entered combat or has spotted an enemy.",
			"This is equivalent to the old HasAggro query."
		]
	},
	"FigureIsInEntityRange": {
		"prefix": "SF2.Condition.FigureIsInEntityRange",
		"body": [
			"FigureIsInEntityRange",
			"{",
			"\tTag = \"${1:ScriptTag}\"        -- A script tag for the figure.",
			"\tTargetTag = \"${2:TargetTag}\"  -- The script tag of the target entity.",
			"\tRange = ${3:10}                 -- The radius of the query in grid points.",
			"}"
		],
		"description": [
			"Checks if a figure is within a certain range of another entity.",
			"Useful for detecting proximity or triggering interactions based on distance."
		]
	},
	"FigureIsInRange": {
		"prefix": "SF2.Condition.FigureIsInRange",
		"body": [
			"FigureIsInRange",
			"{",
			"\tTag = \"${1:ScriptTag}\",        -- A script tag for the figure.",
			"\tRange = ${2:10},                -- The radius of the query in grid points.",
			"\tX = ${3:0},                     -- The X world coordinate.",
			"\tY = ${4:0}                      -- The Y world coordinate.",
			"}"
		],
		"description": [
			"Checks if a figure is near the given coordinates.",
			"Evaluates whether the figure is within the specified range around the provided X and Y world coordinates."
		]
	},
	"FigureIsInRangeToEntity": {
		"prefix": "SF2.Condition.FigureIsInRangeToEntity",
		"body": [
			"FigureIsInRangeToEntity",
			"{",
			"\tTag = \"${1:ScriptTag}\",        -- A script tag for the figure.",
			"\tTargetTag = \"${2:TargetTag}\", -- The script tag of the target entity.",
			"\tRange = ${3:10}                  -- The radius of the query in grid points.",
			"}"
		],
		"description": [
			"Checks if a figure is near another entity.",
			"Evaluates whether the figure is within the given range of the target entity."
		]
	},
	"FigureIsInRect": {
		"prefix": "SF2.Condition.FigureIsInRect",
		"body": [
			"FigureIsInRect",
			"{",
			"\tTag = \"${1:ScriptTag}\",  -- A script tag for the figure.",
			"\tTop = ${2:0},              -- The top coordinate of the rectangle.",
			"\tLeft = ${3:0},             -- The left coordinate of the rectangle.",
			"\tBottom = ${4:100},         -- The bottom coordinate of the rectangle.",
			"\tRight = ${5:100}           -- The right coordinate of the rectangle.",
			"}"
		],
		"description": [
			"Checks if a figure is inside a rectangle.",
			"Evaluates whether the figure is located within the given rectangular area."
		]
	},
	"FigureIsNotFlying": {
		"prefix": "SF2.Condition.FigureIsNotFlying",
		"body": [
			"FigureIsNotFlying",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Negated: Is the specified figure a flying unit?"
		]
	},
	"FigureIsNotFollowing": {
		"prefix": "SF2.Condition.FigureIsNotFollowing",
		"body": [
			"FigureIsNotFollowing",
			"{",
			"\tTag = \"${1:ScriptTag}\",        -- A script tag.",
			"\tTargetTag = \"${2:TargetTag}\"  -- The script tag of the target.",
			"}"
		],
		"description": [
			"Negated: Is this figure following the other figure?"
		]
	},
	"FigureIsNotIdle": {
		"prefix": "SF2.Condition.FigureIsNotIdle",
		"body": [
			"FigureIsNotIdle",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Negated: Is the figure currently idle (= just standing around)?"
		]
	},
	"FigureIsNotInCombat": {
		"prefix": "SF2.Condition.FigureIsNotInCombat",
		"body": [
			"FigureIsNotInCombat",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Negated: Is the figure engaged in combat or running towards an enemy?"
		]
	},
	"FigureIsNotInEntityRange": {
		"prefix": "SF2.Condition.FigureIsNotInEntityRange",
		"body": [
			"FigureIsNotInEntityRange",
			"{",
			"\tTag = \"${1:ScriptTag}\",        -- A script tag.",
			"\tTargetTag = \"${2:TargetTag}\", -- The script tag of the target.",
			"\tRange = ${3:0}                  -- The radius of the query in grid points.",
			"}"
		],
		"description": [
			"Negated: Is the figure near the other entity?"
		]
	},
	"FigureIsNotInRange": {
		"prefix": "SF2.Condition.FigureIsNotInRange",
		"body": [
			"FigureIsNotInRange",
			"{",
			"\tTag = \"${1:ScriptTag}\",  -- A script tag.",
			"\tRange = ${2:0},           -- The radius of the query in grid points.",
			"\tX = ${3:0},               -- The X coordinate in world coordinates.",
			"\tY = ${4:0}                -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Is the figure near these coordinates?"
		]
	},
	"FigureIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.FigureIsNotInRangeToEntity",
		"body": [
			"FigureIsNotInRangeToEntity",
			"{",
			"\tTag = \"${1:ScriptTag}\",        -- A script tag.",
			"\tTargetTag = \"${2:TargetTag}\", -- The script tag of the target.",
			"\tRange = ${3:0}                   -- The radius of the query in grid points.",
			"}"
		],
		"description": [
			"Negated: Is the figure near the other entity?"
		]
	},
	"FigureIsNotInRect": {
		"prefix": "SF2.Condition.FigureIsNotInRect",
		"body": [
			"FigureIsNotInRect",
			"{",
			"\tTag = \"${1:ScriptTag}\",   -- A script tag.",
			"\tTop = ${2:0},              -- The top coordinate of a rectangle.",
			"\tLeft = ${3:0},             -- The left coordinate of a rectangle.",
			"\tBottom = ${4:0},           -- The bottom coordinate of a rectangle.",
			"\tRight = ${5:0}             -- The right coordinate of a rectangle.",
			"}"
		],
		"description": [
			"Negated: Is the figure inside this rectangle?"
		]
	},
	"FigureIsNotSelected": {
		"prefix": "SF2.Condition.FigureIsNotSelected",
		"body": [
			"FigureIsNotSelected",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Negated: Is a specific figure selected?"
		]
	},
	"FigureIsSelected": {
		"prefix": "SF2.Condition.FigureIsSelected",
		"body": [
			"FigureIsSelected",
			"{",
			"\tTag = \"${1:ScriptTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Is a specific figure selected?"
		]
	},
	"FigureRaceIsInRange": {
		"prefix": "SF2.Condition.FigureRaceIsInRange",
		"body": [
			"FigureRaceIsInRange",
			"{",
			"\tRace = ${1:RaceId},  -- The race ID of an entity.",
			"\tRange = ${2:0},      -- The radius of the query in grid points.",
			"\tX = ${3:0},          -- The X coordinate in world coordinates.",
			"\tY = ${4:0}           -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Is a figure of a specific race near these coordinates?",
			"",
			"Checks whether any figure belonging to the specified race is near the given coordinates."
		]
	},
	"FigureRaceIsInRangeToEntity": {
		"prefix": "SF2.Condition.FigureRaceIsInRangeToEntity",
		"body": [
			"FigureRaceIsInRangeToEntity",
			"{",
			"\tRace = ${1:RaceId},      -- The race ID of an entity.",
			"\tRange = ${2:0},          -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\" -- The script tag of the target.",
			"}"
		],
		"description": [
			"Is a figure of a specific race near this entity tag?",
			"",
			"Checks whether any figure belonging to the specified race is near the given entity."
		]
	},
	"FigureRaceIsNotInRange": {
		"prefix": "SF2.Condition.FigureRaceIsNotInRange",
		"body": [
			"FigureRaceIsNotInRange",
			"{",
			"\tRace = ${1:RaceId}, -- The race ID of an entity.",
			"\tRange = ${2:0},     -- The radius of the query in grid points.",
			"\tX = ${3:0},         -- The X coordinate in world coordinates.",
			"\tY = ${4:0}          -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Is a figure of a specific race near these coordinates?"
		]
	},
	"FigureRaceIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.FigureRaceIsNotInRangeToEntity",
		"body": [
			"FigureRaceIsNotInRangeToEntity",
			"{",
			"\tRace = ${1:RaceId},     -- The race ID of an entity.",
			"\tRange = ${2:0},         -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\" -- The script tag of the target.",
			"}"
		],
		"description": [
			"Negated: Is a figure of a specific race near this tag?"
		]
	},
	"FigureSpellIsActive": {
		"prefix": "SF2.Condition.FigureSpellIsActive",
		"body": [
			"FigureSpellIsActive",
			"{",
			"\tTag = \"${1:Tag}\",    -- A script tag.",
			"\tSpell = ${2:SpellId}   -- The spell ID from the database.",
			"}"
		],
		"description": [
			"Is the figure under the effect of a specific spell?"
		]
	},
	"FigureSpellIsNotActive": {
		"prefix": "SF2.Condition.FigureSpellIsNotActive",
		"body": [
			"FigureSpellIsNotActive",
			"{",
			"\tTag = \"${1:Tag}\",    -- A script tag.",
			"\tSpell = ${2:SpellId}   -- The spell ID from the database.",
			"}"
		],
		"description": [
			"Negated: Is the figure under the effect of a specific spell?"
		]
	},
	"FigureTeamExludingAvatarIsInRange": {
		"prefix": "SF2.Condition.FigureTeamExludingAvatarIsInRange",
		"body": [
			"FigureTeamExludingAvatarIsInRange",
			"{",
			"\tTeam = \"${1:Team}\",  -- The team name from the editor.",
			"\tRange = ${2:Range},    -- The radius of the query in grid points.",
			"\tX = ${3:X},            -- The X coordinate in world coordinates.",
			"\tY = ${4:Y}             -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Is a figure of a team (excluding the avatar) near the given coordinates?",
			"Like FigureTeamIsInRange, but ignores the avatar. Useful for checking if the avatar must be alone without any of their units nearby."
		]
	},
	"FigureTeamExludingAvatarIsInRangeToEntity": {
		"prefix": "SF2.Condition.FigureTeamExludingAvatarIsInRangeToEntity",
		"body": [
			"FigureTeamExludingAvatarIsInRangeToEntity",
			"{",
			"\tTeam = \"${1:Team}\",       -- The team name from the editor.",
			"\tRange = ${2:Range},        -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\"   -- The script tag of the target.",
			"}"
		],
		"description": [
			"Is a figure of a team (excluding the avatar) near the entity with the given tag?",
			"Like FigureTeamIsInRangeToEntity, but ignores the avatar."
		]
	},
	"FigureTeamExludingAvatarIsNotInRange": {
		"prefix": "SF2.Condition.FigureTeamExludingAvatarIsNotInRange",
		"body": [
			"FigureTeamExludingAvatarIsNotInRange",
			"{",
			"\tTeam = \"${1:Team}\",  -- The team name from the editor.",
			"\tRange = ${2:Range},   -- The radius of the query in grid points.",
			"\tX = ${3:X},           -- The X coordinate in world coordinates.",
			"\tY = ${4:Y}            -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Is a figure of a team (excluding the avatar) near these coordinates?"
		]
	},
	"FigureTeamExludingAvatarIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.FigureTeamExludingAvatarIsNotInRangeToEntity",
		"body": [
			"FigureTeamExludingAvatarIsNotInRangeToEntity",
			"{",
			"\tTeam = \"${1:Team}\",       -- The team name from the editor.",
			"\tRange = ${2:Range},        -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\"   -- The script tag of the target.",
			"}"
		],
		"description": [
			"Negated: Is a figure of a team (excluding the avatar) near this tag?"
		]
	},
	"FigureTeamIsInRange": {
		"prefix": "SF2.Condition.FigureTeamIsInRange",
		"body": [
			"FigureTeamIsInRange",
			"{",
			"\tTeam = \"${1:Team}\",  -- The team name from the editor.",
			"\tRange = ${2:Range},   -- The radius of the query in grid points.",
			"\tX = ${3:X},           -- The X coordinate in world coordinates.",
			"\tY = ${4:Y}            -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Is a figure of a team near these coordinates?",
			"Checks if a figure belonging to a specified team is within range of the given coordinates."
		]
	},
	"FigureTeamIsInRangeToEntity": {
		"prefix": "SF2.Condition.FigureTeamIsInRangeToEntity",
		"body": [
			"FigureTeamIsInRangeToEntity",
			"{",
			"\tTeam = \"${1:Team}\",       -- The team name from the editor.",
			"\tRange = ${2:Range},        -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\"   -- The script tag of the target.",
			"}"
		],
		"description": [
			"Is a figure of a team near this tag?",
			"Checks if a figure belonging to a specified team is within range of the given entity."
		]
	},
	"FigureTeamIsNotInRange": {
		"prefix": "SF2.Condition.FigureTeamIsNotInRange",
		"body": [
			"FigureTeamIsNotInRange",
			"{",
			"\tTeam = \"${1:Team}\",  -- The team name from the editor.",
			"\tRange = ${2:Range},   -- The radius of the query in grid points.",
			"\tX = ${3:X},           -- The X coordinate in world coordinates.",
			"\tY = ${4:Y}            -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Is a figure of a team near these coordinates?",
			"Checks if no figure belonging to a specified team is within range of the given coordinates."
		]
	},
	"FigureTeamIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.FigureTeamIsNotInRangeToEntity",
		"body": [
			"FigureTeamIsNotInRangeToEntity",
			"{",
			"\tTeam = \"${1:Team}\",       -- The team name from the editor.",
			"\tRange = ${2:Range},        -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\"   -- The script tag of the target.",
			"}"
		],
		"description": [
			"Negated: Is a figure of a team near this tag?",
			"Checks if no figure belonging to a specified team is within range of the given entity."
		]
	},
	"FigureUnitNpcIsInRange": {
		"prefix": "SF2.Condition.FigureUnitNpcIsInRange",
		"body": [
			"FigureUnitNpcIsInRange",
			"{",
			"\tUnitId = ${1:0},   -- The UnitId as defined in the database. Use 0 to match all NPC units.",
			"\tRange = ${2:Range}, -- The radius of the query in grid points.",
			"\tX = ${3:X},        -- The X coordinate in world coordinates.",
			"\tY = ${4:Y}         -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Is a specific NPC unit near these coordinates?",
			"Checks if an NPC figure of a given UnitId is within the specified range of the coordinates.",
			"If UnitId = 0, the query applies to all NPC units."
		]
	},
	"FigureUnitNpcIsInRangeToEntity": {
		"prefix": "SF2.Condition.FigureUnitNpcIsInRangeToEntity",
		"body": [
			"FigureUnitNpcIsInRangeToEntity",
			"{",
			"\tUnitId = ${1:0},        -- The UnitId as defined in the database. Use 0 to match all NPC units.",
			"\tRange = ${2:Range},     -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\" -- The Script Tag of the target entity.",
			"}"
		],
		"description": [
			"Is a specific NPC unit near this entity tag?",
			"Checks if an NPC figure of a given UnitId is within the specified range of the entity with the given tag.",
			"If UnitId = 0, the query applies to all NPC units."
		]
	},
	"FigureUnitNpcIsNotInRange": {
		"prefix": "SF2.Condition.FigureUnitNpcIsNotInRange",
		"body": [
			"FigureUnitNpcIsNotInRange",
			"{",
			"\tUnitId = ${1:0},    -- The UnitId as defined in the database. Use 0 to match all NPC units.",
			"\tRange = ${2:Range}, -- The radius of the query in grid points.",
			"\tX = ${3:X},         -- The X coordinate in world coordinates.",
			"\tY = ${4:Y}          -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Is a specific NPC unit NOT near these coordinates?",
			"Checks if no NPC figure of the given UnitId is within the specified range of the given coordinates.",
			"If UnitId = 0, the query applies to all NPC units."
		]
	},
	"FigureUnitNpcIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.FigureUnitNpcIsNotInRangeToEntity",
		"body": [
			"FigureUnitNpcIsNotInRangeToEntity",
			"{",
			"\tUnitId = ${1:0},        -- The UnitId as defined in the database. Use 0 to match all NPC units.",
			"\tRange = ${2:Range},     -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\" -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Negated: Is a specific NPC unit NOT near this tag?",
			"Checks if no NPC figure of the given UnitId is within the specified range of the given entity tag.",
			"If UnitId = 0, the query applies to all NPC units."
		]
	},
	"FigureUnitRtsIsInRange": {
		"prefix": "SF2.Condition.FigureUnitRtsIsInRange",
		"body": [
			"FigureUnitRtsIsInRange",
			"{",
			"\tUnitId = ${1:0},    -- The UnitId as defined in the database. Use 0 to match all RTS units.",
			"\tRange = ${2:Range}, -- The radius of the query in grid points.",
			"\tX = ${3:X},         -- The X coordinate in world coordinates.",
			"\tY = ${4:Y}          -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Is a specific RTS unit near these coordinates?",
			"Checks if an RTS figure with the given UnitId is within the specified range of the given coordinates.",
			"If UnitId = 0, the query applies to all RTS units regardless of their ID."
		]
	},
	"FigureUnitRtsIsInRangeToEntity": {
		"prefix": "SF2.Condition.FigureUnitRtsIsInRangeToEntity",
		"body": [
			"FigureUnitRtsIsInRangeToEntity",
			"{",
			"\tUnitId = ${1:0},       -- The UnitId as defined in the database. Use 0 to match all RTS units.",
			"\tRange = ${2:Range},    -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\" -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Is a specific RTS unit near this tag?",
			"Checks if an RTS figure with the given UnitId is within the specified range of the given target entity.",
			"If UnitId = 0, the query applies to all RTS units regardless of their ID."
		]
	},
	"FigureUnitRtsIsNotInRange": {
		"prefix": "SF2.Condition.FigureUnitRtsIsNotInRange",
		"body": [
			"FigureUnitRtsIsNotInRange",
			"{",
			"\tUnitId = ${1:0},    -- The UnitId as defined in the database. Use 0 to match all RTS units.",
			"\tRange = ${2:Range}, -- The radius of the query in grid points.",
			"\tX = ${3:X},         -- The X coordinate in world space.",
			"\tY = ${4:Y}          -- The Y coordinate in world space.",
			"}"
		],
		"description": [
			"Negated: Is a specific RTS unit *not* near these coordinates?",
			"Checks if no RTS figure with the given UnitId is within the specified range of the given world coordinates.",
			"If UnitId = 0, the query applies to all RTS units regardless of their ID."
		]
	},
	"FigureUnitRtsIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.FigureUnitRtsIsNotInRangeToEntity",
		"body": [
			"FigureUnitRtsIsNotInRangeToEntity",
			"{",
			"\tUnitId = ${1:0},       -- The UnitId as defined in the database. Use 0 to match all RTS units.",
			"\tRange = ${2:Range},    -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Tag}\" -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Negated: Is a specific RTS unit *not* near this entity?",
			"Checks if no RTS figure with the given UnitId is within the specified range of the target entity.",
			"If UnitId = 0, the query applies to all RTS units regardless of their ID."
		]
	},
	"GameInterfaceIsNotVisible": {
		"prefix": "SF2.Condition.GameInterfaceIsNotVisible",
		"body": [
			"GameInterfaceIsNotVisible",
			"{",
			"}"
		],
		"description": [
			"Negated: Are the interface bars (currently only for dialogs) not visible?"
		]
	},
	"GameInterfaceIsVisible": {
		"prefix": "SF2.Condition.GameInterfaceIsVisible",
		"body": [
			"GameInterfaceIsVisible",
			"{",
			"}"
		],
		"description": [
			"Are the interface bars (currently only for dialogs) visible?",
			"Checks whether the black bars of a just-ended dialog are no longer visible,",
			"and instead the game interface is shown again.",
			"Must be used together with AvatarIsNotTalking!"
		]
	},
	"GateIsClosed": {
		"prefix": "SF2.Condition.GateIsClosed",
		"body": [
			"GateIsClosed",
			"{",
			"\tTag = \"${1:GateTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Checks whether a gate is closed.",
			"Negated: Is the gate open?",
			"Default value for Tag is 'GateTag'."
		]
	},
	"GateIsOpen": {
		"prefix": "SF2.Condition.GateIsOpen",
		"body": [
			"GateIsOpen",
			"{",
			"\tTag = \"${1:GateTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Checks whether a specific gate is open (unblocked).",
			"Question: Is the gate open?",
			"Default value for Tag is 'GateTag'."
		]
	},
	"HeroHasNoSkillPointsLeft": {
		"prefix": "SF2.Condition.HeroHasNoSkillPointsLeft",
		"body": [
			"HeroHasNoSkillPointsLeft",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tHero = ${2:0}               -- The ID 1 to 5 of a hero, 0 for the avatar.",
			"}"
		],
		"description": [
			"Checks whether a hero or the avatar has no skill points left.",
			"Negated: Does a hero or the avatar still have skill points available?",
			"Default value for Player is 'pl_Human'.",
			"Default value for Hero is '0' (Avatar)."
		]
	},
	"HeroHasSkillPointsLeft": {
		"prefix": "SF2.Condition.HeroHasSkillPointsLeft",
		"body": [
			"HeroHasSkillPointsLeft",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tHero = ${2:0}               -- The ID 1 to 5 of a hero, 0 for the avatar.",
			"}"
		],
		"description": [
			"Checks whether a hero or the avatar still has skill points available.",
			"Question: Does a hero or the avatar still have skill points left?",
			"Default value for Player is 'pl_Human'.",
			"Default value for Hero is '0' (Avatar)."
		]
	},
	"LeverIsOff": {
		"prefix": "SF2.Condition.LeverIsOff",
		"body": [
			"LeverIsOff",
			"{",
			"\tTag = \"${1:LeverTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Checks whether a lever is switched off.",
			"Negated: Is the lever switched on?",
			"Default value for Tag is 'LeverTag'."
		]
	},
	"LeverIsOn": {
		"prefix": "SF2.Condition.LeverIsOn",
		"body": [
			"LeverIsOn",
			"{",
			"\tTag = \"${1:LeverTag}\"  -- A script tag.",
			"}"
		],
		"description": [
			"Checks whether a specific lever is switched on.",
			"Question: Is the lever switched on?",
			"Default value for Tag is 'LeverTag'."
		]
	},
	"MapFlagIsFalse": {
		"prefix": "SF2.Condition.MapFlagIsFalse",
		"body": [
			"MapFlagIsFalse",
			"{",
			"\tName = \"${1:MapVar}\"  -- The name of the map variable.",
			"}"
		],
		"description": [
			"Checks whether the map variable is false.",
			"Negated: Is the map variable true?",
			"Default value for Name is 'MapVar'."
		]
	},
	"MapFlagIsTrue": {
		"prefix": "SF2.Condition.MapFlagIsTrue",
		"body": [
			"MapFlagIsTrue",
			"{",
			"\tName = \"${1:MapVar}\"  -- The name of the map variable.",
			"}"
		],
		"description": [
			"Checks whether the map variable is true.",
			"Question: Is the map variable true?",
			"Default value for Name is 'MapVar'."
		]
	},
	"MapTimerIsElapsed": {
		"prefix": "SF2.Condition.MapTimerIsElapsed",
		"body": [
			"MapTimerIsElapsed",
			"{",
			"\tName = \"${1:MapTimer}\"   -- The name of the map timer.",
			"\tSeconds = ${2:60}         -- Number of seconds.",
			"}"
		],
		"description": [
			"Checks whether the map timer has elapsed.",
			"Question: Has the map timer expired?",
			"Default value for Name is 'MapTimer'.",
			"Default value for Seconds is '60'."
		]
	},
	"MapTimerIsNotElapsed": {
		"prefix": "SF2.Condition.MapTimerIsNotElapsed",
		"body": [
			"MapTimerIsNotElapsed",
			"{",
			"\tName = \"${1:MapTimer}\"   -- The name of the map timer.",
			"\tSeconds = ${2:60}         -- Number of seconds.",
			"}"
		],
		"description": [
			"Checks whether the map timer has not yet elapsed.",
			"Negated: Has the map timer expired?",
			"Default value for Name is 'MapTimer'.",
			"Default value for Seconds is '60'."
		]
	},
	"MapValueIsEqual": {
		"prefix": "SF2.Condition.MapValueIsEqual",
		"body": [
			"MapValueIsEqual",
			"{",
			"\tName = \"${1:MapVar}\"  -- The name of the map variable.",
			"\tValue = ${2:0}         -- The value of the variable.",
			"}"
		],
		"description": [
			"Checks whether the map variable has the given value.",
			"Question: Does the map variable have this value?",
			"Default value for Name is 'MapVar'.",
			"Default value for Value is '0'."
		]
	},
	"MapValueIsEqualToVariable": {
		"prefix": "SF2.Condition.MapValueIsEqualToVariable",
		"body": [
			"MapValueIsEqualToVariable",
			"{",
			"\tName = \"${1:MapVar1}\"       -- The name of the first map variable.",
			"\tVariable = \"${2:MapVar2}\"  -- The name of the second map variable.",
			"}"
		],
		"description": [
			"Checks whether one map variable has the same value as another.",
			"Question: Does the map variable have this value?",
			"Default value for Name is 'MapVar1'.",
			"Default value for Variable is 'MapVar2'."
		]
	},
	"MapValueIsGreater": {
		"prefix": "SF2.Condition.MapValueIsGreater",
		"body": [
			"MapValueIsGreater",
			"{",
			"\tName = \"${1:MapVar}\"  -- The name of the map variable.",
			"\tValue = ${2:0}         -- The value of the variable.",
			"}"
		],
		"description": [
			"Checks whether the map variable is greater than the given value.",
			"Question: Is the map variable greater than this value?",
			"Default value for Name is 'MapVar'.",
			"Default value for Value is '0'."
		]
	},
	"MapValueIsGreaterOrEqual": {
		"prefix": "SF2.Condition.MapValueIsGreaterOrEqual",
		"body": [
			"MapValueIsGreaterOrEqual",
			"{",
			"\tName = \"${1:MapVar}\"  -- The name of the map variable.",
			"\tValue = ${2:0}         -- The value of the variable.",
			"}"
		],
		"description": [
			"Checks whether the map variable is greater than or equal to the given value.",
			"Negated: Is the map variable greater than this value?",
			"Default value for Name is 'MapVar'.",
			"Default value for Value is '0'."
		]
	},
	"MapValueIsGreaterOrEqualThanVariable": {
		"prefix": "SF2.Condition.MapValueIsGreaterOrEqualThanVariable",
		"body": [
			"MapValueIsGreaterOrEqualThanVariable",
			"{",
			"\tName = \"${1:MapVar1}\"       -- The name of the first map variable.",
			"\tVariable = \"${2:MapVar2}\"  -- The name of the second map variable.",
			"}"
		],
		"description": [
			"Checks whether one map variable is greater than or equal to another map variable.",
			"Negated: Is the map variable greater than this value?",
			"Default value for Name is 'MapVar1'.",
			"Default value for Variable is 'MapVar2'."
		]
	},
	"MapValueIsGreaterThanVariable": {
		"prefix": "SF2.Condition.MapValueIsGreaterThanVariable",
		"body": [
			"MapValueIsGreaterThanVariable",
			"{",
			"\tName = \"${1:MapVar1}\"       -- The name of the first map variable.",
			"\tVariable = \"${2:MapVar2}\"  -- The name of the second map variable.",
			"}"
		],
		"description": [
			"Checks whether one map variable is greater than another map variable.",
			"Question: Is the map variable greater than this value?",
			"Default value for Name is 'MapVar1'.",
			"Default value for Variable is 'MapVar2'."
		]
	},
	"MapValueIsLess": {
		"prefix": "SF2.Condition.MapValueIsLess",
		"body": [
			"MapValueIsLess",
			"{",
			"\tName = \"${1:MapVar}\"  -- The name of the map variable.",
			"\tValue = ${2:0}         -- The value of the variable.",
			"}"
		],
		"description": [
			"Checks whether the map variable is less than the given value.",
			"Question: Is the map variable less than this value?",
			"Default value for Name is 'MapVar'.",
			"Default value for Value is '0'."
		]
	},
	"MapValueIsLessOrEqual": {
		"prefix": "SF2.Condition.MapValueIsLessOrEqual",
		"body": [
			"MapValueIsLessOrEqual",
			"{",
			"\tName = \"${1:MapVar}\"  -- The name of the map variable.",
			"\tValue = ${2:0}         -- The value of the variable.",
			"}"
		],
		"description": [
			"Checks whether the map variable is less than or equal to the given value.",
			"Negated: Is the map variable greater than this value?",
			"Default value for Name is 'MapVar'.",
			"Default value for Value is '0'."
		]
	},
	"MapValueIsLessOrEqualThanVariable": {
		"prefix": "SF2.Condition.MapValueIsLessOrEqualThanVariable",
		"body": [
			"MapValueIsLessOrEqualThanVariable",
			"{",
			"\tName = \"${1:MapVar1}\"       -- The name of the first map variable.",
			"\tVariable = \"${2:MapVar2}\"  -- The name of the second map variable.",
			"}"
		],
		"description": [
			"Checks whether one map variable is less than or equal to another map variable.",
			"Negated: Is the map variable greater than this value?",
			"Default value for Name is 'MapVar1'.",
			"Default value for Variable is 'MapVar2'."
		]
	},
	"MapValueIsLessThanVariable": {
		"prefix": "SF2.Condition.MapValueIsLessThanVariable",
		"body": [
			"MapValueIsLessThanVariable",
			"{",
			"\tName = \"${1:MapVar1}\"       -- The name of the first map variable.",
			"\tVariable = \"${2:MapVar2}\"  -- The name of the second map variable.",
			"}"
		],
		"description": [
			"Checks whether one map variable is less than another map variable.",
			"Question: Is the map variable less than this value?",
			"Default value for Name is 'MapVar1'.",
			"Default value for Variable is 'MapVar2'."
		]
	},
	"MapValueIsNotEqual": {
		"prefix": "SF2.Condition.MapValueIsNotEqual",
		"body": [
			"MapValueIsNotEqual",
			"{",
			"\tName = \"${1:MapVar}\"  -- The name of the map variable.",
			"\tValue = ${2:0}         -- The value of the variable.",
			"}"
		],
		"description": [
			"Checks whether the map variable is not equal to the given value.",
			"Negated: Does the map variable have this value?",
			"Default value for Name is 'MapVar'.",
			"Default value for Value is '0'."
		]
	},
	"MapValueIsNotEqualToVariable": {
		"prefix": "SF2.Condition.MapValueIsNotEqualToVariable",
		"body": [
			"MapValueIsNotEqualToVariable",
			"{",
			"\tName = \"${1:MapVar1}\"       -- The name of the first map variable.",
			"\tVariable = \"${2:MapVar2}\"  -- The name of the second map variable.",
			"}"
		],
		"description": [
			"Checks whether one map variable is not equal to another map variable.",
			"Negated: Does the map variable have this value?",
			"Default value for Name is 'MapVar1'.",
			"Default value for Variable is 'MapVar2'."
		]
	},
	"NotAND": {
		"prefix": "SF2.Condition.NotAND",
		"body": [
			"NotAND",
			"{",
			"}"
		],
		"description": [
			"Checks whether the logical AND of two or more conditions is false.",
			"Negated: Performs a logical AND on two or more conditions."
		]
	},
	"NotOR": {
		"prefix": "SF2.Condition.NotOR",
		"body": [
			"NotOR",
			"{",
			"}"
		],
		"description": [
			"Checks whether the logical OR of two or more conditions is false.",
			"Negated: Performs a logical OR on two or more conditions."
		]
	},
	"OR": {
		"prefix": "SF2.Condition.OR",
		"body": [
			"OR",
			"{",
			"}"
		],
		"description": [
			"Performs a logical OR on two or more conditions.",
			"There is no known limit to how many conditions can be provided; from a script perspective, there is no restriction.",
			"Both AND and OR can be nested, for example:",
			"AND",
			"{",
			"\tMapTimerIsElapsed {Name = \"\", Seconds = },",
			"\tPlayerValueIsEqual {Name = \"\", Value = },",
			"\tTeamIsInRange {Team = , X = , Y = },",
			"\tOR",
			"\t{",
			"\t\tAnyFigureIsInRange {X = , Y = },",
			"\t\tEntityFlagIsTrue {Name = \"\"},",
			"\t\tMapTimerIsElapsed {Name = \"\", Seconds = },",
			"\t},",
			"}",
			"",
			"Related operator: NotOR means 'neither...nor':",
			"NotOR(c1, c2) is true when neither c1 nor c2 is true.",
			"It is false when c1 or c2 is true, or when both are true."
		]
	},
	"PlayerBuildingIsInEntityRange": {
		"prefix": "SF2.Condition.PlayerBuildingIsInEntityRange",
		"body": [
			"PlayerBuildingIsInEntityRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tBuildingId = ${2:0}         -- The building ID from the database.",
			"\tRange = ${3:10}             -- The radius of the query in grid points.",
			"\tTargetTag = \"${4:Target}\" -- The script tag of the target.",
			"}"
		],
		"description": [
			"Checks whether an RTS building of a player is within range of a given entity.",
			"Question: Is a player's RTS building near this entity?",
			"Default value for Player is 'pl_Human'.",
			"Default value for BuildingId is '0'.",
			"Default value for Range is '10'.",
			"Default value for TargetTag is 'Target'."
		]
	},
	"PlayerBuildingIsInRange": {
		"prefix": "SF2.Condition.PlayerBuildingIsInRange",
		"body": [
			"PlayerBuildingIsInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tBuildingId = ${2:0}         -- The building ID from the database (0 = all buildings).",
			"\tRange = ${3:10}             -- The radius of the query in grid points.",
			"\tX = ${4:0}                  -- The X coordinate in world coordinates.",
			"\tY = ${5:0}                  -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Checks whether a building of a player is within range of the given coordinates.",
			"Queries whether a specific building (by BuildingId) of a player is near the provided coordinates.",
			"If BuildingId = 0, all buildings of the player are checked, not just a specific one.",
			"Default value for Player is 'pl_Human'.",
			"Default value for BuildingId is '0' (all buildings).",
			"Default value for Range is '10'.",
			"Default value for X is '0'.",
			"Default value for Y is '0'."
		]
	},
	"PlayerBuildingIsInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerBuildingIsInRangeToEntity",
		"body": [
			"PlayerBuildingIsInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tBuildingId = ${2:0}         -- The building ID from the database (0 = all buildings).",
			"\tRange = ${3:10}             -- The radius of the query in grid points.",
			"\tTargetTag = \"${4:Target}\" -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Checks whether a building of a player is within range of a given entity.",
			"Queries whether a specific building (by BuildingId) of a player is near the specified entity.",
			"If BuildingId = 0, all buildings of the player are checked, not just a specific one.",
			"Default value for Player is 'pl_Human'.",
			"Default value for BuildingId is '0' (all buildings).",
			"Default value for Range is '10'.",
			"Default value for TargetTag is 'Target'."
		]
	},
	"PlayerBuildingIsNotInEntityRange": {
		"prefix": "SF2.Condition.PlayerBuildingIsNotInEntityRange",
		"body": [
			"PlayerBuildingIsNotInEntityRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tBuildingId = ${2:0}         -- The building ID from the database (0 = all buildings).",
			"\tRange = ${3:10}             -- The radius of the query in grid points.",
			"\tTargetTag = \"${4:Target}\" -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Checks whether a building of a player is not within range of a given entity.",
			"Negated: Is a player's RTS building near this entity?",
			"If BuildingId = 0, all buildings of the player are checked, not just a specific one.",
			"Default value for Player is 'pl_Human'.",
			"Default value for BuildingId is '0' (all buildings).",
			"Default value for Range is '10'.",
			"Default value for TargetTag is 'Target'."
		]
	},
	"PlayerBuildingIsNotInRange": {
		"prefix": "SF2.Condition.PlayerBuildingIsNotInRange",
		"body": [
			"PlayerBuildingIsNotInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tBuildingId = ${2:0}         -- The building ID from the database (0 = all buildings).",
			"\tRange = ${3:10}             -- The radius of the query in grid points.",
			"\tX = ${4:0}                  -- The X coordinate in world coordinates.",
			"\tY = ${5:0}                  -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Checks whether a building of a player is not within range of the given coordinates.",
			"Negated: Is a player's building near the specified coordinates?",
			"If BuildingId = 0, all buildings of the player are checked, not just a specific one.",
			"Default value for Player is 'pl_Human'.",
			"Default value for BuildingId is '0' (all buildings).",
			"Default value for Range is '10'.",
			"Default value for X is '0'.",
			"Default value for Y is '0'."
		]
	},
	"PlayerBuildingIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerBuildingIsNotInRangeToEntity",
		"body": [
			"PlayerBuildingIsNotInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tBuildingId = ${2:0}         -- The building ID from the database (0 = all buildings).",
			"\tRange = ${3:10}             -- The radius of the query in grid points.",
			"\tTargetTag = \"${4:Target}\" -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Checks whether a building of a player is not within range of the specified entity.",
			"Negated: Is a player's RTS building near this entity?",
			"If BuildingId = 0, all buildings of the player are checked, not just a specific one.",
			"Default value for Player is 'pl_Human'.",
			"Default value for BuildingId is '0' (all buildings).",
			"Default value for Range is '10'.",
			"Default value for TargetTag is 'Target'."
		]
	},
	"PlayerFigureExcludingAvatarIsInRange": {
		"prefix": "SF2.Condition.PlayerFigureExcludingAvatarIsInRange",
		"body": [
			"PlayerFigureExcludingAvatarIsInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tRange = ${2:10}             -- The radius of the query in grid points.",
			"\tX = ${3:0}                  -- The X coordinate in world coordinates.",
			"\tY = ${4:0}                  -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Checks whether a figure of a specific player is within range of the given coordinates.",
			"This variant excludes the avatar from the query.",
			"See also: PlayerFigureIsInRange.",
			"Default value for Player is 'pl_Human'.",
			"Default value for Range is '10'.",
			"Default value for X is '0'.",
			"Default value for Y is '0'."
		]
	},
	"PlayerFigureExcludingAvatarIsInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerFigureExcludingAvatarIsInRangeToEntity",
		"body": [
			"PlayerFigureExcludingAvatarIsInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tRange = ${2:10}              -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Target}\"  -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Checks whether a figure of a specific player is within range of the given entity.",
			"This variant excludes the avatar from the query.",
			"See also: PlayerFigureIsInRange.",
			"Default value for Player is 'pl_Human'.",
			"Default value for Range is '10'.",
			"Default value for TargetTag is 'Target'."
		]
	},
	"PlayerFigureExcludingAvatarIsNotInRange": {
		"prefix": "SF2.Condition.PlayerFigureExcludingAvatarIsNotInRange",
		"body": [
			"PlayerFigureExcludingAvatarIsNotInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tRange = ${2:10}              -- The radius of the query in grid points.",
			"\tX = ${3:0}                   -- The X coordinate in world coordinates.",
			"\tY = ${4:0}                   -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Checks whether no figure of the specified player is within range of the given coordinates.",
			"Negated: Determines that none of the player’s figures are near the given coordinates.",
			"This variant excludes the avatar from the query.",
			"Default value for Player is 'pl_Human'.",
			"Default value for Range is '10'.",
			"Default values for X and Y are '0'."
		]
	},
	"PlayerFigureExcludingAvatarIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerFigureExcludingAvatarIsNotInRangeToEntity",
		"body": [
			"PlayerFigureExcludingAvatarIsNotInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tRange = ${2:10}              -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:Target}\"  -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Checks whether no figure of the specified player is within range of the given entity.",
			"Negated: Determines that none of the player’s figures are near the specified entity.",
			"This variant excludes the avatar from the query.",
			"Default value for Player is 'pl_Human'.",
			"Default value for Range is '10'.",
			"Default value for TargetTag is 'Target'."
		]
	},
	"PlayerFigureIsInRange": {
		"prefix": "SF2.Condition.PlayerFigureIsInRange",
		"body": [
			"PlayerFigureIsInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tRange = ${2:10}              -- The radius of the query in grid points.",
			"\tX = ${3:0}                   -- The X coordinate in world coordinates.",
			"\tY = ${4:0}                   -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Checks whether a figure of the specified player is within range of the given coordinates.",
			"Determines if any unit belonging to the player is near the specified location.",
			"Default value for Player is 'pl_Human'.",
			"Default value for Range is '10'.",
			"Default values for coordinates X and Y are '0'."
		]
	},
	"PlayerFigureIsInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerFigureIsInRangeToEntity",
		"body": [
			"PlayerFigureIsInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tRange = ${2:10}              -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:}\"        -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Checks whether a figure of the specified player is within range of the given entity.",
			"Determines if any unit belonging to the player is near the specified entity.",
			"Default value for Player is 'pl_Human'.",
			"Default value for Range is '10'."
		]
	},
	"PlayerFigureIsNotInRange": {
		"prefix": "SF2.Condition.PlayerFigureIsNotInRange",
		"body": [
			"PlayerFigureIsNotInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tRange = ${2:10}              -- The radius of the query in grid points.",
			"\tX = ${3:0}                   -- The X coordinate in world coordinates.",
			"\tY = ${4:0}                   -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Checks whether a figure of the specified player is within range of the given coordinates.",
			"Returns true if no unit belonging to the player is within the specified range.",
			"Default value for Player is 'pl_Human'.",
			"Default value for Range is '10'.",
			"Default values for X and Y are '0'."
		]
	},
	"PlayerFigureIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerFigureIsNotInRangeToEntity",
		"body": [
			"PlayerFigureIsNotInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tRange = ${2:10}              -- The radius of the query in grid points.",
			"\tTargetTag = \"${3:}\"        -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Negated: Checks whether a figure of the specified player is within range of the given entity.",
			"Returns true if no unit belonging to the player is within the specified range of the entity.",
			"Default value for Player is 'pl_Human'.",
			"Default value for Range is '10'."
		]
	},
	"PlayerHasBuilding": {
		"prefix": "SF2.Condition.PlayerHasBuilding",
		"body": [
			"PlayerHasBuilding",
			"{",
			"\tPlayer = \"${1:pl_Human}\"    -- The player name as set in the team setup.",
			"\tBuildingId = ${2:0}           -- The building ID as defined in the database.",
			"\tUpgradeId = ${3:0}            -- The building upgrade ID as defined in the database. Default: 0 (no upgrade).",
			"\tAmount = ${4:1}               -- The required number of buildings.",
			"\tOnlyCompleted = ${5:true}     -- If true, only fully constructed buildings count. If false, construction orders also count.",
			"}"
		],
		"description": [
			"Checks if a specific player owns a certain number of buildings with a given BuildingId and optionally a specific UpgradeId.",
			"OnlyCompleted controls whether buildings under construction are counted:",
			" - true  → Only finished buildings count.",
			" - false → Buildings under construction also count.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - UpgradeId = 0",
			" - Amount = 1",
			" - OnlyCompleted = true"
		]
	},
	"PlayerHasBuildingAmount": {
		"prefix": "SF2.Condition.PlayerHasBuildingAmount",
		"body": [
			"PlayerHasBuildingAmount",
			"{",
			"\tPlayer = \"${1:pl_Human}\"    -- The player name as set in the team setup.",
			"\tAmount = ${2:1}               -- The minimum required number of buildings.",
			"\tOnlyCompleted = ${3:true}     -- If true, only fully constructed buildings count. If false, construction orders also count.",
			"}"
		],
		"description": [
			"Checks if a specific player owns at least a given number of buildings.",
			"OnlyCompleted controls whether buildings under construction are counted:",
			" - true  → Only finished buildings count.",
			" - false → Buildings under construction also count.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 1",
			" - OnlyCompleted = true"
		]
	},
	"PlayerHasFigureAmount": {
		"prefix": "SF2.Condition.PlayerHasFigureAmount",
		"body": [
			"PlayerHasFigureAmount",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tAmount = ${2:1}             -- The minimum required number of figures.",
			"}"
		],
		"description": [
			"Checks if a specific player owns at least a given number of figures (units).",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 1"
		]
	},
	"PlayerHasFigureAmountEx": {
		"prefix": "SF2.Condition.PlayerHasFigureAmountEx",
		"body": [
			"PlayerHasFigureAmountEx",
			"{",
			"\tPlayer = \"${1:pl_Human}\"           -- The player name as set in the team setup.",
			"\tAmount = ${2:1}                      -- The minimum required number of figures.",
			"\tCountWorkers = ${3:false}            -- Whether workers should be counted.",
			"\tCountAvatarAndHeroes = ${4:false}    -- Whether the avatar and heroes should be counted.",
			"}"
		],
		"description": [
			"Checks if a specific player owns at least a given number of figures (units).",
			"Additional options:",
			" - CountWorkers: include workers in the count (default = false).",
			" - CountAvatarAndHeroes: include the avatar and heroes in the count (default = false).",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 1"
		]
	},
	"PlayerHasNotBuilding": {
		"prefix": "SF2.Condition.PlayerHasNotBuilding",
		"body": [
			"PlayerHasNotBuilding",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tBuildingId = ${2:0}          -- The building ID as defined in the database (0 = any building).",
			"\tUpgradeId = ${3:0}           -- The building upgrade ID as defined in the database.",
			"\tAmount = ${4:1}              -- A required amount.",
			"\tOnlyCompleted = ${5:true}    -- Whether to only count fully constructed buildings.",
			"}"
		],
		"description": [
			"Negated: Checks if a player does NOT own a certain number of RTS buildings.",
			"- BuildingId = 0 means all buildings of the player are checked, not only specific ones.",
			"- UpgradeId = 0 means no upgrade requirement.",
			"- OnlyCompleted determines whether only finished buildings are counted (default = true).",
			"Default values:",
			" - Player = 'pl_Human'",
			" - BuildingId = 0",
			" - UpgradeId = 0",
			" - Amount = 1",
			" - OnlyCompleted = true"
		]
	},
	"PlayerHasNotBuildingAmount": {
		"prefix": "SF2.Condition.PlayerHasNotBuildingAmount",
		"body": [
			"PlayerHasNotBuildingAmount",
			"{",
			"\tPlayer = \"${1:pl_Human}\"   -- The player name as set in the team setup.",
			"\tAmount = ${2:1}              -- A required minimum amount.",
			"\tOnlyCompleted = ${3:true}    -- Whether to only count fully constructed buildings.",
			"}"
		],
		"description": [
			"Negated: Checks if a player does NOT have at least a certain number of buildings.",
			"- OnlyCompleted determines whether only finished buildings are counted (default = true).",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 1",
			" - OnlyCompleted = true"
		]
	},
	"PlayerHasNotFigureAmount": {
		"prefix": "SF2.Condition.PlayerHasNotFigureAmount",
		"body": [
			"PlayerHasNotFigureAmount",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tAmount = ${2:1}             -- A required minimum amount.",
			"}"
		],
		"description": [
			"Negated: Checks if a player does NOT have at least a certain number of figures.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 1"
		]
	},
	"PlayerHasNotFigureAmountEx": {
		"prefix": "SF2.Condition.PlayerHasNotFigureAmountEx",
		"body": [
			"PlayerHasNotFigureAmountEx",
			"{",
			"\tPlayer = \"${1:pl_Human}\"           -- The player name as set in the team setup.",
			"\tAmount = ${2:1}                      -- A required minimum amount.",
			"\tCountWorkers = ${3:false}            -- Whether workers should be counted.",
			"\tCountAvatarAndHeroes = ${4:false}    -- Whether avatar and heroes should be counted.",
			"}"
		],
		"description": [
			"Negated: Checks if a player does NOT have at least a certain number of figures.",
			"Extended version allows specifying whether workers, avatar and heroes are included.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 1",
			" - CountWorkers = false",
			" - CountAvatarAndHeroes = false"
		]
	},
	"PlayerHasNotResourceLenya": {
		"prefix": "SF2.Condition.PlayerHasNotResourceLenya",
		"body": [
			"PlayerHasNotResourceLenya",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tAmount = ${2:0}             -- A required amount of Lenya.",
			"}"
		],
		"description": [
			"Negated: Checks if a player does NOT have a certain amount of Lenya.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 0"
		]
	},
	"PlayerHasNotResourceSilver": {
		"prefix": "SF2.Condition.PlayerHasNotResourceSilver",
		"body": [
			"PlayerHasNotResourceSilver",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tAmount = ${2:0}             -- A required amount of silver.",
			"}"
		],
		"description": [
			"Negated: Checks if a player does NOT have a certain amount of silver.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 0"
		]
	},
	"PlayerHasNotResourceStone": {
		"prefix": "SF2.Condition.PlayerHasNotResourceStone",
		"body": [
			"PlayerHasNotResourceStone",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tAmount = ${2:0}             -- A required amount of stone.",
			"}"
		],
		"description": [
			"Negated: Checks if a player does NOT have a certain amount of stone.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 0"
		]
	},
	"PlayerHasNotUnitAmount": {
		"prefix": "SF2.Condition.PlayerHasNotUnitAmount",
		"body": [
			"PlayerHasNotUnitAmount",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:0}             -- The UnitId as defined in the database.",
			"\tAmount = ${3:0}             -- Any desired number.",
			"}"
		],
		"description": [
			"Negated: Checks if a player does NOT have at least a certain number of a specific unit.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - UnitId = 0",
			" - Amount = 0"
		]
	},
	"PlayerHasResourceLenya": {
		"prefix": "SF2.Condition.PlayerHasResourceLenya",
		"body": [
			"PlayerHasResourceLenya",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tAmount = ${2:0}             -- Any desired amount.",
			"}"
		],
		"description": [
			"Checks if a player has at least a certain amount of Lenya.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 0"
		]
	},
	"PlayerHasResourceSilver": {
		"prefix": "SF2.Condition.PlayerHasResourceSilver",
		"body": [
			"PlayerHasResourceSilver",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tAmount = ${2:0}             -- Any desired amount.",
			"}"
		],
		"description": [
			"Checks if a player has at least a certain amount of Silver.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 0"
		]
	},
	"PlayerHasResourceStone": {
		"prefix": "SF2.Condition.PlayerHasResourceStone",
		"body": [
			"PlayerHasResourceStone",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tAmount = ${2:0}             -- Any desired amount.",
			"}"
		],
		"description": [
			"Checks if a player has at least a certain amount of Stone.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Amount = 0"
		]
	},
	"PlayerHasUnitAmount": {
		"prefix": "SF2.Condition.PlayerHasUnitAmount",
		"body": [
			"PlayerHasUnitAmount",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:0}             -- The UnitId as defined in the database.",
			"\tAmount = ${3:0}             -- Any desired amount.",
			"}"
		],
		"description": [
			"Checks if a player has at least a certain number of a specific unit.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - UnitId = 0",
			" - Amount = 0"
		]
	},
	"PlayerHeroHasItemEquipped": {
		"prefix": "SF2.Condition.PlayerHeroHasItemEquipped",
		"body": [
			"PlayerHeroHasItemEquipped",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tTag = \"${2:HeroMordecay}\" -- The script tag of the hero (without the 'pl_Human' prefix).",
			"\tItemId = ${3:0}             -- The Item ID as defined in the database.",
			"}"
		],
		"description": [
			"Checks if a specific hero has a specific equipment item equipped.",
			"If Tag = 'Avatar', this works the same as AvatarHasItemEquipped.",
			"IMPORTANT: The ScriptTag is just the hero's tag, e.g., 'HeroMordecay', without 'pl_Human' in front.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Tag = ''",
			" - ItemId = 0"
		]
	},
	"PlayerHeroHasNotItemEquipped": {
		"prefix": "SF2.Condition.PlayerHeroHasNotItemEquipped",
		"body": [
			"PlayerHeroHasNotItemEquipped",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tTag = \"${2:HeroMordecay}\" -- The script tag of the hero (without the 'pl_Human' prefix).",
			"\tItemId = ${3:0}             -- The Item ID as defined in the database.",
			"}"
		],
		"description": [
			"Negated: Checks if a specific hero does NOT have a specific equipment item equipped.",
			"If Tag = 'Avatar', this works the same as AvatarHasNotItemEquipped.",
			"IMPORTANT: The ScriptTag is just the hero's tag, e.g., 'HeroMordecay', without 'pl_Human' in front.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Tag = ''",
			" - ItemId = 0"
		]
	},
	"PlayerIsExisting": {
		"prefix": "SF2.Condition.PlayerIsExisting",
		"body": [
			"PlayerIsExisting",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"}"
		],
		"description": [
			"Checks if the specified player exists (i.e., is connected in multiplayer matches).",
			"Default values:",
			" - Player = 'pl_Human'"
		]
	},
	"PlayerIsGameOver": {
		"prefix": "SF2.Condition.PlayerIsGameOver",
		"body": [
			"PlayerIsGameOver",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"}"
		],
		"description": [
			"Checks if the specified player is 'Game Over'.",
			"Default values:",
			" - Player = 'pl_Human'"
		]
	},
	"PlayerIsNotExisting": {
		"prefix": "SF2.Condition.PlayerIsNotExisting",
		"body": [
			"PlayerIsNotExisting",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"}"
		],
		"description": [
			"Negated: Checks if the specified player is NOT connected (for multiplayer games).",
			"Default values:",
			" - Player = 'pl_Human'"
		]
	},
	"PlayerIsNotGameOver": {
		"prefix": "SF2.Condition.PlayerIsNotGameOver",
		"body": [
			"PlayerIsNotGameOver",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"}"
		],
		"description": [
			"Negated: Checks if the player is NOT 'Game Over'.",
			"Default values:",
			" - Player = 'pl_Human'"
		]
	},
	"PlayerSpellIsMemorized": {
		"prefix": "SF2.Condition.PlayerSpellIsMemorized",
		"body": [
			"PlayerSpellIsMemorized",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup.",
			"\tHero = ${2:0},               -- The hero ID from 1 to 5, or 0 for Avatar.",
			"\tSpell = ${3:}                -- The spell ID from the database.",
			"}"
		],
		"description": [
			"Checks if the specified spell is memorized by the given hero or avatar."
		]
	},
	"PlayerSpellIsNotMemorized": {
		"prefix": "SF2.Condition.PlayerSpellIsNotMemorized",
		"body": [
			"PlayerSpellIsNotMemorized",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup.",
			"\tHero = ${2:0},               -- The hero ID from 1 to 5, or 0 for Avatar.",
			"\tSpell = ${3:0}               -- The spell ID from the database.",
			"}"
		],
		"description": [
			"Negated: Checks if the specified spell is *not* memorized by the given hero or avatar."
		]
	},
	"PlayerUnitIsAmountSelected": {
		"prefix": "SF2.Condition.PlayerUnitIsAmountSelected",
		"body": [
			"PlayerUnitIsAmountSelected",
			"{",
			"\tAmount = ${1:}   -- Any number.",
			"}"
		],
		"description": [
			"Checks if a minimum number of RTS units of the player are currently selected."
		]
	},
	"PlayerUnitIsInGroup": {
		"prefix": "SF2.Condition.PlayerUnitIsInGroup",
		"body": [
			"PlayerUnitIsInGroup",
			"{",
			"\tGroup = ${1:}   -- The number of one of the 10 groups the player can define.",
			"\tUnitId = ${2:}  -- The UnitId as defined in the database.",
			"\tAmount = ${3:}  -- Any number.",
			"}"
		],
		"description": [
			"Checks if a specific unit is in one of the 10 groups defined by the player."
		]
	},
	"PlayerUnitIsNotAmountSelected": {
		"prefix": "SF2.Condition.PlayerUnitIsNotAmountSelected",
		"body": [
			"PlayerUnitIsNotAmountSelected",
			"{",
			"\tAmount = ${1:}  -- Any number.",
			"}"
		],
		"description": [
			"Negated: Is a certain minimum number of RTS units of the player selected?"
		]
	},
	"PlayerUnitIsNotInGroup": {
		"prefix": "SF2.Condition.PlayerUnitIsNotInGroup",
		"body": [
			"PlayerUnitIsNotInGroup",
			"{",
			"\tGroup = ${1:}   -- The number of one of the 10 groups the player can define.",
			"\tUnitId = ${2:}  -- The UnitId as from the database.",
			"\tAmount = ${3:}  -- Any number.",
			"}"
		],
		"description": [
			"Negated: Is a certain unit in one of the 10 player-defined groups?"
		]
	},
	"PlayerUnitNpcIsInRange": {
		"prefix": "SF2.Condition.PlayerUnitNpcIsInRange",
		"body": [
			"PlayerUnitNpcIsInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:}              -- The UnitId as from the database (0 = all NPC units).",
			"\tRange = ${3:}               -- The query radius in grid points.",
			"\tX = ${4:}                   -- The X coordinate in world coordinates.",
			"\tY = ${5:}                   -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Is a specific NPC unit near the given coordinates?",
			"Checks if an NPC unit of a certain UnitId and player is located near the specified coordinates.",
			"If UnitId = 0, the check applies to all NPC units."
		]
	},
	"PlayerUnitNpcIsInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerUnitNpcIsInRangeToEntity",
		"body": [
			"PlayerUnitNpcIsInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:}              -- The UnitId as from the database (0 = all NPC units).",
			"\tRange = ${3:}               -- The query radius in grid points.",
			"\tTargetTag = \"${4:}\"       -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Is a specific NPC unit near the given tag?",
			"Checks if an NPC unit of a certain UnitId and player is located near the specified tag.",
			"If UnitId = 0, the check applies to all NPC units."
		]
	},
	"PlayerUnitNpcIsNotInRange": {
		"prefix": "SF2.Condition.PlayerUnitNpcIsNotInRange",
		"body": [
			"PlayerUnitNpcIsNotInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:}              -- The UnitId as from the database (0 = all NPC units).",
			"\tRange = ${3:}               -- The query radius in grid points.",
			"\tX = ${4:}                   -- The X coordinate in world coordinates.",
			"\tY = ${5:}                   -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Checks if a specific NPC unit is NOT near the given coordinates.",
			"If UnitId = 0, the check applies to all NPC units."
		]
	},
	"PlayerUnitNpcIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerUnitNpcIsNotInRangeToEntity",
		"body": [
			"PlayerUnitNpcIsNotInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:}              -- The UnitId as from the database (0 = all NPC units).",
			"\tRange = ${3:}               -- The query radius in grid points.",
			"\tTargetTag = \"${4:}\"       -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Negated: Checks if a specific NPC unit is NOT near the given tag.",
			"If UnitId = 0, the check applies to all NPC units."
		]
	},
	"PlayerUnitRtsIsInRange": {
		"prefix": "SF2.Condition.PlayerUnitRtsIsInRange",
		"body": [
			"PlayerUnitRtsIsInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:}              -- The UnitId as from the database (0 = all RTS units).",
			"\tRange = ${3:}               -- The query radius in grid points.",
			"\tX = ${4:}                   -- The X coordinate in world coordinates.",
			"\tY = ${5:}                   -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Checks if a specific RTS unit is near the given coordinates.",
			"Checks if an RTS unit of a certain UnitId and player is located near the specified coordinates.",
			"If UnitId = 0, the check applies to all RTS units."
		]
	},
	"PlayerUnitRtsIsInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerUnitRtsIsInRangeToEntity",
		"body": [
			"PlayerUnitRtsIsInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:}              -- The UnitId as from the database (0 = all RTS units).",
			"\tRange = ${3:}               -- The query radius in grid points.",
			"\tTargetTag = \"${4:}\"       -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Checks if a specific RTS unit is near the given entity tag.",
			"Checks if an RTS unit of a certain UnitId and player is located near the specified tag.",
			"If UnitId = 0, the check applies to all RTS units."
		]
	},
	"PlayerUnitRtsIsNotInRange": {
		"prefix": "SF2.Condition.PlayerUnitRtsIsNotInRange",
		"body": [
			"PlayerUnitRtsIsNotInRange",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:}              -- The UnitId as from the database (0 = all RTS units).",
			"\tRange = ${3:}               -- The query radius in grid points.",
			"\tX = ${4:}                   -- The X coordinate in world coordinates.",
			"\tY = ${5:}                   -- The Y coordinate in world coordinates.",
			"}"
		],
		"description": [
			"Negated: Checks if a specific RTS unit is NOT near the given coordinates.",
			"If UnitId = 0, the check applies to all RTS units."
		]
	},
	"PlayerUnitRtsIsNotInRangeToEntity": {
		"prefix": "SF2.Condition.PlayerUnitRtsIsNotInRangeToEntity",
		"body": [
			"PlayerUnitRtsIsNotInRangeToEntity",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tUnitId = ${2:}              -- The UnitId as from the database (0 = all RTS units).",
			"\tRange = ${3:}               -- The query radius in grid points.",
			"\tTargetTag = \"${4:}\"       -- The script tag of the target entity.",
			"}"
		],
		"description": [
			"Negated: Checks if a specific RTS unit is NOT near the given entity tag.",
			"If UnitId = 0, the check applies to all RTS units."
		]
	},
	"QuestIsActive": {
		"prefix": "SF2.Condition.QuestIsActive",
		"body": [
			"QuestIsActive",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tQuest = \"${2:}\"           -- The name or tag of the quest.",
			"}"
		],
		"description": [
			"Checks if the specified quest is active for the given player.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Quest = ''"
		]
	},
	"QuestIsKnown": {
		"prefix": "SF2.Condition.QuestIsKnown",
		"body": [
			"QuestIsKnown",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tQuest = \"${2:}\"           -- The name or tag of the quest.",
			"}"
		],
		"description": [
			"Checks if the specified quest is known for the given player.",
			"A quest is considered known if it is either active, solved, or unsolvable.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Quest = ''"
		]
	},
	"QuestIsNotActive": {
		"prefix": "SF2.Condition.QuestIsNotActive",
		"body": [
			"QuestIsNotActive",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tQuest = \"${2:}\"           -- The name or tag of the quest.",
			"}"
		],
		"description": [
			"Negated: Checks if the specified quest is NOT active for the given player.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Quest = ''"
		]
	},
	"QuestIsNotKnown": {
		"prefix": "SF2.Condition.QuestIsNotKnown",
		"body": [
			"QuestIsNotKnown",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tQuest = \"${2:}\"           -- The name or tag of the quest.",
			"}"
		],
		"description": [
			"Negated: Checks if the specified quest is NOT known for the given player.",
			"A quest is considered known if it is either active, solved, or unsolvable.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Quest = ''"
		]
	},
	"QuestIsNotSolved": {
		"prefix": "SF2.Condition.QuestIsNotSolved",
		"body": [
			"QuestIsNotSolved",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tQuest = \"${2:}\"           -- The name or tag of the quest.",
			"}"
		],
		"description": [
			"Negated: Checks if the specified quest is NOT solved for the given player.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Quest = ''"
		]
	},
	"QuestIsNotUnsolvable": {
		"prefix": "SF2.Condition.QuestIsNotUnsolvable",
		"body": [
			"QuestIsNotUnsolvable",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tQuest = \"${2:}\"           -- The name or tag of the quest.",
			"}"
		],
		"description": [
			"Negated: Checks if the specified quest is NOT unsolvable for the given player.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Quest = ''"
		]
	},
	"QuestIsSolved": {
		"prefix": "SF2.Condition.QuestIsSolved",
		"body": [
			"QuestIsSolved",
			"{",
			"\tPlayer = \"${1:pl_Human}\"  -- The player name as set in the team setup.",
			"\tQuest = \"${2:}\"           -- The name or tag of the quest.",
			"}"
		],
		"description": [
			"Checks if the specified quest is solved for the given player.",
			"Default values:",
			" - Player = 'pl_Human'",
			" - Quest = ''"
		]
	},
	"QuestIsUnsolvable": {
		"prefix": "SF2.Condition.QuestIsUnsolvable",
		"body": [
			"QuestIsUnsolvable",
			"{",
			"\tPlayer = \"${1:pl_Human}\",  -- The player name as set in the team setup.",
			"\tQuest = \"${2:}\"            -- The name or tag of the quest.",
			"}"
		],
		"description": [
			"Checks if the specified quest is unsolvable for the given player."
		]
	},
    "SetUpdateInterval": {
        "prefix": "SF2.Action.SetUpdateInterval",
        "body": [
            "SetUpdateInterval",
            "{",
            "\tSteps = ${1:10}  -- The update interval in GD Steps (1 Step = 1/10 second).",
            "}"
        ],
        "description": [
            "Set the update interval for the following conditions in your game logic.",
            "Automatically applies the specified interval to all subsequent conditions.",
            "Useful for performance optimization when a small delay is irrelevant or the order of condition satisfaction is unpredictable.",
            "Example: Checking if 10 different entities are dead without caring about the exact order or timing.",
            "You can also force conditions to be checked more frequently by setting a lower update interval.",
            "Important: Conditions following SetUpdateInterval will only be evaluated every x Steps.",
            "Be careful when using it: you might miss events that happen between checks, like an entity respawning.",
            "Do not use SetUpdateInterval inside OR conditions—it does not make sense.",
            "Examples:",
            "1) Assigning an update interval to conditions without one:",
            "   Condition = {",
            "       SetUpdateInterval {Steps = 10},",
            "       EntityFlagIsTrue {Name = \"ef_IAmTrue1\"},",
            "       EntityFlagIsTrue {Name = \"ef_IAmTrue2\"},",
            "       EntityFlagIsTrue {Name = \"ef_IAmTrue3\"},",
            "       EntityFlagIsTrue {Name = \"ef_IAmTrue4\"},",
            "       EntityFlagIsTrue {Name = \"ef_IAmTrue5\"},",
            "   }",
            "2) Reducing the update interval of conditions:",
            "   Condition = {",
            "       EntityFlagIsTrue {Name = \"ef_IAmTrue1\"},",
            "       SetUpdateInterval {Steps = 2},",
            "       PlayerFigureIsInRange {X = 100, Y = 200, Range = 0.5},",
            "   }"
        ]
    },
    "TimeIsBetween": {
        "prefix": "SF2.Condition.TimeIsBetween",
        "body": [
            "TimeIsBetween",
            "{",
            "\tStartHour = ${1:0.0},  -- A starting hour between 0.0 and 24.0, decimals allowed",
            "\tEndHour = ${2:24.0}    -- An ending hour between 0.0 and 24.0, decimals allowed",
            "}"
        ],
        "description": [
            "Checks whether the current in-game time is between two specified hours.",
            "The condition is true if the game time falls between StartHour and EndHour.",
            "StartHour must always be less than EndHour.",
            "Example: To check if the time is between 22:00 and 04:00, use:",
            "  TimeIsNotBetween {StartHour = 4, EndHour = 22}",
            "Decimal values are allowed: 10.5 means 10:30, 12.33 means 12:20, 15.1 means 15:06.",
            "Usually, you only need to check time in 15 or 30-minute increments."
        ]
    },
    "TimeIsNotBetween": {
        "prefix": "SF2.Condition.TimeIsNotBetween",
        "body": [
            "TimeIsNotBetween",
            "{",
            "\tStartHour = ${1:0.0},  -- A starting hour between 0.0 and 24.0, decimals allowed",
            "\tEndHour = ${2:24.0}    -- An ending hour between 0.0 and 24.0, decimals allowed",
            "}"
        ],
        "description": [
            "Checks whether the current in-game time is NOT between two specified hours.",
            "This condition is the negation of TimeIsBetween.",
            "The condition is true if the game time falls outside the interval from StartHour to EndHour.",
            "StartHour must always be less than EndHour.",
            "Example: To check if the time is outside 04:00 to 22:00, use:",
            "  TimeIsNotBetween {StartHour = 4, EndHour = 22}",
            "Decimal values are allowed: 10.5 means 10:30, 12.33 means 12:20, 15.1 means 15:06."
        ]
    },
    "TutorialCameraIsIn3rdPersonView": {
        "prefix": "SF2.Condition.TutorialCameraIsIn3rdPersonView",
        "body": [
            "TutorialCameraIsIn3rdPersonView",
            "{",
            "}"
        ],
        "description": [
            "Checks whether the tutorial camera is currently in 3rd person view.",
            "The condition returns true if the camera is in 3rd person mode.",
            "No additional parameters are needed for this check."
        ]
    },
    "TutorialCameraIsNotIn3rdPersonView": {
        "prefix": "SF2.Condition.TutorialCameraIsNotIn3rdPersonView",
        "body": [
            "TutorialCameraIsNotIn3rdPersonView",
            "{",
            "}"
        ],
        "description": [
            "Checks whether the tutorial camera is NOT in 3rd person view.",
            "This condition is the negation of TutorialCameraIsIn3rdPersonView.",
            "Returns true if the camera is in a different mode than 3rd person.",
            "No additional parameters are needed for this check."
        ]
    },
    "TutorialStateIsNotSet": {
        "prefix": "SF2.Condition.TutorialStateIsNotSet",
        "body": [
            "TutorialStateIsNotSet",
            "{",
            "\tTutorialState = \"${1:STATE_CONSTANT}\"  -- Specify a tutorial state constant here",
            "}"
        ],
        "description": [
            "Checks whether a specific tutorial state is NOT set.",
            "This is the negation of TutorialStateIsSet.",
            "Returns true if the hint or instruction text is no longer present in the queue.",
            "Replace STATE_CONSTANT with the appropriate tutorial state identifier."
        ]
    },
    "TutorialStateIsSet": {
        "prefix": "SF2.Condition.TutorialStateIsSet",
        "body": [
            "TutorialStateIsSet",
            "{",
            "\tTutorialState = \"${1:STATE_CONSTANT}\"  -- Specify a tutorial state constant here",
            "}"
        ],
        "description": [
            "Checks whether a specific tutorial state is set.",
            "Returns true if the hint or instruction text is currently present in the queue.",
            "Replace STATE_CONSTANT with the appropriate tutorial state identifier."
        ]
    },
    "TutorialTaskTextIsNotOnScreen": {
        "prefix": "SF2.Condition.TutorialTaskTextIsNotOnScreen",
        "body": [
            "TutorialTaskTextIsNotOnScreen",
            "{",
            "\tTake = ${1:0}  -- The take number of a TutorialTask text",
            "}"
        ],
        "description": [
            "Checks whether a TutorialTask text is NOT currently displayed on screen.",
            "This is the negation of TutorialTaskTextIsOnScreen.",
            "Returns true if the specified TutorialTask text is no longer visible.",
            "Parameter 'Take' defines the tutorial task text number."
        ]
    },
    "TutorialTaskTextIsOnScreen": {
        "prefix": "SF2.Condition.TutorialTaskTextIsOnScreen",
        "body": [
            "TutorialTaskTextIsOnScreen",
            "{",
            "\tTake = ${1:0}  -- The take number of a TutorialTask text",
            "}"
        ],
        "description": [
            "Checks whether a TutorialTask text is currently displayed on screen.",
            "This is the counterpart of TutorialTaskTextIsNotOnScreen.",
            "Returns true if the specified TutorialTask text is visible.",
            "Parameter 'Take' defines the tutorial task text number."
        ]
    },
    "TutorialTextIsFinished": {
        "prefix": "SF2.Condition.TutorialTextIsFinished",
        "body": [
            "TutorialTextIsFinished",
            "{",
            "\tTake = ${1:0}  -- The take number of a TutorialTask text",
            "}"
        ],
        "description": [
            "Checks whether a tutorial hint or instruction text has finished.",
            "Returns true if the specified tutorial text is no longer present in the queue.",
            "Parameter 'Take' defines the tutorial task text number."
        ]
    },
    "TutorialTextIsNotFinished": {
        "prefix": "SF2.Condition.TutorialTextIsNotFinished",
        "body": [
            "TutorialTextIsNotFinished",
            "{",
            "\tTake = ${1:0}  -- The take number of a TutorialTask text",
            "}"
        ],
        "description": [
            "Checks whether a tutorial hint or instruction text is NOT finished.",
            "This is the negation of TutorialTextIsFinished.",
            "Returns true if the specified tutorial text is still present in the queue.",
            "Parameter 'Take' defines the tutorial task text number."
        ]
    },
    "TutorialWorkerIsGatheringSilver": {
        "prefix": "SF2.Condition.TutorialWorkerIsGatheringSilver",
        "body": [
            "TutorialWorkerIsGatheringSilver",
            "{",
            "\tAmount = ${1:1}  -- Any amount of silver",
            "}"
        ],
        "description": [
            "Checks whether a tutorial worker is currently gathering silver.",
            "The condition becomes true if the worker is collecting the specified amount of silver.",
            "Parameter 'Amount' defines how much silver should be gathered.",
            "Default is 1."
        ]
    },
    "TutorialWorkerIsNotGatheringSilver": {
        "prefix": "SF2.Condition.TutorialWorkerIsNotGatheringSilver",
        "body": [
            "TutorialWorkerIsNotGatheringSilver",
            "{",
            "\tAmount = ${1:1}  -- Any amount of silver",
            "}"
        ],
        "description": [
            "Checks whether a tutorial worker is NOT gathering silver.",
            "This is the negation of TutorialWorkerIsGatheringSilver.",
            "The condition becomes true if the worker is not collecting the specified amount of silver.",
            "Parameter 'Amount' defines how much silver should be gathered.",
            "Default is 1."
        ]
    },
    "VisualTimerIsActive": {
        "prefix": "SF2.Condition.VisualTimerIsActive",
        "body": [
            "VisualTimerIsActive",
            "{",
            "\t-- No parameters required",
            "}"
        ],
        "description": [
            "Checks whether a visual timer is currently active.",
            "Returns true if a visual timer is displayed on screen.",
            "No parameters are required for this condition."
        ]
    },
    "VisualTimerIsNotActive": {
        "prefix": "SF2.Condition.VisualTimerIsNotActive",
        "body": [
            "VisualTimerIsNotActive",
            "{",
            "\t-- No parameters required",
            "}"
        ],
        "description": [
            "Checks whether a visual timer is NOT active.",
            "This is the negation of VisualTimerIsActive.",
            "Returns true if no visual timer is displayed on screen.",
            "No parameters are required for this condition."
        ]
    },
    "XAND": {
        "prefix": "SF2.Condition.XAND",
        "body": [
            "XAND",
            "{",
            "\t-- No parameters required",
            "}"
        ],
        "description": [
            "Logical XOR (exclusive AND/OR) between two conditions.",
            "This is the negated combination of conditions: it returns true if exactly one condition is true, but not both.",
            "Can be used to create more complex logical checks in condition blocks.",
            "No parameters are required for this condition."
        ]
    },
    "XOR": {
        "prefix": "SF2.Condition.XOR",
        "body": [
            "XOR",
            "{",
            "\t-- No parameters required",
            "}"
        ],
        "description": [
            "Logical XOR (exclusive OR) between two conditions.",
            "XOR means 'either ... or'.",
            "XOR(C1, C2) is true if either C1 or C2 is true, but not both and not neither.",
            "In other words: C1 and C2 must not have the same truth value (contravalence condition).",
            "",
            "Logical equivalent:",
            "  XOR = OR{ AND{C1, not C2}, AND{not C1, C2} }",
            "",
            "Examples:",
            "  XOR(PlayerHasChicken, PlayerHasFox) is true",
            "   - if the player has either the chicken OR the fox.",
            "  It is false",
            "   - if the player has both, or",
            "   - if the player has neither.",
            "",
            "For comparison:",
            "  XAND(C1, C2) is true if both are true OR both are false (equivalence).",
            "  XOR(C1, C2) is true if exactly one is true (contravalence).",
            "",
            "No parameters are required for this condition."
        ]
    },
    "OnCutsceneFigureDespawnEvent": {
        "prefix": "SF2.Event.OnCutsceneFigureDespawnEvent",
        "body": [
            "OnCutsceneFigureDespawnEvent",
            "{",
            "\tEventName = \"${1:MyEvent}\"      -- The name of the event (useful for debugging)",
            "\tConditions = {${2}}              -- Conditions that must all be true",
            "\tActions = {${3}}                 -- Actions to execute when conditions are met",
            "\tGotoState = \"${4:self}\"        -- The state to transition to (default: self)",
            "}"
        ],
        "description": [
            "Executes actions when a cutscene figure despawns and specified conditions are met.",
            "Automatically respawns the entity when the conditions become true.",
            "Runs all actions listed under 'Actions'.",
            "Parameter 'EventName' is mainly for debugging.",
            "Parameter 'Conditions' is a list of conditions that must all be true.",
            "Parameter 'Actions' defines the actions to run once triggered.",
            "Parameter 'GotoState' sets the state to transition to (default is 'self')."
        ]
    },
    "OnCutsceneFigureRespawnEvent": {
        "prefix": "SF2.Event.OnCutsceneFigureRespawnEvent",
        "body": [
            "OnCutsceneFigureRespawnEvent",
            "{",
            "\tConditions = {${1}}              -- Conditions that must all be true",
            "\tActions = {${2}}                 -- Actions to execute when conditions are met",
            "\tTags = {${3}}                    -- One or more script tags",
            "\tCoop = ${4:false}                -- Whether this event applies in coop mode",
            "\tAllowCombat = ${5:false}         -- Whether combat is allowed during a cutscene",
            "\tGotoState = \"${6:self}\"        -- The state to transition to (default: self)",
            "}"
        ],
        "description": [
            "Executes actions when a cutscene figure respawns and specified conditions are met.",
            "Runs all actions listed under 'Actions'.",
            "Conditions: list of checks that must all be true.",
            "Tags: one or more script tags to classify or link the event.",
            "Coop: determines if the command is valid in coop mode (default: false).",
            "AllowCombat: defines whether combat is allowed during a cutscene (default: false).",
            "GotoState: the state to transition to (default: self)."
        ]
    },
    "OnDeadEvent": {
        "prefix": "SF2.Event.OnDeadEvent",
        "body": [
            "OnDeadEvent",
            "{",
            "\tEventName = \"${1:MyDeadEvent}\"  -- The name of the event (useful for debugging)",
            "\tConditions = {${2}}              -- Conditions that must all be true",
            "\tActions = {${3}}                 -- Actions to execute when conditions are met",
            "}"
        ],
        "description": [
            "Event that triggers whenever the figure in the corresponding state dies.",
            "This event only runs if:",
            "  - The figure dies in the state where the OnDeadEvent is defined.",
            "  - There is a corresponding RespawnEvent in that same state.",
            "  - All specified conditions are met.",
            "Parameters:",
            "  - EventName: for debugging or identifying the event.",
            "  - Conditions: list of checks that must all be true.",
            "  - Actions: list of actions to execute when triggered."
        ]
    },
    "OnEvent": {
        "prefix": "SF2.Event.OnEvent",
        "body": [
            "OnEvent",
            "{",
            "\tEventName = \"${1:MyEvent}\"      -- The name of the event (useful for debugging)",
            "\tConditions = {${2}}              -- Conditions that must all be true",
            "\tActions = {${3}}                 -- Actions to execute when conditions are met",
            "\tGotoState = \"${4:self}\"        -- The state to transition to (default: self)",
            "}"
        ],
        "description": [
            "Base event that is executed whenever the specified conditions are true.",
            "This is the fundamental event type upon which all other events are built.",
            "",
            "Important usage notes:",
            "- OnEvent executes continuously while its conditions are true.",
            "- To prevent infinite repetition, at least one action should alter the state (e.g., set a flag).",
            "- A common pattern is to check if a flag is false, then set it to true in the actions.",
            "  (This effectively turns the event into a one-time trigger → better to use OnOneTimeEvent directly.)",
            "",
            "Performance considerations:",
            "- Running OnEvent every step is almost never useful.",
            "- It may cause redundant actions to run repeatedly, leading to performance issues.",
            "- Example: a Goto action every step would restart pathing constantly, making movement stutter.",
            "",
            "Best practice:",
            "- Use OnEvent only when conditions should remain reactive.",
            "- If an event should only trigger once, use OnOneTimeEvent instead.",
            "",
            "Technical note:",
            "- OnEvent is functionally similar to a transition in a state machine."
        ]
    },
    "OnFigureDeadOneTimeEvent": {
        "prefix": "SF2.Event.OnFigureDeadOneTimeEvent",
        "body": [
            "OnFigureDeadOneTimeEvent",
            "{",
            "\tConditions = {${1}}  -- Conditions that must all be true",
            "\tActions = {${2}}     -- Actions that will be executed once",
            "}"
        ],
        "description": [
            "Executes actions once when the figure is dead and all specified conditions are true.",
            "",
            "Usage:",
            "- This event is triggered only once after the figure has died.",
            "- It is ideal for one-time reactions tied to a character’s death.",
            "",
            "Important note:",
            "- If the figure has an OnRespawn* event, then use the DeathActions of the respawn event instead.",
            "- This ensures that actions are properly aligned with the respawn system.",
            "",
            "General rule:",
            "- Applies the same logic rules as other events.",
            "- Conditions must all evaluate to true for the actions to trigger."
        ]
    },
    "OnFigureDyingOneTimeEvent": {
        "prefix": "SF2.Event.OnFigureDyingOneTimeEvent",
        "body": [
            "OnFigureDyingOneTimeEvent",
            "{",
            "\tConditions = {${1}}  -- Conditions that must all be true",
            "\tActions = {${2}}     -- Actions that will be executed once at the moment of death",
            "}"
        ],
        "description": [
            "Executes actions once at the exact moment the figure dies, provided all conditions are true.",
            "",
            "Usage:",
            "- Triggered in the instant the figure transitions into a dying state.",
            "- Useful for reactions that must happen immediately when death occurs (before respawn logic).",
            "",
            "Important note:",
            "- If the figure has an OnRespawn* event, use the DeathActions of the respawn event instead.",
            "- This ensures consistency with the respawn system.",
            "",
            "General rule:",
            "- Applies the same logic rules as other events.",
            "- Conditions must all evaluate to true for the actions to execute."
        ]
    },
    "OnFigureRespawnEvent": {
        "prefix": "SF2.Event.OnFigureRespawnEvent",
        "body": [
            "OnFigureRespawnEvent",
            "{",
            "\tWaitTime = ${1:0},              -- Seconds to wait after death before respawn",
            "\tX = ${2:self},                 -- X coordinate in grid points",
            "\tY = ${3:self},                 -- Y coordinate in grid points",
            "\tConditions = {${4}},           -- All conditions must be true for respawn",
            "\tActions = {${5}},              -- Executed at respawn",
            "\tDeathActions = {${6}},         -- Executed immediately when the figure dies",
            "\tDelayedActions = {${7}},       -- Spawn actions executed with delay",
            "\tNoSpawnEffect = ${8:false},    -- Suppress spawn effect if true",
            "\tIsSpawnOnlyWhen = ${9:false}   -- Internal use only (distinguishes SpawnOnlyWhen & Respawn)",
            "}"
        ],
        "description": [
            "Respawns an entity when conditions are met and executes associated actions.",
            "",
            "Execution flow:",
            "- DeathActions: executed immediately when the figure dies.",
            "- Actions: executed at the moment of respawn.",
            "- DelayedActions: executed later after respawn with a delay.",
            "",
            "Important rules:",
            "- ALL DeathActions of ALL RespawnEvents in a state are executed when the figure dies.",
            "- Only one RespawnEvent per state should be logically possible (conditions must be exclusive).",
            "- Conditions must be true for respawn to occur.",
            "",
            "Restrictions:",
            "- Works only for NPC units (RTS units cannot be scripted).",
            "",
            "Additional options:",
            "- NoSpawnEffect: suppresses the visual spawn effect.",
            "- IsSpawnOnlyWhen: internal flag to separate SpawnOnlyWhen from Respawn events."
        ]
    },
    "OnFigureSpawnOnlyWhenEvent": {
        "prefix": "SF2.Event.OnFigureSpawnOnlyWhenEvent",
        "body": [
            "OnFigureSpawnOnlyWhenEvent",
            "{",
            "\tX = ${1:self},               -- X coordinate in grid points",
            "\tY = ${2:self},               -- Y coordinate in grid points",
            "\tConditions = {${3}},         -- All conditions must be true for spawn",
            "\tActions = {${4}},            -- Executed when the figure spawns",
            "\tDelayedActions = {${5}},     -- Spawn actions executed with delay",
            "\tNoSpawnEffect = ${6:false}   -- Suppress spawn effect if true",
            "}"
        ],
        "description": [
            "The figure will only appear on the map when this event triggers.",
            "",
            "Execution flow:",
            "- At first load, the figure is immediately removed from the map.",
            "- It will only spawn once the Conditions are true.",
            "- On spawn, Actions are executed.",
            "- DelayedActions can run later, after spawn with a delay.",
            "",
            "Important notes:",
            "- Until spawned, the figure is considered 'dead'.",
            "  → This affects other scripts: if another script checks for this figure’s death, it will see it as already dead until spawn.",
            "  → Inside the figure’s own script this does not matter, because dead figures do not execute script events.",
            "",
            "Restrictions:",
            "- Works only for NPC units (RTS units cannot be scripted)."
        ]
    },
    "OnFollowEvent": {
        "prefix": "SF2.Event.OnFollowEvent",
        "body": [
            "OnFollowEvent",
            "{",
            "\tTag = \"${1}\",              -- Script tag of the figure that will follow",
            "\tTargetTag = \"${2}\",       -- Script tag of the target figure",
            "\tOnConditions = {${3}},      -- Conditions that must be true for follow to happen",
            "\tActions = {${4}}            -- Actions executed when follow is active",
            "}"
        ],
        "description": [
            "Follow event: controls follow mode between figures.",
            "",
            "Behavior:",
            "- When OnConditions are true, the figure (Tag) follows the target (TargetTag).",
            "- When OnConditions become false, the figure stops following (stands still).",
            "- If OnConditions become true again, the figure resumes following.",
            "- If no OnConditions are given, the figure follows unconditionally.",
            "",
            "Features:",
            "- Properly handles platform changes: figures keep following after a platform switch as long as conditions are true."
        ]
    },
    "OnFormationEvent": {
        "prefix": "SF2.Event.OnFormationEvent",
        "body": [
            "OnFormationEvent",
            "{",
            "\tEventName = \"${1}\",          -- Debug name of the event",
            "\tWaitTime = ${2:0},            -- Seconds to wait (e.g. after death before respawn)",
            "\tX = ${3:self},                -- X coordinate in grid points (self = current position)",
            "\tY = ${4:self},                -- Y coordinate in grid points (self = current position)",
            "\tDirection = ${5:0},           -- Direction in degrees (0 = south, 90 = east, etc.)",
            "\tGotoMode = \"${6:SimpleForcedWalk}\", -- Movement mode (e.g. SimpleForcedWalk)",
            "\tUpdateInterval = ${7:0},      -- Update interval for the event",
            "\tConditions = {${8}},          -- Conditions that must all be true",
            "\tActions = {${9}},             -- Actions executed when the event triggers",
            "\tHomeActions = {${10}},        -- Actions executed each time the NPC reaches the home point",
            "\tFormation = {${11}},          -- Formation table (see documentation for details)",
            "\tGotoState = \"${12:self}\"    -- Target state name",
            "}"
        ],
        "description": [
            "OnFormationEvent: Arranges figures according to a defined formation.",
            "",
            "Behavior:",
            "- Spawns or repositions figures at (X,Y) in a defined formation.",
            "- Figures align according to Direction (0°=South, 90°=East, etc.).",
            "- Supports custom GotoMode for movement (e.g. SimpleForcedWalk).",
            "- Actions are executed when the event triggers.",
            "- HomeActions are executed every time an NPC reaches the home point.",
            "",
            "Notes:",
            "- Formation must be defined in a formation table (see documentation).",
            "- UpdateInterval can be used to optimize performance.",
            "- GotoState determines the next state after formation setup."
        ]
    },
    "OnIdleGoHomeFake": {
        "prefix": "SF2.Event.OnIdleGoHomeFake",
        "body": [
            "OnIdleGoHomeFake",
            "{",
            "\tEventName = \"${1}\",                        -- Debug name of the event",
            "\tX = ${2:self},                              -- X coordinate in grid points (default = self position from editor)",
            "\tY = ${3:self},                              -- Y coordinate in grid points (default = self position from editor)",
            "\tRange = ${4:8},                             -- Range around homepoint considered as 'arrived'",
            "\tGotoForced = ${5:false},                    -- Switch movement to forced Goto mode",
            "\tUpdateInterval = ${6:0},                    -- Event update interval",
            "\tStopFigureWhenConditionsAreFalse = ${7:false}, -- If true, cancels going home when conditions are no longer met",
            "\tConditions = {${8}},                        -- Conditions that must all be true",
            "\tActions = {${9}},                           -- Actions executed when the event triggers",
            "\tHomeActions = {${10}},                      -- Actions executed each time NPC reaches homepoint",
            "\tOneTimeHomeActions = {${11}}                -- Actions executed only once on first arrival at homepoint",
            "}"
        ],
        "description": [
            "OnIdleGoHomeFake: Sends a figure back to its 'homepoint'.",
            "",
            "Behavior:",
            "- Homepoint is defined by (X, Y). If omitted, the editor’s initial figure position is used.",
            "- The NPC will go to its homepoint as long as:",
            "   * Conditions are true,",
            "   * The NPC is idle, and",
            "   * The NPC is not already at the homepoint.",
            "- When the NPC reaches the homepoint:",
            "   * HomeActions are executed every time,",
            "   * OneTimeHomeActions are executed only once, on first arrival.",
            "- If the NPC later leaves (e.g., swapped away or engaged in combat), it will return again when conditions are still true.",
            "",
            "Range parameter:",
            "- Determines how close to the coordinates counts as 'arrived'.",
            "- Useful to prevent NPCs from endlessly swapping/overlapping at the same spot.",
            "- Guidelines: 2–3 NPCs → Range 2, 4–6 → Range 3, 7–10 → Range 4, 10+ → Range 5.",
            "",
            "Notes:",
            "- GotoForced enforces movement even if standard AI would resist.",
            "- StopFigureWhenConditionsAreFalse cancels the action if conditions no longer hold."
        ]
    },
    "OnIdleRunHomeFake": {
        "prefix": "SF2.Event.OnIdleRunHomeFake",
        "body": [
            "OnIdleRunHomeFake",
            "{",
            "\tEventName = \"${1}\",                        -- Debug name of the event",
            "\tX = ${2:self},                              -- X coordinate in grid points (default = self position from editor)",
            "\tY = ${3:self},                              -- Y coordinate in grid points (default = self position from editor)",
            "\tRange = ${4:8},                             -- Range around homepoint considered as 'arrived'",
            "\tGotoForced = ${5:false},                    -- Switch movement to forced Goto mode",
            "\tUpdateInterval = ${6:0},                    -- Event update interval",
            "\tStopFigureWhenConditionsAreFalse = ${7:false}, -- If true, cancels running home when conditions are no longer met",
            "\tConditions = {${8}},                        -- Conditions that must all be true",
            "\tActions = {${9}},                           -- Actions executed when the event triggers",
            "\tHomeActions = {${10}},                      -- Actions executed each time NPC reaches homepoint",
            "\tOneTimeHomeActions = {${11}}                -- Actions executed only once on first arrival at homepoint",
            "}"
        ],
        "description": [
            "OnIdleRunHomeFake: Sends a figure back to its 'homepoint' by running instead of walking.",
            "",
            "Behavior:",
            "- Works identically to OnIdleGoHomeFake, except the NPC will *run* back to the homepoint.",
            "- Homepoint is defined by (X, Y). If omitted, the editor’s initial figure position is used.",
            "- The NPC will run to its homepoint as long as:",
            "   * Conditions are true,",
            "   * The NPC is idle, and",
            "   * The NPC is not already at the homepoint.",
            "- When the NPC reaches the homepoint:",
            "   * HomeActions are executed every time,",
            "   * OneTimeHomeActions are executed only once, on first arrival.",
            "- If the NPC later leaves (swapped or in combat), it will run back again if conditions are still true.",
            "",
            "Range parameter:",
            "- Determines how close to the coordinates counts as 'arrived'.",
            "- Prevents NPCs from endlessly swapping/overlapping at the same point.",
            "- Guidelines: 2–3 NPCs → Range 2, 4–6 → Range 3, 7–10 → Range 4, 10+ → Range 5.",
            "",
            "Notes:",
            "- GotoForced enforces running movement even if standard AI would resist.",
            "- StopFigureWhenConditionsAreFalse cancels the action if conditions no longer hold.",
            "- Otherwise behaves exactly like OnIdleGoHomeFake, but faster."
        ]
    },
    "OnLeverEvent": {
        "prefix": "SF2.Event.OnLeverEvent",
        "body": [
            "OnLeverEvent",
            "{",
            "\tDelay = ${1:5},                  -- Seconds before the lever can be used again",
            "\tLever = \"${2}\",                -- ScriptTag of the lever",
            "\tOnConditions = {${3}},           -- Conditions that must all be true to enable the lever",
            "\tActions = {${4}}                 -- Actions executed when the lever is switched ON",
            "}"
        ],
        "description": [
            "OnLeverEvent: A reusable lever event that executes actions when a lever is switched ON.",
            "",
            "Behavior:",
            "- Waits until the lever is switched ON by the player.",
            "- Executes the defined Actions immediately.",
            "- After 'Delay' seconds, the lever resets automatically to OFF.",
            "- During this cooldown, the lever cannot be used again (prevents spamming and bugs).",
            "- Lever must initially be set to OFF in the editor (default).",
            "",
            "Notes:",
            "- Lever parameter must be the ScriptTag of the lever entity.",
            "- The lever is enabled (usable by the player) only when OnConditions are true (or empty).",
            "- If OnConditions become false, the lever becomes disabled.",
            "- This allows quest logic to enable/disable lever interaction dynamically.",
            "- Use for levers that can be operated multiple times.",
            "- For one-time levers, use a different event (no reset)."
        ]
    },
    "OnObjectSpawnOnlyWhenEvent": {
        "prefix": "SF2.Event.OnObjectSpawnOnlyWhenEvent",
        "body": [
            "OnObjectSpawnOnlyWhenEvent",
            "{",
            "\tConditions = {${1}},   -- Conditions that must all be true before the object appears",
            "\tActions = {${2}}       -- Actions executed when the object spawns",
            "}"
        ],
        "description": [
            "OnObjectSpawnOnlyWhenEvent: Spawns an object only when the defined conditions are met.",
            "",
            "Behavior:",
            "- The object is initially removed from the map when the level loads.",
            "- It will appear only when all Conditions are true.",
            "- Upon spawning, the defined Actions are executed.",
            "",
            "Notes:",
            "- Works similar to OnFigureSpawnOnlyWhen, but for objects instead of figures.",
            "- Until the object spawns, it is considered non-existent in the game world."
        ]
    },
    "OnOneTimeDeadEvent": {
        "prefix": "SF2.Event.OnOneTimeDeadEvent",
        "body": [
            "OnOneTimeDeadEvent",
            "{",
            "\tEventName = \"${1}\",   -- Name of the event (for debugging).",
            "\tConditions = {${2}},   -- Conditions that must all be true.",
            "\tActions = {${3}}       -- Actions executed once when the figure dies.",
            "}"
        ],
        "description": [
            "OnOneTimeDeadEvent: Executes once when a figure dies in the corresponding state.",
            "",
            "Behavior:",
            "- Runs only once when the figure dies in the state containing this DeadEvent.",
            "- Requires that the state also has a RespawnEvent.",
            "- Executes only if the defined Conditions are true.",
            "",
            "Usage:",
            "- Place inside a state that includes both a RespawnEvent and this event.",
            "- Useful for handling one-time death triggers without repeating."
        ]
    },
    "OnOneTimeEvent": {
        "prefix": "SF2.Event.OnOneTimeEvent",
        "body": [
            "OnOneTimeEvent",
            "{",
            "\tEventName = \"${1}\",      -- Name of the event (for debugging).",
            "\tConditions = {${2}},      -- Conditions that must all be true.",
            "\tActions = {${3}},         -- Actions executed when conditions are met.",
            "\tGotoState = \"${4:self}\" -- State name to switch to (default is self).",
            "}"
        ],
        "description": [
            "OnOneTimeEvent: Executes exactly once when conditions are true.",
            "",
            "Behavior:",
            "- Works like OnEvent but can only trigger once.",
            "- Internally checks if the event’s flag is still False.",
            "- When triggered, it sets the event flag to True, preventing re-execution.",
            "",
            "Usage:",
            "- Place in a state to run actions only once when conditions are satisfied.",
            "- Can also transition to another state via GotoState."
        ]
    },
    "OnOneTimeLeverEvent": {
        "prefix": "SF2.Event.OnOneTimeLeverEvent",
        "body": [
            "OnOneTimeLeverEvent",
            "{",
            "\tLever = \"${1}\",        -- ScriptTag of the lever.",
            "\tOnConditions = {${2}},  -- Conditions that must all be true.",
            "\tActions = {${3}}        -- Actions executed when lever is switched ON.",
            "}"
        ],
        "description": [
            "OnOneTimeLeverEvent: Waits until the lever is ON, executes actions, then disables the lever permanently.",
            "",
            "Behavior:",
            "- Lever must start in OFF state (default in editor).",
            "- Once switched ON, it executes Actions and is permanently disabled.",
            "- OnConditions control whether the lever is enabled or disabled before usage.",
            "- OnConditions can toggle availability multiple times until the lever is used.",
            "",
            "Usage:",
            "- Ideal for single-use quest levers or triggers.",
            "- Place Actions for what should happen when the lever is activated once."
        ]
    },
    "OnOneTimePlayHeroAnimEvent": {
        "prefix": "SF2.Event.OnOneTimePlayHeroAnimEvent",
        "body": [
            "OnOneTimePlayHeroAnimEvent",
            "{",
            "\tEventName = \"${1}\",     -- Name of the event (for debugging).",
            "\tTag = \"${2}\",          -- Script Tag of the figure.",
            "\tAnim = \"${3}\",         -- Name of the hero animation file (without extension).",
            "\tConditions = {${4}},     -- Conditions that must all be true.",
            "\tActions = {${5}},        -- Actions executed when the event triggers.",
            "\tGotoState = \"${6:self}\", -- State name to switch to.",
            "\tLooped = ${7:false}      -- Whether the animation should loop.",
            "}"
        ],
        "description": [
            "OnOneTimePlayHeroAnimEvent: Plays a hero animation once when conditions are met.",
            "",
            "Behavior:",
            "- Executes only a single time when all Conditions are true.",
            "- Plays the specified hero animation (non-looped or looped).",
            "- EventFlag ensures it cannot be triggered again.",
            "- Can also perform Actions after the animation.",
            "",
            "Usage:",
            "- Use for cutscenes or one-time hero animations.",
            "- Example: Hero waves, salutes, or performs a unique scripted move."
        ]
    },
    "OnOneTimeRepeatEvent": {
        "prefix": "SF2.Event.OnOneTimeRepeatEvent",
        "body": [
            "OnOneTimeRepeatEvent",
            "{",
            "\tEventName = \"${1}\",     -- Name of the event (for debugging).",
            "\tName = \"${2}\",          -- Unique name of the repeatable event (used with EventReEnable).",
            "\tConditions = {${3}},     -- Conditions that must all be true.",
            "\tActions = {${4}},        -- Actions executed when the event triggers.",
            "\tGotoState = \"${5:self}\" -- State name to switch to.",
            "}"
        ],
        "description": [
            "OnOneTimeRepeatEvent: Like OnOneTimeEvent, but can be re-enabled via EventReEnable.",
            "",
            "Behavior:",
            "- Executes only once when all Conditions are true.",
            "- After triggering, the EventFlag is set to True, preventing repeat execution.",
            "- Using the Action 'EventReEnable' with this event's Name resets the EventFlag.",
            "- After re-enabling, Conditions are checked again and the event can trigger again.",
            "",
            "Usage:",
            "- Useful for events that should be repeatable but still controlled.",
            "- Example: A puzzle mechanism that can be reset and retried.",
            "- Example: Timed or staged encounters that should repeat only when explicitly reactivated."
        ]
    },
    "OnPlayHeroAnimEvent": {
        "prefix": "SF2.Event.OnPlayHeroAnimEvent",
        "body": [
            "OnPlayHeroAnimEvent",
            "{",
            "\tEventName = \"${1}\",     -- Name of the event (for debugging).",
            "\tTag = \"${2}\",          -- Script Tag of the hero figure.",
            "\tAnim = \"${3}\",         -- Name of the 'figure_hero_(fe)male_' animation file (without extension).",
            "\tConditions = {${4}},     -- Conditions that must all be true.",
            "\tActions = {${5}},        -- Actions executed when the event triggers.",
            "\tGotoState = \"${6:self}\", -- State name to switch to.",
            "\tLooped = ${7:false}      -- Whether the animation should loop.",
            "}"
        ],
        "description": [
            "OnPlayHeroAnimEvent: Executes whenever all Conditions are true.",
            "",
            "Behavior:",
            "- Plays the specified hero animation when triggered.",
            "- Continues to check Conditions, and will execute each time they are true.",
            "- Can optionally loop the animation if 'Looped' is set to true.",
            "",
            "Usage:",
            "- Useful for cutscenes or scripted hero actions.",
            "- Example: Hero kneeling, cheering, or gesturing repeatedly.",
            "- Example: Looping idle pose for a cinematic sequence."
        ]
    },
    "OnToggleEvent": {
        "prefix": "SF2.Event.OnToggleEvent",
        "body": [
            "OnToggleEvent",
            "{",
            "\tEventName = \"${1}\",       -- Name of the event (for debugging).",
            "\tOnConditions = {${2}},     -- Conditions that must all be true when toggling ON.",
            "\tOnActions = {${3}},        -- Actions executed when switching ON.",
            "\tOffConditions = {${4}},    -- Conditions that must all be true when toggling OFF.",
            "\tOffActions = {${5}}        -- Actions executed when switching OFF.",
            "}"
        ],
        "description": [
            "OnToggleEvent: Switches between two states based on conditions.",
            "",
            "Behavior:",
            "- Functions like two OnEvents controlled by an internal flag.",
            "- When EventFlag == False and OnConditions are true, executes OnActions and sets flag True.",
            "- When EventFlag == True and OffConditions are true, executes OffActions and sets flag False.",
            "",
            "Usage:",
            "- Useful for switches, recurring state changes, or alternating behaviors.",
            "- Example: Toggling lights ON and OFF.",
            "- Example: NPC patrol switching between two paths.",
            "",
            "⚠ Note:",
            "- Ensure conditions prevent rapid switching back and forth.",
            "- Uncontrolled toggling may cause performance or logic errors."
        ]
    },
    "MapQuestStates": {
        "prefix": "SF2.Event.MapQuestStates",
        "body": [
            "MapQuestStates",
            "{",
            "\tQuestSolveActions = {${1}},  -- Actions executed once when the quest is solved.",
            "\tOutcries = {${2}},          -- Outcries played at specific quest events.",
            "\tQuestParams = {${3}},       -- Parameters defining the quest type and behavior.",
            "\tRewards = {${4}}            -- Rewards given to the player upon quest completion.",
            "}"
        ],
        "description": [
            "MapQuestStates: Creates states for cooperative Map Quests.",
            "",
            "Usage Notes:",
            "- Only this command should be in the script.",
            "- For multiple map quests, create a separate script per quest.",
            "- Attach the script either to an object or preferably to an empty script group.",
            "- Human team must be named 'tm_Human'.",
            "- Human players must be 'pl_Human1', 'pl_Human2', and 'pl_Human3'.",
            "",
            "Ranges:",
            "- Always relative to the Avatar of a player.",
            "- Quests apply to all players collectively (resources/requirements are shared).",
            "",
            "QuestParams:",
            "- Quest: Database quest tag.",
            "- TimeLimit: Minutes until quest ends (0 = no timer).",
            "- StartWith: 'Area', 'Map', or 'Lever' defines how quest begins.",
            "- StartTag: Tag of lever/entity for area trigger.",
            "- StartRange: Area radius (if applicable).",
            "- Type: Kill | Protect | Acquire | Conquer.",
            "",
            "Quest Types Examples:",
            "- Kill: Defeat units with specific tags.",
            "- Protect: Keep units/buildings alive.",
            "- Acquire: Gather resources/items.",
            "- Conquer: Capture or build in target area.",
            "",
            "Rewards:",
            "- Items, XP, currencies, RTS units, or ownership transfer of tagged entities.",
            "",
            "⚠ Important:",
            "- Remove collected misc items from inventory at map start.",
            "- TransferTags must be divisible by 3 (distributed across players)."
        ]
    },
    "PathStates": {
        "prefix": "SF2.Event.PathStates",
        "body": [
            "PathStates",
            "{",
            "\tStateName = \"${1:pathwalking}\",  -- State name, can be jumped to with GotoState.",
            "\tGotoState = \"${2:self}\",        -- Target state when StopConditions are true.",
            "\tConditions = {${3}},             -- Conditions required before walking starts.",
            "\tActions = {${4}},                -- Actions executed once walking begins.",
            "\tStopConditions = {${5}},         -- Conditions that stop walking.",
            "\tStopActions = {${6}},            -- Actions executed when walking is stopped.",
            "\tPoints = {${7}}                  -- Path points (see documentation).",
            "}"
        ],
        "description": [
            "PathStates: Creates states for path walking (figure movement along defined points).",
            "",
            "Usage:",
            "- Use StateName to define a named state that can be entered via GotoState.",
            "- If StopConditions are true, walking halts and GotoState is triggered.",
            "- Points must contain at least 2 entries with a 'Point' parameter.",
            "",
            "Point Parameters:",
            "- Point: Target object/entity tag. (If figure tag, 'Follow' mode must be on!)",
            "- WaitTime: Steps to wait at the point.",
            "- Direction: Facing direction at the point (requires WaitTime > 0).",
            "- Range: Distance threshold to consider point reached.",
            "- GotoMode: Movement mode. Options:",
            "   • 'run' | 'walk' | 'simple' | 'forced' (as string)",
            "   • 'Teleport' (teleports instantly to point)",
            "   • 'Follow' (follow mode, useful only on figures; range auto-adjusted).",
            "- PingPong: Loops back and forth between points (⚠ buggy).",
            "- Loop: Loops continuously at the point.",
            "- Actions: Executed when moving to the next point.",
            "- HomeActions: Executed upon arrival at point.",
            "",
            "Example:",
            "PathStates",
            "{",
            "   StateName = \"pathwalking\",",
            "   GotoState = \"Idle\",",
            "   Conditions = {},",
            "   Actions = {},",
            "   StopConditions = {},",
            "   Points = {",
            "      {",
            "         Point = \"MyPathPoint1\",",
            "         WaitTime = 30,",
            "         Direction = 4,",
            "         Range = 0.2,",
            "         GotoMode = \"SimpleForcedRun\",",
            "         Actions = {},",
            "         HomeActions = {},",
            "      },",
            "   },",
            "}"
        ]
    },
    "QuestRewardStates": {
        "prefix": "SF2.Event.QuestRewardStates",
        "body": [
            "QuestRewardStates",
            "{",
            "\tRewards = {${1}}  -- Rewards given to the player when solving the quest.",
            "}"
        ],
        "description": [
            "QuestRewardStates: Creates states for quest rewards.",
            "",
            "Usage:",
            "- Place all reward definitions inside the Rewards table.",
            "- Rewards are handed to the player upon quest completion.",
            "",
            "Reward Options:",
            "- ItemsMisc   = {[ItemId] = Amount, ...}   → Miscellaneous items.",
            "- ItemsEquip  = {[ItemId] = Amount, ...}   → Equipment items.",
            "- XP          = N                          → Experience points.",
            "- Silver      = N, Gold = N, Lenya = N     → Resource rewards.",
            "- Stone, Iron = N                          → Additional resources.",
            "- SpawnRTSUnits = {Level = N, [UnitId] = Amount, ...} → Spawns RTS units.",
            "- TransferTags = {\"tag1\", \"tag2\", ...} → Transfers existing neutral entities/buildings.",
            "",
            "Example:",
            "QuestRewardStates",
            "{",
            "   Rewards = {",
            "       ItemsMisc  = {[234] = 1, [567] = 2},",
            "       ItemsEquip = {[123] = 5},",
            "       XP         = 5000,",
            "       Gold       = 100,",
            "       SpawnRTSUnits = {Level = 14, [876] = 5},",
            "       TransferTags  = {\"unit1\", \"unit2\", \"unit3\"},",
            "   }",
            "}"
        ]
    },
    "State": {
        "prefix": "SF2.Event.State",
        "body": [
            "State",
            "{",
            "\tStateName = \"${1:state_name}\",       -- Name of the state.",
            "\t${2:Events} = {${3:self}}            -- Add one or more events here (or 'self').",
            "}"
        ],
        "description": [
            "State: Creates a new state that contains events.",
            "",
            "Usage:",
            "- Each State is a container for events.",
            "- One or more States form a finite state machine.",
            "- Only the Conditions of events inside the currently active State are checked.",
            "- Initially, the first State in a script is the active one.",
            "",
            "Parameters:",
            "- StateName   → Unique name of the state.",
            "- Events      → One or more events placed in this state (use 'self' if none).",
            "",
            "Notes:",
            "- Events with a GotoState parameter allow transitioning between states.",
            "- Delaying a state switch (via conditions) can prevent errors and improve performance.",
            "- At any given time, only one State is active.",
            "",
            "More info: See Wikipedia on Finite State Machines (FSM)."
        ]
    }																																		
}
